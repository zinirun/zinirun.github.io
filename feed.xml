<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zinirun</title>
  
  <subtitle>tech blog by Zini</subtitle>
  <link href="https://zinirun.github.io/feed.xml" rel="self"/>
  
  <link href="https://zinirun.github.io/"/>
  <updated>2020-09-12T14:16:51.242Z</updated>
  <id>https://zinirun.github.io/</id>
  
  <author>
    <name>zini</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript 30 - Day 24 Sticky Nav</title>
    <link href="https://zinirun.github.io/2020/09/12/js-course30-24/"/>
    <id>https://zinirun.github.io/2020/09/12/js-course30-24/</id>
    <published>2020-09-12T13:33:57.000Z</published>
    <updated>2020-09-12T14:16:51.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-24-Sticky-Nav"><a href="#Day-24-Sticky-Nav" class="headerlink" title="Day 24 - Sticky Nav"></a>Day 24 - Sticky Nav</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/5FLOBCGH3_U" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 반응형 웹에서 많이 쓰이는 디자인으로, 스크롤할 때 내비게이션 바(메뉴)가 고정되어 내려가고, 로고가 보이는 효과이다.</p><p>이전 과제 중에 <code>scroll</code> 속성을 이용한 과제들이 많았는데, 이번에도 그렇고, 쉬운 편이다.</p><h2 id="CSS-속성-추가하기"><a href="#CSS-속성-추가하기" class="headerlink" title="CSS 속성 추가하기"></a>CSS 속성 추가하기</h2><p>우선 우리가 고정시켜야 하는 내비게이션 바는 <code>&lt;nav&gt;</code>로 감싸져 있다. 특정 시점에서 <code>.fixed-nav</code>라는 class 속성을 추가하면 css 스타일의 변화도 쉽게 끄고 켜는 개념으로 조정할 수 있다.</p><h3 id="상단에-메뉴-고정시키기"><a href="#상단에-메뉴-고정시키기" class="headerlink" title="상단에 메뉴 고정시키기"></a>상단에 메뉴 고정시키기</h3><p>원래의 <code>nav</code> 속성은</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 <code>relative</code> 속성이기 때문에 스크롤을 내리지 않은 상태에서는 그냥 중간에 위치한 메뉴바처럼 생겼다.</p><p>이제 <code>.fixed-nav</code> 속성이 <code>body</code>에 추가된 경우의 속성을 작성하자.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fixed-nav</span> <span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이미 <code>nav</code>는 <code>top: 0</code>이고 <code>fixed</code> 위치 속성으로 바꿔줌으로써 상단에 고정시킬 수 있다.</p><h3 id="로고-보이게-하기"><a href="#로고-보이게-하기" class="headerlink" title="로고 보이게 하기"></a>로고 보이게 하기</h3><p>원래의 로고는</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>max-width</code>가 0으로 설정되어 보이지 않는다. 간단하게 <code>.fixed-nav</code> 속성이 body에 추가됐을 때 위에서 한 것과 똑같이 <code>li.logo</code>의 <code>max-width</code> 속성만 바꾸면 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fixed-nav</span> <span class="selector-tag">li</span><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>transition: all 0.5s;</code>로 설정되었기 때문에 모든 효과들이 보기 좋게 변한다. <em>(스르륵 변화한다)</em></p><h2 id="JS-작성하기"><a href="#JS-작성하기" class="headerlink" title="JS 작성하기"></a>JS 작성하기</h2><p>이번 자바스크립트 작성은 정말 쉽다. <code>window.scrollY</code>로 스크롤 한 Y 좌표 값(높이값)을 구해서 내비게이션 바의 <code>offsetTop</code>과 비교해주고 class 속성을 넣었다 뺐다 하면 끝난다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#main&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> topOfNav = nav.offsetTop;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixNav</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.scrollY &gt; topOfNav) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.paddingTop = nav.offsetHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.add(<span class="string">&quot;fixed-nav&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.paddingTop = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.remove(<span class="string">&quot;fixed-nav&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, fixNav);</span><br></pre></td></tr></table></figure><p><code>paddingTop</code>을 설정하는 이유는 <code>fixed</code>로 속성이 변경될 때 의도하지 않는 여백이 생겨버려 뚝뚝 끊겨버리기 때문이다.</p><p>이제 부드러운 상단 고정 메뉴바가 완성되었다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-24-Sticky-Nav&quot;&gt;&lt;a href=&quot;#Day-24-Sticky-Nav&quot; class=&quot;headerlink&quot; title=&quot;Day 24 - Sticky Nav&quot;&gt;&lt;/a&gt;Day 24 - Sticky Nav&lt;/h2&gt;&lt;div clas</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 23 Speech Synthesis</title>
    <link href="https://zinirun.github.io/2020/09/11/js-course30-23/"/>
    <id>https://zinirun.github.io/2020/09/11/js-course30-23/</id>
    <published>2020-09-11T14:37:29.000Z</published>
    <updated>2020-09-11T14:54:10.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-23-Speech-Synthesis"><a href="#Day-23-Speech-Synthesis" class="headerlink" title="Day 23 - Speech Synthesis"></a>Day 23 - Speech Synthesis</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/saCpKH_xdgs" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>지난 <a href="https://zinirun.github.io/2020/09/07/js-course30-20/">Day 20</a>의 주제가 <strong>STT</strong>(Speech To Text)였다면, 이번 과제의 주제는 **TTS(Text To Speech)**이다. 자바스크립트 자체에서 STT를 지원하듯이 TTS도 브라우저에 내장된 <code>SpeechSynthesis</code>를 사용하면 된다. 사용법은 간단하다.</p><p>먼저 TTS의 정보가 들어간 객체인 <code>msg</code> 를 선언한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="keyword">new</span> SpeechSynthesisUtterance();</span><br></pre></td></tr></table></figure><h2 id="음성의-목록을-나타내는-populateVoices-작성하기"><a href="#음성의-목록을-나타내는-populateVoices-작성하기" class="headerlink" title="음성의 목록을 나타내는 populateVoices() 작성하기"></a>음성의 목록을 나타내는 <code>populateVoices()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">populateVoices</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  voices = <span class="built_in">this</span>.getVoices();</span><br><span class="line">  voicesDropdown.innerHTML = voices</span><br><span class="line">    .filter(<span class="function">(<span class="params">voice</span>) =&gt;</span> voice.lang.includes(<span class="string">&quot;en&quot;</span>))</span><br><span class="line">    .map(</span><br><span class="line">      (voice) =&gt;</span><br><span class="line">        <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;voice.name&#125;</span>&quot;&gt;<span class="subst">$&#123;voice.name&#125;</span> (<span class="subst">$&#123;voice.lang&#125;</span>)&lt;/option&gt;`</span></span><br><span class="line">    )</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>speechSynthesis</code> 객체에서 <code>voicechanged</code> 이벤트가 일어났을 때 이 함수를 실행한다.</p><h2 id="목소리를-설정하는-setVoice-작성하기"><a href="#목소리를-설정하는-setVoice-작성하기" class="headerlink" title="목소리를 설정하는 setVoice() 작성하기"></a>목소리를 설정하는 <code>setVoice()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setVoice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.voice = voices.find(<span class="function">(<span class="params">voice</span>) =&gt;</span> voice.name === <span class="built_in">this</span>.value);</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>음성 목록에 <code>change</code> 이벤트를 목소리를 설정하는 이 함수로 걸어준다. TTS 정보를 관리하는 <code>msg</code> 객체의 <code>voice</code> 값을 바꿔준 후 직접 작성한 <code>toggle()</code> 함수로 목소리를 다시 재생한다.</p><h2 id="음성을-재생하는-toggle-작성하기"><a href="#음성을-재생하는-toggle-작성하기" class="headerlink" title="음성을 재생하는 toggle() 작성하기"></a>음성을 재생하는 <code>toggle()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggle</span>(<span class="params">startOver = true</span>) </span>&#123;</span><br><span class="line">  speechSynthesis.cancel();</span><br><span class="line">  <span class="keyword">if</span> (startOver) &#123;</span><br><span class="line">    speechSynthesis.speak(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>인자로 <code>startOver</code>를 넘기고, 기본 설정 인자인 <code>true</code>인 경우 이전 음성을 취소하고 새로운 음성을 재생하며, <code>false</code>를 인자로 주면 음성만 취소한다.</p><h2 id="다른-설정을-바꿀-수-있는-setOption-작성하기"><a href="#다른-설정을-바꿀-수-있는-setOption-작성하기" class="headerlink" title="다른 설정을 바꿀 수 있는 setOption() 작성하기"></a>다른 설정을 바꿀 수 있는 <code>setOption()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOption</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.value);</span><br><span class="line">  msg[<span class="built_in">this</span>.name] = <span class="built_in">this</span>.value;</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이전 과제에서 많이 보던 옵션 변경 함수인데, <code>input</code> 객체의 <code>name</code>을 변경할 속성의 이름과 일치시키면 <code>input</code> 객체의 <code>value</code>로 별도로 옵션을 구별하여 작성할 필요없이 한번에 사용할 수 있다.</p><p>이제 이 함수들을 이벤트로 걸어준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">speechSynthesis.addEventListener(<span class="string">&quot;voiceschanged&quot;</span>, populateVoices);</span><br><span class="line">voicesDropdown.addEventListener(<span class="string">&quot;change&quot;</span>, setVoice);</span><br><span class="line">options.forEach(<span class="function">(<span class="params">option</span>) =&gt;</span> option.addEventListener(<span class="string">&quot;change&quot;</span>, setOption));</span><br><span class="line">speakButton.addEventListener(<span class="string">&quot;click&quot;</span>, toggle);</span><br><span class="line">stopButton.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> toggle(<span class="literal">false</span>));</span><br><span class="line"><span class="comment">// same with toggle.bind(null, false);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-23-Speech-Synthesis&quot;&gt;&lt;a href=&quot;#Day-23-Speech-Synthesis&quot; class=&quot;headerlink&quot; title=&quot;Day 23 - Speech Synthesis&quot;&gt;&lt;/a&gt;Day 23 - Speech</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 Dev-Matching 2020 웹 프론트엔드 개발자(하반기) 합격</title>
    <link href="https://zinirun.github.io/2020/09/10/js-programmers-matching-2020-review-2/"/>
    <id>https://zinirun.github.io/2020/09/10/js-programmers-matching-2020-review-2/</id>
    <published>2020-09-10T05:08:24.000Z</published>
    <updated>2020-09-10T05:28:24.310Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zinirun.github.io/2020/08/23/js-programmers-matching-2020-review/">이전 후기 포스트</a></p><p><img src="/images/2020-09-10-14-20-21.png"></p><p>프로그래머스 Dev-Matching 2020 웹 프론트엔드 개발자 하반기(제목이 참 길다)에 합격했다. 물론 기업 1차에 붙은 것이라고 하기에도 뭐한게, 희망 기업에 “이력서를 전달할 기회”를 얻었다.</p><p>정말 좋다고 느낀 것은, 과제에 대해 하나하나 시니어 웹 개발자분들이 리뷰를 해준다는 것이다. 좋은 점, 아쉬운 점, 총평 3가지로 내 과제를 평가해준다. 아쉬운 코드라고 총평에는 나와있는데 상위 20%를 받은 것이 약간 아이러니하지만 뿌듯하긴 하다.</p><p>사실 취업에 발등이 떨어져서 이번 테스트를 신청한 것이 아니고, 코드 리뷰도 받고 내 역량도 체크할 겸 마음 편하게 봤는데 뜻밖의 좋은 소식을 받아서 기분이 좋다.</p><p>아쉬운 점 중 가장 반성하는 점 3개를 꼽자면</p><p><img src="/images/2020-09-10-14-25-15.png"></p><p>자바스크립트에서 클린 코드를 작성하려고 열심히 공부하고 있는데 이런 바보같은 짓을 해서 아직 정말 멀었다고 생각했다. 자바스크립트에서의 리팩토링과 디자인 패턴에 대해서 심도있는 공부가 필요할 것 같다.</p><p>아무튼 자신감 10% 정도 충전한 기분이다. 더 열심히 하자.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zinirun.github.io/2020/08/23/js-programmers-matching-2020-review/&quot;&gt;이전 후기 포스트&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-09-10-14-</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 22 Follow Along Link Highlighter</title>
    <link href="https://zinirun.github.io/2020/09/10/js-course30-22/"/>
    <id>https://zinirun.github.io/2020/09/10/js-course30-22/</id>
    <published>2020-09-10T04:34:27.000Z</published>
    <updated>2020-09-10T05:33:00.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-22-Follow-Along-Link-Highlighter"><a href="#Day-22-Follow-Along-Link-Highlighter" class="headerlink" title="Day 22 - Follow Along Link Highlighter"></a>Day 22 - Follow Along Link Highlighter</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/POP_qri7RA8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><img src="/images/2020-09-10-13-36-16.png"></p><p>디자인적으로 잘 갖춰진 웹을 돌아다니다 보면 메뉴의 요소들에 마우스를 이동할 때 <code>hover</code> 효과가 끊어지는 효과가 아닌 부드러운 배경의 이동을 사용하는 경우가 있다.</p><p>이번 과제는 상단 메뉴뿐만 아니라 페이지 전체에서 스크롤을 해도 모든 <code>&lt;a&gt;</code> 태그에 그런 효과를 주며 마우스를 이동할 때 마다 흰 배경이 따라다니게 구현하는 것을 목적으로 한다.</p><h2 id="CSS-이해하기"><a href="#CSS-이해하기" class="headerlink" title="CSS 이해하기"></a>CSS 이해하기</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* highlight는 span 객체 */</span></span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>미리 작성된 css를 보면 <code>absolute</code> 위치 속성과 <code>z-index: -1</code>을 적용했다. 객체의 절대적인 위치 값과 화면의 가로, 세로 값을 이용할 것이기 때문이다. <code>transition: all 0.2s;</code>는 객체에서 css의 변화가 일어날 때 모든 효과 변화에 대해 0.2초 간격의 부드러운 변환을 제공한다.</p><p>사실 이런 것들이 css에서 암기보다는 이해에 가깝다고 생각한다. 외우지 않아도 된다는 말을 많이 하지만, 적어도 이런 효과를 어떤 로직으로 주어야 할 지는 알아야 구글에 뭐라고 검색해야 할 지라도 알기 때문이다.</p><h2 id="Script-작성"><a href="#Script-작성" class="headerlink" title="Script 작성"></a>Script 작성</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> linkCoords = <span class="built_in">this</span>.getBoundingClientRect();</span><br><span class="line">  <span class="built_in">console</span>.log(linkCoords);</span><br><span class="line">  <span class="keyword">const</span> coords = &#123;</span><br><span class="line">    width: linkCoords.width,</span><br><span class="line">    height: linkCoords.height,</span><br><span class="line">    top: linkCoords.top + <span class="built_in">window</span>.scrollY,</span><br><span class="line">    left: linkCoords.left + <span class="built_in">window</span>.scrollX,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  highlight.style.width = <span class="string">`<span class="subst">$&#123;coords.width&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.height = <span class="string">`<span class="subst">$&#123;coords.height&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.transform = <span class="string">`translate(<span class="subst">$&#123;coords.left&#125;</span>px, <span class="subst">$&#123;coords.top&#125;</span>px)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getBoundingClientRect()</code>는 요소의 각종 좌표값이 들어있는 객체를 반환한다. 예를 들어 <code>getBoundingClientRect().top</code>은 Viewport의 시작지점을 기준으로 한 상대좌표 Y 값을 구할 수 있다.</p><p>그런데 이번 과제에서는 스크롤을 내려도 <code>highlight</code> 객체가 정확히 이동해야 하므로 <code>window.scrollX</code>, <code>window.scrollY</code>로 스크롤한 X, Y 값을 가져와서 더해주어야 정확한 요소의 위치에 객체가 이동한다.</p><p>이제 <code>a</code> 태그에 <code>mouseenter</code> 이벤트만 걸어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">triggers.forEach(<span class="function">(<span class="params">a</span>) =&gt;</span> a.addEventListener(<span class="string">&quot;mouseenter&quot;</span>, highlightLink));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-22-Follow-Along-Link-Highlighter&quot;&gt;&lt;a href=&quot;#Day-22-Follow-Along-Link-Highlighter&quot; class=&quot;headerlink&quot; title=&quot;Day 22 - Follow Alon</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 21 Geolocation</title>
    <link href="https://zinirun.github.io/2020/09/08/js-course30-21/"/>
    <id>https://zinirun.github.io/2020/09/08/js-course30-21/</id>
    <published>2020-09-08T07:50:43.000Z</published>
    <updated>2020-09-10T05:32:51.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-21-Geolocation"><a href="#Day-21-Geolocation" class="headerlink" title="Day 21 - Geolocation"></a>Day 21 - Geolocation</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/X7Cbtra0C6I" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 위치 정보를 다룰 수 있는 <code>navigator.geolocation</code>을 사용한다. 그런데 크롬 브라우저에서는 지원하지 않고 사파리에서 디버깅 모드로 속도, 위치를 바꿔가며 실습할 수 있다는데 맥 개발 환경이 없어서 코드만 보고 끝냈다. (내년에 맥북 사야할 이유가 한가지 늘었다)</p><h2 id="navigator-geolocation-watchPosition"><a href="#navigator-geolocation-watchPosition" class="headerlink" title="navigator.geolocation.watchPosition()"></a>navigator.geolocation.watchPosition()</h2><p>나침반인 <code>arrow</code>와 속도계인 <code>speed</code>가 모두 구현되어 있고, 위치 값을 이용하여 이를 조작하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">navigator.geolocation.watchPosition(</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    speed.textContent = data.coords.speed;</span><br><span class="line">    arrow.style.transform = <span class="string">`rotate(<span class="subst">$&#123;data.coords.heading&#125;</span>deg)`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>watchPosition()</code> 메소드를 활용하여 <code>coords.speed</code> 데이터와 <code>coords.heading</code> 데이터로 속도와 방향을 추출할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-21-Geolocation&quot;&gt;&lt;a href=&quot;#Day-21-Geolocation&quot; class=&quot;headerlink&quot; title=&quot;Day 21 - Geolocation&quot;&gt;&lt;/a&gt;Day 21 - Geolocation&lt;/h2&gt;&lt;div </summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 20 Speech Detection</title>
    <link href="https://zinirun.github.io/2020/09/07/js-course30-20/"/>
    <id>https://zinirun.github.io/2020/09/07/js-course30-20/</id>
    <published>2020-09-07T12:34:24.000Z</published>
    <updated>2020-09-07T12:56:12.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-20-Speech-Detection"><a href="#Day-20-Speech-Detection" class="headerlink" title="Day 20 - Speech Detection"></a>Day 20 - Speech Detection</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/0mJC0A72Fnw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 <a href="https://zinirun.github.io/2020/09/06/js-course30-19/">Day 19</a>의 웹캠 사용에 이어 연속으로 신기했는데, 바로 음성 인식이다.</p><p>사용해보니 유튜브 자동 자막처럼 완벽에 가까운 음성 인식은 아니지만 그래도 또박또박 말하면 90% 정도는 알아먹는 것 같다. 이 모듈은 로컬에서 <code>npm</code> 없이 테스트하면 계속 마이크 권한 창이 떠서 사용이 힘들고 Wesbos의 말대로 패키지 설치 후 <code>npm start</code>로 테스트해야 한다.</p><h2 id="window-SpeechRecognition"><a href="#window-SpeechRecognition" class="headerlink" title="window.SpeechRecognition"></a>window.SpeechRecognition</h2><p>음성인식 객체는 Window DOM의 최상단에 위치한다고 한다. 선언해서 사용하는 방법은 매우 간단하다.</p><p>먼저 선언하고, 변수에 음성인식 객체를 할당한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.SpeechRecognition =</span><br><span class="line">  <span class="built_in">window</span>.SpeechRecognition || <span class="built_in">window</span>.webkitSpeechRecognition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recognition = <span class="keyword">new</span> SpeechRecognition();</span><br></pre></td></tr></table></figure><p>그리고 대화가 끝날때까지 한 문장으로 입력받는 속성을 설정하고, 언어를 설정한다. 언어는 한국어 <code>ko-KR</code>을 지원하는 것을 봐서 거의 모든 언어를 지원하는 것 같다. (영어는 <code>en-US</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recognition.interimResults = <span class="literal">true</span>;</span><br><span class="line">recognition.lang = <span class="string">&quot;ko-KR&quot;</span>; <span class="comment">//en-US</span></span><br></pre></td></tr></table></figure><p><img src="/images/2020-09-07-21-43-48.png"></p><p>이제 음성인식된 스크립트를 <code>p</code> 객체를 <code>appendChild()</code>하여 <code>div</code> 객체에 넣어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> words = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.words&quot;</span>);</span><br><span class="line">words.appendChild(p);</span><br></pre></td></tr></table></figure><p><code>p</code> 객체를 먼저 만들어주고 <code>textContent</code>를 음성인식 스크립트로 넣어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>isFinal</code>을 검사하는 이유는 문장이 끝나면 새로운 <code>p</code> 객체를 만들어주어야 계속 <code>p</code>를 추가할 수 있기 때문이다.</p><p>이제 음성 인식을 실행해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recognition.start();</span><br></pre></td></tr></table></figure><p>그런데 위에서 짠 코드까지만 넣으면 한 문장만 입력되고 더 이상 입력되지 않는데, 음성인식이 종료되기 때문에 <code>recognition</code>에 <code>end</code> 이벤트를 걸어주고, 음성인식이 종료되면 다시 <code>recognition.start</code>를 실행하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;end&quot;</span>, recognition.start);</span><br></pre></td></tr></table></figure><h2 id="Full-Script"><a href="#Full-Script" class="headerlink" title="Full Script"></a>Full Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.SpeechRecognition =</span><br><span class="line">  <span class="built_in">window</span>.SpeechRecognition || <span class="built_in">window</span>.webkitSpeechRecognition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recognition = <span class="keyword">new</span> SpeechRecognition();</span><br><span class="line">recognition.interimResults = <span class="literal">true</span>;</span><br><span class="line">recognition.lang = <span class="string">&quot;ko-KR&quot;</span>; <span class="comment">//en-US</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> words = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.words&quot;</span>);</span><br><span class="line">words.appendChild(p);</span><br><span class="line"></span><br><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">recognition.addEventListener(<span class="string">&quot;end&quot;</span>, recognition.start);</span><br><span class="line"></span><br><span class="line">recognition.start();</span><br></pre></td></tr></table></figure><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><p>음성 인식을 활용해서 특정 단어가 포함되었을 때 로직을 추가할 수도 있다. 나는 <code>날씨</code>라는 말이 포함되었을 때 구글 날씨를 띄워봤는데, 작동해보니 매우 잘된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 날씨 추가한 부분</span></span><br><span class="line">  <span class="keyword">if</span> (transcript.includes(<span class="string">&quot;날씨&quot;</span>)) &#123;</span><br><span class="line">    <span class="built_in">window</span>.open(</span><br><span class="line">      <span class="string">&quot;https://www.google.com/search?q=%EB%82%A0%EC%94%A8&amp;oq=%EB%82%A0%EC%94%A8&amp;aqs=chrome..69i57j35i39l2j0j69i61j69i65j69i61l2.1234j0j7&amp;sourceid=chrome&amp;ie=UTF-8&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-20-Speech-Detection&quot;&gt;&lt;a href=&quot;#Day-20-Speech-Detection&quot; class=&quot;headerlink&quot; title=&quot;Day 20 - Speech Detection&quot;&gt;&lt;/a&gt;Day 20 - Speech</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>단국대학교 이러닝 강의 다운로더 제작기 (Chrome Extension)</title>
    <link href="https://zinirun.github.io/2020/09/07/project-dku-lms-downloader/"/>
    <id>https://zinirun.github.io/2020/09/07/project-dku-lms-downloader/</id>
    <published>2020-09-07T05:58:02.000Z</published>
    <updated>2020-09-07T07:20:32.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LMSDownloader-제작기"><a href="#LMSDownloader-제작기" class="headerlink" title="LMSDownloader 제작기"></a>LMSDownloader 제작기</h2><p>우리 학교에서 새로운 이러닝 시스템을 도입했는데, 리액트 구버전을 사용했으나 조잡한 느낌이 없지 않아 있다고 생각했다. 옛날 이러닝은 기존에 쓰던 비디오 다운로더 크롬 확장 프로그램을 통해 강의를 다운받을 수 있었는데, 새로운 이러닝은 강의를 기괴한(?) 방식으로 보여주고 있어서 다른 다운로드 프로그램들이 잡아내지를 못했다.</p><p><img src="/images/2020-09-07-16-10-04.png" alt="capture_program"></p><div style="text-align:center">완성한 프로그램의 디자인.</div><div style="text-align:center">아이콘은 단국대학교 공식 UI에서 가져왔다.</div><blockquote><p>블로그에서는 일부 중요한 코드만 언급하고, 모든 코드는 <a href="https://github.com/zinirun/LMSDownloader">Github</a>에 공개되어 있고, 기여할 수 있다.</p></blockquote><h2 id="로직-구성하기"><a href="#로직-구성하기" class="headerlink" title="로직 구성하기"></a>로직 구성하기</h2><p>사이트 소스를 보니 그럴만도 했다. <code>iframe</code>이 4중으로 되어 있고, 마지막 강의가 들어있는 프레임은 <code>contentDocument()</code> 메소드가 차단되어 있어 가져오지를 못했다.</p><p>조금 더 생각을 바꾸고, 세번째 프레임까지 들어간 다음, 네번째 프레임을 띄워주고 거기서 <code>video</code> 객체의 <code>src</code> 경로를 가져올 수 있겠다 싶었다.</p><h2 id="영상의-경로를-가져올-때-까지"><a href="#영상의-경로를-가져올-때-까지" class="headerlink" title="영상의 경로를 가져올 때 까지"></a>영상의 경로를 가져올 때 까지</h2><p>우선 세번째 프레임까지는 <code>contentDocument</code>를 통해 들어갈 수 있어서 안의 컨텐츠 내용을 가져올 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 첫번째 강의의 경우</span></span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>].src;</span><br><span class="line"><span class="comment">// 두번째 강의의 경우</span></span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>].src;</span><br></pre></td></tr></table></figure><p>코드가 바보같을 수도 있지만 우리 학교 이러닝에만 잘 사용되면 되므로 이 코드가 최적이라고 생각했다.</p><p>프로그램이 거의 완성되고 나서 알게된 건데, 2개 강의를 하루에 올려서 한 페이지에 영상이 2개가 로드되는 경우도 있었다. 그래서 스캔 버튼을 2개로 나누기로 하고 2번째 강의까지 성공적으로 <code>src</code>를 가져올 수 있었다.</p><h2 id="다운로드만-하면-된다"><a href="#다운로드만-하면-된다" class="headerlink" title="다운로드만 하면 된다"></a>다운로드만 하면 된다</h2><p>기본적으로 클라이언트 사이드에서는 로컬이 아닌 주소의 다운로드 요청이 차단되어서 서버 사이드에서의 작업이 요구된다. 하지만 크롬 프로그램이기 때문에 <code>chrome.downloads.download()</code>를 사용할 수 있다는 정보를 찾았고 <code>background.js</code>와 <code>popup.js</code> 두개로 나눠서 작업했다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.sendMessage(&#123;</span><br><span class="line">  action: <span class="string">&quot;download&quot;</span>,</span><br><span class="line">  source: vidUrl[<span class="number">0</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>popup.js</code>에서 위와 같은 메시지를 요청하면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.onMessage.addListener(<span class="function">(<span class="params">request</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.action === <span class="string">&quot;download&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.source.includes(<span class="string">&quot;dankook.commonscdn&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        chrome.downloads.download(&#123;</span><br><span class="line">          url: request.source,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        alert(<span class="string">`오류: <span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">&quot;다운받을 수 있는 강의컨텐츠가 아닙니다😭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>background.js</code>에서는 위와 같이 <code>download</code> 요청인지 검사 후 단국대에서 들어오는 요청인지 검사 후 다운로드를 시작한다. 다양한 경우가 있을 수 있으므로 에러 핸들링에 신경을 썼다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>일주일 중 하루는 내가 원하는 것을 하는 날로 살기로 했는데 5시간동안의 몰두 끝에 그럴듯하게 완성하니 하루를 잘 보낸 것 같다. (5시간 중 2시간은 구글링을 한 것 같다) 학교 사람들이 써준다면 정말 뿌듯할 것 같고, 안 쓰신다 해도 지인들이나 나는 유용하게 쓸 것 같다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LMSDownloader-제작기&quot;&gt;&lt;a href=&quot;#LMSDownloader-제작기&quot; class=&quot;headerlink&quot; title=&quot;LMSDownloader 제작기&quot;&gt;&lt;/a&gt;LMSDownloader 제작기&lt;/h2&gt;&lt;p&gt;우리 학교에서 새로</summary>
      
    
    
    
    <category term="Etc" scheme="https://zinirun.github.io/categories/Etc/"/>
    
    
    <category term="chrome" scheme="https://zinirun.github.io/tags/chrome/"/>
    
    <category term="project" scheme="https://zinirun.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 19 Webcam Fun</title>
    <link href="https://zinirun.github.io/2020/09/06/js-course30-19/"/>
    <id>https://zinirun.github.io/2020/09/06/js-course30-19/</id>
    <published>2020-09-06T05:54:21.000Z</published>
    <updated>2020-09-06T06:19:15.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-19-Webcam-Fun"><a href="#Day-19-Webcam-Fun" class="headerlink" title="Day 19 - Webcam Fun"></a>Day 19 - Webcam Fun</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/ElWFcBlVk-o" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 웹캠을 브라우저에서 사용한다. 프로그래머스에서 온라인 코딩테스트를 볼 때 크롬에서 실시간 웹캠 사용이 되는 것이 신기했는데, 아마 이런 방식을 사용한게 아닐까 싶다.</p><p>웹캠의 사용이 클라이언트만 있어서 되는게 아니고, 서버 관련 모듈을 설치하고 환경을 세팅해야 한다. 하지만 npm 환경을 사용해서 내장된 <code>package.json</code>만으로 <code>npm install</code>을 통해 모든 환경을 한번에 세팅할 수 있었다.</p><h2 id="비디오-가져오기"><a href="#비디오-가져오기" class="headerlink" title="비디오 가져오기"></a>비디오 가져오기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  navigator.mediaDevices</span><br><span class="line">    .getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">localMediaStream</span>) =&gt;</span> &#123;</span><br><span class="line">      video.srcObject = localMediaStream;</span><br><span class="line">      video.play();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`Oh NO!!`</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>캠의 비디오를 가져오는 방법은 <code>navigator.mediaDevices.getUserMedia()</code> 메소드를 사용하면 되므로 간편하다. 그 후 적절한 에러핸들링과 함께 미리 선언해놓은 <code>video</code> 돔 객체의 <code>src</code> 경로에 스트리밍되는 캠 데이터를 넣고 <code>play()</code> 시켜주면 된다.</p><blockquote><p>원래는 <code>video.src = window.URL.createObjectURL(localMediaStream)</code>을 사용했었는데 현재의 브라우저에서는 <code>video.srcObject=localMediaStream</code>으로 사용한다고 한다. 관련 Deprecated 정보는 <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL">Mozilla</a>에서 확인할 수 있다.</p></blockquote><h2 id="캔버스에-비디오-넣기"><a href="#캔버스에-비디오-넣기" class="headerlink" title="캔버스에 비디오 넣기"></a>캔버스에 비디오 넣기</h2><p>캔버스에 비디오를 넣는 이유는 R, G, B 픽셀 값을 조정하는 바(bar)로 비디오에 장난(?)을 치기 위해서인데 굳이 비디오에 효과를 안 줘도 되면 그냥 대충 보고 넘어갔다가 필요할 때 쓰면 될 것 같다. (내가 그렇다)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintToCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = video.videoWidth;</span><br><span class="line">  <span class="keyword">const</span> height = video.videoHeight;</span><br><span class="line">  canvas.width = width;</span><br><span class="line">  canvas.height = height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ctx.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드가 데이터의 픽셀에 대한 접근없이, 순수하게 비디오를 캔버스에 그려넣는 과정이다. 캠마다 너비와 높이가 다르므로 전체화면에서 적절하게 조정하기 위해, 비디오의 너비와 높이를 캔버스에 넣어준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintToCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = video.videoWidth;</span><br><span class="line">  <span class="keyword">const</span> height = video.videoHeight;</span><br><span class="line">  canvas.width = width;</span><br><span class="line">  canvas.height = height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ctx.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="comment">// take the pixels out</span></span><br><span class="line">    <span class="keyword">let</span> pixels = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="comment">// mess with them</span></span><br><span class="line">    pixels = redEffect(pixels);</span><br><span class="line"></span><br><span class="line">    pixels = rgbSplit(pixels);</span><br><span class="line">    ctx.globalAlpha = <span class="number">0.8</span>;</span><br><span class="line"></span><br><span class="line">    pixels = greenScreen(pixels);</span><br><span class="line">    <span class="comment">// put them back</span></span><br><span class="line">    ctx.putImageData(pixels, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드가 캔버스의 픽셀을 rgb를 조정하는 함수를 작성하여 다시 그려내는 과정이다. 픽셀을 조정하는 함수는 밑에서 설명하겠다. 이제 이 함수를 <code>video</code> 객체에 이벤트로 걸어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">video.addEventListener(<span class="string">&quot;canplay&quot;</span>, paintToCanvas);</span><br></pre></td></tr></table></figure><p><code>canplay</code> 라는 이벤트 속성이 있는지 몰랐다, 꽤 유용하게 사용할 것 같다.</p><h2 id="비디오-캡쳐하기"><a href="#비디오-캡쳐하기" class="headerlink" title="비디오 캡쳐하기"></a>비디오 캡쳐하기</h2><p>버튼을 누르면 비디오가 캡쳐되고, 미리보기 스냅샷이 화면 아래에 삽입된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takePhoto</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 찰칵 소리 내기</span></span><br><span class="line">  snap.currentTime = <span class="number">0</span>;</span><br><span class="line">  snap.play();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 캔버스의 데이터를 내보내기</span></span><br><span class="line">  <span class="keyword">const</span> data = canvas.toDataURL(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  link.href = data;</span><br><span class="line">  link.setAttribute(<span class="string">&quot;download&quot;</span>, <span class="string">&quot;handsome&quot;</span>);</span><br><span class="line">  link.innerHTML = <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;data&#125;</span>&quot; alt=&quot;Handsome Man&quot; /&gt;`</span>;</span><br><span class="line">  strip.insertBefore(link, strip.firstChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>버튼을 누른 후 화면 밑을 보면</p><p><img src="/images/2020-09-06-15-13-58.png"></p><p>이렇게 스냅샷이 보여지고 클릭하면 다운로드된다. <code>createElement</code>를 써도 되고 <code>innerHTML</code>을 <code>+=</code>로 늘여나가도 상관없을 것 같다.</p><h2 id="픽셀로-장난-치기"><a href="#픽셀로-장난-치기" class="headerlink" title="픽셀로 장난(?)치기"></a>픽셀로 장난(?)치기</h2><p>밑에서부터 나오는 코드들은 솔직히 제대로 보지는 않았다. 내가 이미지 처리에 관심도 없을 뿐더러 비디오 처리시에 필터 효과가 필요하다면 그때 검색해서 쓰면 되기 때문에 굳이 하나하나 파헤치지는 않았다.</p><p>그 전에, 한가지 괜찮다고 생각한 코드는</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.rgb input&quot;</span>).forEach(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">  levels[input.name] = input.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 코드인데, 난 range bar에 이벤트가 걸려있지 않은데 어떻게 값을 실시간으로 바꿀까 생각하다가 코드를 보니 이렇게 비디오가 플레이되고 있을 때 실행되는 함수 내에서 이렇게 값을 받아오고 있었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redEffect</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pixels.data.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">    pixels.data[i + <span class="number">0</span>] = pixels.data[i + <span class="number">0</span>] + <span class="number">200</span>; <span class="comment">// RED</span></span><br><span class="line">    pixels.data[i + <span class="number">1</span>] = pixels.data[i + <span class="number">1</span>] - <span class="number">50</span>; <span class="comment">// GREEN</span></span><br><span class="line">    pixels.data[i + <span class="number">2</span>] = pixels.data[i + <span class="number">2</span>] * <span class="number">0.5</span>; <span class="comment">// Blue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbSplit</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pixels.data.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">    pixels.data[i - <span class="number">150</span>] = pixels.data[i + <span class="number">0</span>]; <span class="comment">// RED</span></span><br><span class="line">    pixels.data[i + <span class="number">500</span>] = pixels.data[i + <span class="number">1</span>]; <span class="comment">// GREEN</span></span><br><span class="line">    pixels.data[i - <span class="number">550</span>] = pixels.data[i + <span class="number">2</span>]; <span class="comment">// Blue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greenScreen</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> levels = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.rgb input&quot;</span>).forEach(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    levels[input.name] = input.value;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pixels.data.length; i = i + <span class="number">4</span>) &#123;</span><br><span class="line">    red = pixels.data[i + <span class="number">0</span>];</span><br><span class="line">    green = pixels.data[i + <span class="number">1</span>];</span><br><span class="line">    blue = pixels.data[i + <span class="number">2</span>];</span><br><span class="line">    alpha = pixels.data[i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      red &gt;= levels.rmin &amp;&amp;</span><br><span class="line">      green &gt;= levels.gmin &amp;&amp;</span><br><span class="line">      blue &gt;= levels.bmin &amp;&amp;</span><br><span class="line">      red &lt;= levels.rmax &amp;&amp;</span><br><span class="line">      green &lt;= levels.gmax &amp;&amp;</span><br><span class="line">      blue &lt;= levels.bmax</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// take it out!</span></span><br><span class="line">      pixels.data[i + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-19-Webcam-Fun&quot;&gt;&lt;a href=&quot;#Day-19-Webcam-Fun&quot; class=&quot;headerlink&quot; title=&quot;Day 19 - Webcam Fun&quot;&gt;&lt;/a&gt;Day 19 - Webcam Fun&lt;/h2&gt;&lt;div clas</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>SQLD 38회 후기 (국가공인 SQL 개발자 자격증)</title>
    <link href="https://zinirun.github.io/2020/09/05/sqld-38-review/"/>
    <id>https://zinirun.github.io/2020/09/05/sqld-38-review/</id>
    <published>2020-09-05T07:07:22.000Z</published>
    <updated>2020-09-05T07:55:03.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-개발자-자격시험"><a href="#SQL-개발자-자격시험" class="headerlink" title="SQL 개발자 자격시험"></a>SQL 개발자 자격시험</h2><p>한국데이터산업진흥원에서 주관하는 국가공인 SQL 개발자 시험이다. 1년에 4번 실시되고, 커트라인은 100점 만점에 60점인데, 크게 파트 2개로 나뉜다.</p><ul><li>데이터 모델링의 이해 (10문항)</li><li>SQL 기본 및 활용 (40문항 - 주관식 8문항 포함)</li></ul><p>각 파트마다 40%을 넘겨야 합격 처리된다. 생각보다 10문항짜리 첫 파트에서 실수가 많아지면 안되기에 마냥 쉽다고는 할 수 없다.</p><p>나는 일주일에 1시간 정도를 할애해서 전반적으로 개념을 짚었고, 시험 직전 이틀을 5시간 정도를 문제 풀이와 개념 외우기에 집중했다. 그래서 순공시간은 17시간? 정도 될 것 같다. 기존 프로젝트를 하면서 SQL Query 사용은 많이 해봤고 데이터베이스 기초 전공 과목을 수강했기에 공부가 크게 어렵지는 않았다.</p><h2 id="38회-후기"><a href="#38회-후기" class="headerlink" title="38회 후기"></a>38회 후기</h2><p>오늘 본 SQLD는 38회인데, 학교가 경기도에 위치해 있어서 강변 근처에 밥도 먹으러 갈 김에 서울 성수중학교에서 시험을 봤다. 코로나의 여파 때문인지 좌석간의 거리도 넓고 날씨도 많이 풀려서 전반적으로 쾌적했다.</p><h3 id="인쇄-오류"><a href="#인쇄-오류" class="headerlink" title="인쇄 오류"></a>인쇄 오류</h3><p>이번 시험에는 큰 인쇄 오류가 있었다. 고사장의 절반 가까이 되는 시험지가 마지막 주관식 2문제(7, 8번)가 제대로 인쇄되어 있지 않아 엄청난 혼동을 일으켰는데, 결국 주관식 7번과 8번은 풀이하지 말라는 공지가 방송되었다. (배점은 어떻게 바뀔지 모르겠다. 4점을 그냥 줄지 없는 문제로 칠지는 나중에 알 것 같다.)</p><h3 id="파트별-후기"><a href="#파트별-후기" class="headerlink" title="파트별 후기"></a>파트별 후기</h3><p>문제를 풀기 시작하고 생각보다 첫번째 파트 <code>데이터 모델링의 이해</code>가 까다로웠다. 기본적인 개념을 묻는 퍼주기식 문제는 거의 없었고 엔터티간의 상관관계를 그림으로 주고 묻는 문제가 생각보다 많이 나왔다. 사실 그 부분을 완벽하게 공부하지 않아서 거의 감으로 풀었다. 엔터티를 분류하는 속성이 <code>키 속성</code>인지 <code>기본키 속성</code>인지 너무 헷갈렸고, <code>기본키 속성</code>으로 찍었다가 결국 틀린 것을 알게 되었다.</p><p>두번째 파트인 <code>SQL 기본 및 활용</code>은 SQL문을 주고 결과를 쓰거나, 결과를 주고 SQL문을 찾는 문제가 과반수였고, 간단해서 눈으로 바로 풀 수 있는 문제 절반, 생각을 좀 해야하는 문제 절반이었다. 퍼주는 개념 문제도 5개 정도는 있었던 것 같다. 문제와 보기에 말장난이 정말 많아서 잘 봐야한다.</p><h3 id="전반적인-느낌"><a href="#전반적인-느낌" class="headerlink" title="전반적인 느낌"></a>전반적인 느낌</h3><p>시험 시간은 10시부터 11시 30분이었는데 40분 정도에 모두 풀고, 붙잡고 있어봤자 답이 안나오는 걸 알아서 성수중학교 1등으로 나왔다. 50문제에 1시간 30분을 주므로 시간은 충분하다 못해 넘치는 것 같다. 하지만 비전공자가 보기엔 당연히 어려운 시험이고, 도전하기 위해서는 꽤 많은 노력이 필요할 것 같다.</p><p>보통 책을 사서 공부할텐데, 정말 책에 오타가 너무 많고 문제와 답이 다른 경우도 있고 개념 설명도 너무 부실해서 빨리 경쟁 업체에서 다른 책을 출시해야 할 것 같다. 거의 독점하다시피 책을 내는데 왜 이 모양으로 책을 내는지 모르겠다. 요즘 책에 오탈자를 찾으면 상품권을 주는데 아마 이 책에서 오탈자나 잘못된 정보로 상품권을 줬다면 냉장고 한 대는 뽑았을 것 같다.</p><p>그렇다고 전공자가 인강을 보는 일은 없었으면 좋겠다. 100점을 맞는다고 좋은 것도 아니고 60점만 넘기면 되므로 좀 짜증나는 책을 가지고도 60점 정도는 넘길 수 있다고 생각한다. SQLP는 모르겠는데, SQLD는 절대 인강까지 볼 만큼 까다로운 시험이 아니다.</p><blockquote><p>38회 시험의 결과는 10월 6일에 나온다. 이 글을 보신 분들 중 오늘 시험을 치르신 분들이 있다면 꼭 합격하시길 빕니다!</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL-개발자-자격시험&quot;&gt;&lt;a href=&quot;#SQL-개발자-자격시험&quot; class=&quot;headerlink&quot; title=&quot;SQL 개발자 자격시험&quot;&gt;&lt;/a&gt;SQL 개발자 자격시험&lt;/h2&gt;&lt;p&gt;한국데이터산업진흥원에서 주관하는 국가공인 SQL 개발자</summary>
      
    
    
    
    <category term="Etc" scheme="https://zinirun.github.io/categories/Etc/"/>
    
    
    <category term="sqld" scheme="https://zinirun.github.io/tags/sqld/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 18 Adding Up Times with Reduce</title>
    <link href="https://zinirun.github.io/2020/09/03/js-course30-18/"/>
    <id>https://zinirun.github.io/2020/09/03/js-course30-18/</id>
    <published>2020-09-02T15:19:16.000Z</published>
    <updated>2020-09-02T17:00:15.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-18-Adding-Up-Times-with-Reduce"><a href="#Day-18-Adding-Up-Times-with-Reduce" class="headerlink" title="Day 18 - Adding Up Times with Reduce"></a>Day 18 - Adding Up Times with Reduce</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/SadWPo2KZWg" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 map, reduce에 대한 방법만 알고 있다면 간단하게 해결할 수 있다.</p><h2 id="Full-Script"><a href="#Full-Script" class="headerlink" title="Full Script"></a>Full Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeNodes = [...document.querySelectorAll(<span class="string">&quot;[data-time]&quot;</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seconds = timeNodes</span><br><span class="line">  .map(<span class="function">(<span class="params">node</span>) =&gt;</span> node.dataset.time)</span><br><span class="line">  .map(<span class="function">(<span class="params">timeCode</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [mins, secs] = timeCode.split(<span class="string">&quot;:&quot;</span>).map(<span class="built_in">parseFloat</span>);</span><br><span class="line">    <span class="keyword">return</span> mins * <span class="number">60</span> + secs;</span><br><span class="line">  &#125;)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">total, eachSeconds</span>) =&gt;</span> total + eachSeconds);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> secondsLeft = seconds;</span><br><span class="line"><span class="keyword">const</span> hours = <span class="built_in">Math</span>.floor(secondsLeft / <span class="number">3600</span>);</span><br><span class="line">secondsLeft %= <span class="number">3600</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mins = <span class="built_in">Math</span>.floor(secondsLeft / <span class="number">60</span>);</span><br><span class="line">secondsLeft %= <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hours, mins, secondsLeft);</span><br></pre></td></tr></table></figure><p><code>querySelectorAll</code>로 가져온 데이터는 Node List의 형태이므로 spread 문법을 이용하여 풀어서 배열화시켜 저장한다. <code>Array.from()</code>을 사용해도 상관없다.</p><p>우선 시간에 대한 데이터는 각각 <code>&lt;li data-time=&quot;4:04&quot;&gt;Video 58&lt;/li&gt;</code> 형식의 태그 안에 dataset으로 들어있는데, 이를 <code>map</code>으로 시간을 추출하기 위해 먼저 매핑한다.</p><p>그 후 시간의 형식이 <code>mm:ss</code> 형식이므로 <code>:</code>를 기준으로 <code>split()</code>을 사용하여 나눈 후 <code>parseFloat</code>을 이용하여 실수형 형변환을 시킨다.</p><p>그 값을 <code>reduce</code>를 사용하여 더해주면 되는데, 첫번째 인자인 <code>total</code>은 총 누적 값이고, 두번째 인자인 <code>eachSeconds</code>는 누적 값이다.</p><p>두번의 매핑 후 한번의 리듀스를 거치면 결국 초 단위로 바꾼 총 누적 값이 되고, 이 값을 시간, 분, 초로 잘라서 콘솔에 출력하면 된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-18-Adding-Up-Times-with-Reduce&quot;&gt;&lt;a href=&quot;#Day-18-Adding-Up-Times-with-Reduce&quot; class=&quot;headerlink&quot; title=&quot;Day 18 - Adding Up Times</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search - 정렬된 배열에서 수의 개수 구하기 (이분탐색)</title>
    <link href="https://zinirun.github.io/2020/09/02/ps-binarysearch-get-count-of-sorted-array/"/>
    <id>https://zinirun.github.io/2020/09/02/ps-binarysearch-get-count-of-sorted-array/</id>
    <published>2020-09-01T16:22:37.000Z</published>
    <updated>2020-09-01T16:35:36.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>정렬된 숫자의 배열에서 특정 수의 개수를 구한다.<br>시간복잡도가 <code>O(logN)</code> 이하여야 시간초과 판정을 받지 않는다.<br>수가 배열에 존재하지 않는 경우 <code>-1</code>을 출력한다.</p><p>입력<br><code>n</code>: 배열의 길이(1~1000000), <code>x</code>: 찾을 수</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line">n,x=map(int,input().split())</span><br><span class="line">num = sorted(list(map(int, input().split())))</span><br><span class="line">count=bisect.bisect_right(num,x)-bisect.bisect_left(num,x)</span><br><span class="line"><span class="keyword">if</span> count&lt;<span class="number">0</span>: print(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>: print(count)</span><br></pre></td></tr></table></figure><p>특정 수의 개수는 <code>count()</code> 메소드로 찾을 수 있지만, 정렬된 배열의 조건, 배열의 길이를 봐서 일반적인 loop로 완전탐색으로 돌다가는 당연히 시간초과가 날 것을 알고 <strong>이분 탐색</strong>이라는 포인트를 잡을 수 있어야 한다.</p><p><code>bisect</code> 라이브러리에서 <code>bisect_right()</code> 메소드와 <code>bisect_left()</code> 메소드를 사용하면 첫번째 인자의 배열에 두번째 요소를 집어넣을 때 각각 오른쪽에서 넣을 경우, 왼쪽에서 넣을 경우에서 몇 번째 인덱스에 넣어야 하는지를 반환한다.</p><p>예를 들어, 배열이 <code>1 1 2 2 2 2 3</code>으로 구성되었다고 가정해보자.<br>2의 개수를 찾는 경우 2를 오른쪽부터 넣을 때의 인덱스는 6이고, 왼쪽부터 넣을 때의 인덱스는 2이다. 이 두 값을 빼면 바로 개수가 된다. 2가 없을 경우 두 값이 모두 같을 것이고, 자연스레 count는 0이 된다.</p><blockquote><p>이분탐색 방식으로 코드를 직접 구현해도 되지만 외부 라이브러리 제한조건이 없는 경우 번거로운 수고를 덜수도 있다. 하지만 라이브러리는 기초를 알고 쓰자.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;정렬된 숫자의 배열에서 특정 수의 개수를 구한다.&lt;br&gt;시간복잡도가 &lt;code&gt;O(logN)&lt;/code&gt; 이하여야 시간초과 판정을 받지 않는다.&lt;br&gt;수가 배열에 존재하지 않는 경우 &lt;code&gt;-1&lt;/code&gt;을 출력한다.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 17 Sort Without Articles</title>
    <link href="https://zinirun.github.io/2020/09/01/js-course30-17/"/>
    <id>https://zinirun.github.io/2020/09/01/js-course30-17/</id>
    <published>2020-09-01T06:51:24.000Z</published>
    <updated>2020-09-01T07:13:43.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-17-Sort-Without-Articles"><a href="#Day-17-Sort-Without-Articles" class="headerlink" title="Day 17 - Sort Without Articles"></a>Day 17 - Sort Without Articles</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/PEEo-2mRQ7A" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 문자열로 구성된 배열을 정렬하는 과제이다. 문제는 그냥 정렬이 아니라 앞에 관사를 제외하고 정렬하여 <code>&lt;li&gt;</code> 객체를 넣어주어야 한다.</p><h2 id="strip-함수-만들기"><a href="#strip-함수-만들기" class="headerlink" title="strip() 함수 만들기"></a>strip() 함수 만들기</h2><p><code>strip()</code> 메소드는 자바스크립트에서 지원하는 기능이 아니다. 직접 정의하는 이 함수는 regex를 사용하여 관사 <code>a</code> <code>an</code> <code>the</code>를 제거하고, 문자열에 사용할 수 있는 기본 메소드인 <code>trim()</code>을 사용하여 앞, 뒤 공백을 제거한 후 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">band</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//regex - ^:starts with, i:insensitive(full matched)</span></span><br><span class="line">  <span class="keyword">return</span> band.replace(<span class="regexp">/^(a |the |an )/i</span>, <span class="string">&quot;&quot;</span>).trim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 이 함수로 <code>bands</code> 배열을 정렬한 새로운 <code>sortedBands</code> 배열을 만들 것이다.</p><h2 id="sort-사용하기"><a href="#sort-사용하기" class="headerlink" title="sort() 사용하기"></a>sort() 사용하기</h2><p>기본 내장된 <code>sort()</code> 메소드를 사용한다. 위에서 작성한 <code>strip()</code> 메소드에 정렬할 인자를 각각 넣어서 정렬한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedBands = bands.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (strip(a) &gt; strip(b) ? <span class="number">1</span> : <span class="number">-1</span>));</span><br></pre></td></tr></table></figure><h2 id="map-join-사용하기"><a href="#map-join-사용하기" class="headerlink" title="map, join 사용하기"></a>map, join 사용하기</h2><p>이제 적절한 위치에 정렬한 <code>sortedBand</code> 요소를 각각 <code>&lt;li&gt;</code> 객체로 매핑하여 <code>innerHTML</code>에 넣어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bandsList.innerHTML = sortedBands.map(<span class="function">(<span class="params">band</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;band&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>join(&#39;&#39;)</code>을 마지막에 사용하지 않으면 <code>,</code>가 들어간 이상한 리스트가 출력될 것이다. <code>innerHTML</code>에 태그들을 매핑하여 넣을 때는 외우다싶이 마지막에 <code>join()</code> 메소드를 사용하자.</p><h2 id="Full-Script"><a href="#Full-Script" class="headerlink" title="Full Script"></a>Full Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bands = [</span><br><span class="line">  <span class="string">&quot;The Plot in You&quot;</span>,</span><br><span class="line">  <span class="string">&quot;The Devil Wears Prada&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Pierce the Veil&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Norma Jean&quot;</span>,</span><br><span class="line">  <span class="string">&quot;The Bled&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Say Anything&quot;</span>,</span><br><span class="line">  <span class="string">&quot;The Midway State&quot;</span>,</span><br><span class="line">  <span class="string">&quot;We Came as Romans&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Counterparts&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Oh, Sleeper&quot;</span>,</span><br><span class="line">  <span class="string">&quot;A Skylit Drive&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Anywhere But Here&quot;</span>,</span><br><span class="line">  <span class="string">&quot;An Old Dog&quot;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">bandsList = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#bands&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">band</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//regex - ^:starts with, i:insensitive(full matched)</span></span><br><span class="line">  <span class="keyword">return</span> band.replace(<span class="regexp">/^(a |the |an )/i</span>, <span class="string">&quot;&quot;</span>).trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortedBands = bands.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (strip(a) &gt; strip(b) ? <span class="number">1</span> : <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">bandsList.innerHTML = sortedBands.map(<span class="function">(<span class="params">band</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;band&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>regex 사용은 여전히 어려운 것 같다. 외우려고 하기 보다는 필요할 때 찾아서 쓰고, 기본적인 틀 정도만 상기시켜야겠다. 이제 13개밖에 남지 않았다!</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-17-Sort-Without-Articles&quot;&gt;&lt;a href=&quot;#Day-17-Sort-Without-Articles&quot; class=&quot;headerlink&quot; title=&quot;Day 17 - Sort Without Articles&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 제대로 쓰기 - Code This, NOT That!</title>
    <link href="https://zinirun.github.io/2020/09/01/js-way-to-better-code/"/>
    <id>https://zinirun.github.io/2020/09/01/js-way-to-better-code/</id>
    <published>2020-09-01T05:23:20.000Z</published>
    <updated>2020-09-01T06:15:04.403Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="https://www.youtube.com/embed/Mus_vwhTCq0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>본 글은 유튜브를 보다가 우연히 찾은 Javascript Pro Tips - Code This, NOT That 영상인데, 자바스크립트 ES6에서 지향하는 클린 코드를 잘 정리해주셔서 리마인드할 겸 다시 정리한다.</p><h2 id="console-log-console-table"><a href="#console-log-console-table" class="headerlink" title="console.log, console.table"></a>console.log, console.table</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123; <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">nervous</span>: <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> bar = &#123; <span class="attr">name</span>: <span class="string">&quot;dick&quot;</span>, <span class="attr">age</span>: <span class="number">40</span>, <span class="attr">nervous</span>: <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> baz = &#123; <span class="attr">name</span>: <span class="string">&quot;harry&quot;</span>, <span class="attr">age</span>: <span class="number">50</span>, <span class="attr">nervous</span>: <span class="literal">true</span> &#125;;</span><br></pre></td></tr></table></figure><p>위의 3가지 객체들을 콘솔에 나타낼 때 <code>console.log(foo); console.log(bar) ...</code>처럼 작성하면 쓸데없는 코드가 늘어나게 되고, 한 눈에 봐도 비효율적으로 보인다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123; foo, bar, baz &#125;);</span><br></pre></td></tr></table></figure><p>이렇게 한번에 나타낼 수 있다. <code>&#123;&#125;</code> 표현은 정말 많이 쓰인다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table([foo, bar, baz]);</span><br></pre></td></tr></table></figure><p><code>console.table</code>에 배열 객체로 넘겨주면 정리된 표 형식으로 볼 수도 있다.</p><h2 id="console-time"><a href="#console-time" class="headerlink" title="console.time"></a>console.time</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;looper&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">1000000</span>) &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&quot;looper&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>console.time</code>부터 <code>console.timeEnd</code>까지의 시간을 측정하여 출력해준다. 함수의 인자로 들어가는 이름이 일치해야 그룹으로 묶인다.</p><h2 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace"></a>console.trace</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deleteMe = <span class="function">() =&gt;</span> <span class="built_in">console</span>.trace(<span class="string">&quot;bye bye database&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>console.trace</code>를 사용하면 함수가 호출될 때의 stack trace를 확인할 수 있다.</p><h2 id="destructuring"><a href="#destructuring" class="headerlink" title="destructuring"></a>destructuring</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> turtle = &#123;</span><br><span class="line">  name: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">  legs: <span class="number">4</span>,</span><br><span class="line">  shell: <span class="literal">true</span>,</span><br><span class="line">  type: <span class="string">&quot;amphibious&quot;</span>,</span><br><span class="line">  meal: <span class="number">10</span>,</span><br><span class="line">  diet: <span class="string">&quot;berries&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 turtle 객체를 함수의 인자로 넘겨서 객체 안의 값에 접근해보자. <code>feed</code>라는 함수를 예로 들면,</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;animal.name&#125;</span> <span class="subst">$&#123;animal.meal&#125;</span> kilos of <span class="subst">$&#123;animal.diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이는 명백히 비효율적이고 잘못된 코드이다. 클린 코딩의 방법은 2가지인데,</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">&#123; name, meal, diet &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;meal&#125;</span> kilos of <span class="subst">$&#123;diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 인자 자체를 객체를 풀어주는 방법이 있고,</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, meal, diet &#125; = animal;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;meal&#125;</span> kilos of <span class="subst">$&#123;diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 함수 내에서 별도로 객체를 풀어주는 방법이 있다.</p><h2 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> horse = &#123;</span><br><span class="line">  name: <span class="string">&quot;Topher&quot;</span>,</span><br><span class="line">  size: <span class="string">&quot;large&quot;</span>,</span><br><span class="line">  skills: [<span class="string">&quot;jousting&quot;</span>, <span class="string">&quot;racing&quot;</span>],</span><br><span class="line">  age: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위 객체의 값을 활용해서 새로운 값을 선언해보자.</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bio =</span><br><span class="line">  horse.name +</span><br><span class="line">  <span class="string">&quot; is a &quot;</span> +</span><br><span class="line">  horse.size +</span><br><span class="line">  <span class="string">&quot; horse skilled in &quot;</span> +</span><br><span class="line">  horse.skills.join(<span class="string">&quot; &amp; &quot;</span>);</span><br></pre></td></tr></table></figure><p>backticks을 이용하면 위처럼 <code>+</code>를 사용하여 하나하나 붙여줄 필요가 없다.</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, size, skills &#125; = horse;</span><br><span class="line"><span class="keyword">let</span> bio = <span class="string">`<span class="subst">$&#123;name&#125;</span> is a <span class="subst">$&#123;size&#125;</span> skilled in <span class="subst">$&#123;skills.join(<span class="string">&quot; &amp; &quot;</span>)&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>위에서 언급한 destructuring으로 horse 객체를 풀어주고 backticks를 사용하면 정말 간단하고 가독성도 좋게 변수를 선언할 수 있다.</p><h2 id="Spread-Syntax"><a href="#Spread-Syntax" class="headerlink" title="Spread Syntax"></a>Spread Syntax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pikachu = &#123; <span class="attr">name</span>: <span class="string">&quot;Pikachu&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> stats = &#123; <span class="attr">hp</span>: <span class="number">40</span>, <span class="attr">attack</span>: <span class="number">60</span>, <span class="attr">defense</span>: <span class="number">45</span> &#125;;</span><br></pre></td></tr></table></figure><p>위의 두 객체를 하나로 합치고 싶다면 어떻게 해야할까.</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pikachu[<span class="string">&quot;hp&quot;</span>] = stats.hp;</span><br><span class="line">pikachu[<span class="string">&quot;attack&quot;</span>] = stats.attack;</span><br><span class="line">pikachu[<span class="string">&quot;defense&quot;</span>] = stats.defense;</span><br></pre></td></tr></table></figure><p>위처럼 하나하나 할당하거나, <code>push</code>를 사용해서 하나하나 넣어준다면 stat 객체에 100가지 요소가 들어있다면 말도 안되는 코드가 되어버릴 것이다.</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lvl0 = &#123; ...pikachu, ...stats &#125;;</span><br></pre></td></tr></table></figure><p>Spread 방식을 사용하면 위처럼 간단하게 합친 새로운 객체를 만들어낼 수 있다.</p><h2 id="loops"><a href="#loops" class="headerlink" title="loops"></a>loops</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> orders = [<span class="number">500</span>, <span class="number">30</span>, <span class="number">99</span>, <span class="number">15</span>, <span class="number">133</span>];</span><br></pre></td></tr></table></figure><p><code>orders</code> 배열을 loop 방식으로 계산해야 할때</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> withTax = [];</span><br><span class="line"><span class="keyword">const</span> highValue = [];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; orders.length; i++) &#123;</span><br><span class="line">  <span class="comment">//reduce</span></span><br><span class="line">  total += orders[i];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//map</span></span><br><span class="line">  withTax.push(orders[i] * <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//filter</span></span><br><span class="line">  <span class="keyword">if</span> (orders[i] &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    highValue.push(orders[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전통적인 <code>for loop</code> 방식으로 코드를 작성하는 방법도 있지만, 자바스크립트에서는 기본적으로 reduce, map, filter 메소드를 지원한다.</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> total = orders.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur);</span><br><span class="line"><span class="keyword">const</span> withTax = orders.map(<span class="function">(<span class="params">v</span>) =&gt;</span> v * <span class="number">1.1</span>);</span><br><span class="line"><span class="keyword">const</span> highValue = orders.filter(<span class="function">(<span class="params">v</span>) =&gt;</span> v &gt; <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> random = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>랜덤 숫자를 콜백 형식으로 지정된 순서로 생성하여 더하는 함수를 만들 때</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sumRandomAsyncNums = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> first;</span><br><span class="line">  <span class="keyword">let</span> second;</span><br><span class="line">  <span class="keyword">let</span> third;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> random()</span><br><span class="line">    .then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      first = v;</span><br><span class="line">      <span class="keyword">return</span> random();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      second = v;</span><br><span class="line">      <span class="keyword">return</span> random();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      third = v;</span><br><span class="line">      <span class="keyword">return</span> first + second + third;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>.then</code>을 체인처럼 엮어서 작성하는 경우가 많다.</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sumRandomAsyncNums = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> first = <span class="keyword">await</span> random();</span><br><span class="line">  <span class="keyword">const</span> second = <span class="keyword">await</span> random();</span><br><span class="line">  <span class="keyword">const</span> third = <span class="keyword">await</span> random();</span><br><span class="line">  <span class="keyword">return</span> first + second + third;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>async</code>와 <code>await</code>을 적절히 활용하면 순서를 보장하는 코드를 간단하게 작성할 수 있다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>ES6 문법으로 정말 혁신적으로 코드의 길이를 줄이고 효율적인 코드를 작성하는 방법이 많다. 영상에 있는 내용도 일부에 불과하다. 나도 <code>push</code>를 사용해서 값을 집어넣거나 <code>.then</code>을 칭칭 엮어서 코드를 짠 기억이 있다. 지금부터라도 ES6 문법에 맞게 클린 코딩을 지향해야겠다.</p><blockquote><p>ES6 문법에 관한 <a href="https://github.com/lukehoban/es6features">총 정리</a>를 해놓은 고마운 분이 계시니 차근차근 읽어보면 좋을 것 같다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/Mus_vwhTCq0&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; allowfullscreen&gt;&lt;/iframe</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Netlify Custom Domain 설정하기 (with Namecheap)</title>
    <link href="https://zinirun.github.io/2020/08/31/netlify-custom-domain/"/>
    <id>https://zinirun.github.io/2020/08/31/netlify-custom-domain/</id>
    <published>2020-08-31T06:48:27.000Z</published>
    <updated>2020-08-31T07:17:20.397Z</updated>
    
    <content type="html"><![CDATA[<p>어제 내 프로필 사이트를 하나 만들었다. Github Pages를 사용해서 배포했는데 아무리 봐도 주소 <code>zinirun.github.io/zini-profile</code>은 너무나도 길었고 <code>zinirun.github.io</code>는 현재 블로그의 레파지토리로 쓰고 있어서 프로젝트 페이지를 커스텀 도메인으로 설정할 수 있나 찾아봤는데 내가 못 찾는건지, 방법이 없었다.</p><p>그래서 네트리파이로 배포하고 커스텀 도메인을 설정했다.</p><h3 id="Netlify-설정"><a href="#Netlify-설정" class="headerlink" title="Netlify 설정"></a>Netlify 설정</h3><p><img src="/images/2020-08-31-15-52-11.png"></p><p>네트리파이에 배포한 본인의 앱 설정에는 <strong>Domain management</strong>가 있다. 들어가면</p><p><img src="/images/2020-08-31-15-53-16.png"></p><p>이렇게 <strong>Custom Domains</strong>를 설정하는 영역이 있는데 소유한 주소를 입력한다.</p><h3 id="Domain-Nameserver-설정"><a href="#Domain-Nameserver-설정" class="headerlink" title="Domain Nameserver 설정"></a>Domain Nameserver 설정</h3><p>그러면 1단계를 넘어가고 2단계에서 Name Server를 등록하라고 한다. 나는 <a href="https://namecheap.com/">Namecheap</a> 주소를 대여받고 있어서 도메인 설정에 들어갔는데, 다른 주소 대여 서비스도 Custom DNS를 지원할 것이니 잘 찾아보면 Name Server 설정하는 영역이 있을 것이다.</p><p><img src="/images/2020-08-31-15-56-07.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dns1.p05.nsone.net</span><br><span class="line">dns2.p05.nsone.net</span><br><span class="line">dns3.p05.nsone.net</span><br><span class="line">dns4.p05.nsone.net</span><br></pre></td></tr></table></figure><p>이 4개를 모두 등록해주면 된다. 하지만 본인의 도메인에 DNS가 정상적으로 등록되려면 하루정도의 시간이 걸린다. DNS를 정상적으로 등록했다면 네트리파이에서 검증 단계를 모두 마친 후 커스텀 도메인을 사용할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;어제 내 프로필 사이트를 하나 만들었다. Github Pages를 사용해서 배포했는데 아무리 봐도 주소 &lt;code&gt;zinirun.github.io/zini-profile&lt;/code&gt;은 너무나도 길었고 &lt;code&gt;zinirun.github.io&lt;/</summary>
      
    
    
    
    <category term="Etc" scheme="https://zinirun.github.io/categories/Etc/"/>
    
    
    <category term="netlify" scheme="https://zinirun.github.io/tags/netlify/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 16 Mouse Move Shadow</title>
    <link href="https://zinirun.github.io/2020/08/31/js-course30-16/"/>
    <id>https://zinirun.github.io/2020/08/31/js-course30-16/</id>
    <published>2020-08-31T05:37:43.000Z</published>
    <updated>2020-08-31T06:25:10.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-16-Mouse-Move-Shadow"><a href="#Day-16-Mouse-Move-Shadow" class="headerlink" title="Day 16 - Mouse Move Shadow"></a>Day 16 - Mouse Move Shadow</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/zaz9gLI-Xac" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="html,result" data-user="zinirun" data-slug-hash="abNyzbQ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Day16-MouseMove">  <span>See the Pen <a href="https://codepen.io/zinirun/pen/abNyzbQ">  Day16-MouseMove</a> by Jeon Jin Heo (<a href="https://codepen.io/zinirun">@zinirun</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p><code>mousemove</code> 이벤트에 <code>textshadow</code> css 속성을 조절하는 과제이다.<br>사실 <code>offsetX</code>, <code>offsetY</code> 등의 좌표값에 대한 계산 말고는 특별한 것은 없는 것 같고, 나는 크게 <code>contenteditable</code> 속성과 <code>&#123;&#125;</code> 선언법을 알았다.</p><h2 id="contenteditable-속성"><a href="#contenteditable-속성" class="headerlink" title="contenteditable 속성"></a>contenteditable 속성</h2><p>html 태그에 <code>contenteditable</code>을 속성을 <code>true</code>로 설정하면 <code>input</code> 태그처럼 수정할 수 있다. 원래는 <code>&lt;h1 contenteditable=&quot;true&quot;&gt;</code> 처럼 속성을 줘야 하지만 <code>true</code>는 명시하지 않고 속성명만 적어도 된다. <code>h</code> 태그처럼 텍스트 태그에만 한정되있는게 아니고 <code>div</code> 등에도 걸 수 있다.</p><p>당연히 새로고침하면 원래의 값으로 돌아가니 <a href="https://notion.so/">Notion</a>처럼 값을 지속적으로 유지하고 싶다면 Database를 쓰거나 LocalStorage를 쓰거나 해야한다.</p><h2 id="로-한꺼번에-선언하기"><a href="#로-한꺼번에-선언하기" class="headerlink" title="{}로 한꺼번에 선언하기"></a><code>&#123;&#125;</code>로 한꺼번에 선언하기</h2><p><code>hero</code> 객체에는 <code>offsetWidth</code>, <code>offsetHeight</code> 값이 있는데, 이를 <code>width</code>, <code>height</code>라는 변수로 선언하고 싶다면 일반적으로</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> width = hero.offsetWidth;</span><br><span class="line"><span class="keyword">const</span> height = hero.offsetHeight;</span><br></pre></td></tr></table></figure><p>이렇게 많이 할 것이다. ES6 문법을 사용하면</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">offsetWidth</span>: width, <span class="attr">offsetHeight</span>: height &#125; = hero;</span><br></pre></td></tr></table></figure><p>가독성과 코드 낭비를 한번에 해결할 수 있다.</p><h2 id="css-textshadow"><a href="#css-textshadow" class="headerlink" title="css - textshadow"></a>css - textshadow</h2><p>사실 css 속성은 필요할 때 검색해서 그대로 쓰거나 변형하면 되기에 정말 자주쓰는 속성이 아니면 깊게 들어가지는 않는 편이다.</p><p>아무튼 text-shadow 속성의 문법은</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: offset-x offset-y blur-radius color | none | initial | inherit</span><br></pre></td></tr></table></figure><p>이렇게 사용한다.</p><ul><li>offset-x: 그림자의 수평 거리</li><li>offset-y: 그림자의 수직 거리</li><li>blur-radius: 흐림 정도(기본 0)</li><li>color: 색상 (기본 브라우저 기본값)</li><li>none: 그림자 효과 없애기</li><li>initial: 기본값으로</li><li>inherit: 부모의 속성값 상속</li></ul><p>여기서 필수적인 항목은 <code>offset-x</code>와 <code>offset-y</code>이다. 절대 안 외워도 된다. 구글에는 CSS로 만들어진 갖가지 속성들이 엄청나게 많으니 마음에 드는 걸 가져다 쓰면 된다.</p><p>이제 이것들을 활용해서 원래의 과제인 <code>shadow</code> 함수를 작성하자.</p><h2 id="Full-Script"><a href="#Full-Script" class="headerlink" title="Full Script"></a>Full Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hero = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.hero&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> text = hero.querySelector(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> walk = <span class="number">100</span>; <span class="comment">//100px</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shadow</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// const width = hero.offsetWidth;</span></span><br><span class="line">  <span class="comment">// const height = hero.offsetHeight;</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">offsetWidth</span>: width, <span class="attr">offsetHeight</span>: height &#125; = hero;</span><br><span class="line">  <span class="keyword">let</span> &#123; <span class="attr">offsetX</span>: x, <span class="attr">offsetY</span>: y &#125; = e;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span> !== e.target) &#123;</span><br><span class="line">    x = x + e.target.offsetLeft;</span><br><span class="line">    y = y + e.target.offsetTop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> xWalk = <span class="built_in">Math</span>.round((x / width) * walk - walk / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> yWalk = <span class="built_in">Math</span>.round((y / height) * walk - walk / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//use back ticks</span></span><br><span class="line">  text.style.textShadow = <span class="string">`</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;xWalk&#125;</span>px <span class="subst">$&#123;yWalk&#125;</span>px 0 rgba(255,0,255,0.7),</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;xWalk * <span class="number">-1</span>&#125;</span>px <span class="subst">$&#123;yWalk&#125;</span>px 0 rgba(0,255,255,0.7),</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;yWalk&#125;</span>px <span class="subst">$&#123;xWalk * <span class="number">-1</span>&#125;</span>px 0 rgba(0,255,0,0.7),</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;yWalk * <span class="number">-1</span>&#125;</span>px <span class="subst">$&#123;xWalk&#125;</span>px 0 rgba(0,0,255,0.7)</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">&#125;</span><br><span class="line">hero.addEventListener(<span class="string">&quot;mousemove&quot;</span>, shadow);</span><br></pre></td></tr></table></figure><p>shadow의 픽셀 값을 계산해서 back tick을 사용해서 넣어주는 것 말고는 지금까지 이벤트를 넣은 방법과 동일하다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-16-Mouse-Move-Shadow&quot;&gt;&lt;a href=&quot;#Day-16-Mouse-Move-Shadow&quot; class=&quot;headerlink&quot; title=&quot;Day 16 - Mouse Move Shadow&quot;&gt;&lt;/a&gt;Day 16 - Mou</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Binary Search (이진탐색)</title>
    <link href="https://zinirun.github.io/2020/08/30/ps-summary-binary-search/"/>
    <id>https://zinirun.github.io/2020/08/30/ps-summary-binary-search/</id>
    <published>2020-08-29T15:00:51.000Z</published>
    <updated>2020-08-29T16:36:41.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="천만개-일억개를-탐색해야-할-때"><a href="#천만개-일억개를-탐색해야-할-때" class="headerlink" title="천만개, 일억개를 탐색해야 할 때"></a>천만개, 일억개를 탐색해야 할 때</h2><p>천만개가 넘는 리스트에서 특정 값을 찾아야 할 때, 각자가 구현하는 코드는 다양할 것인데, 효율적인 탐색 방법 중 하나가 바로 <strong>이진탐색</strong>이다. 말로만 들으면 어려울 것 같지만 업-다운 게임을 생각하면 쉽다.</p><p>1~60개의 정수 중 하나 40을 맞추려고 할 때</p><ul><li>30? Up!</li><li>45? Down!</li><li>38(37.5를 반올림)? Up!</li><li>42(41.5를 반올림)? Down!</li><li>40? Yes!</li></ul><p>이렇게 절반으로 쪼개가며 큰 지, 작은 지를 판단하고 또 절반으로 나누고를 반복하다가 찾는 수가 나올 때 탐색을 종료하는 것이 이진탐색이다. <strong>중요한 것은 리스트들은 정렬된 상태여야 한다는 것이다.</strong> 큰 지, 작은 지를 판단하는데 리스트가 뒤죽박죽이라면 아무런 의미가 없다.</p><h2 id="구현하는-방법"><a href="#구현하는-방법" class="headerlink" title="구현하는 방법"></a>구현하는 방법</h2><p>이진탐색을 구현하는 방법은 일반적으로 2가지인데, 재귀 함수로 작성하는 방법과 반복문으로 작성하는 방법이 있다. 하지만 파이썬에서는 재귀함수의 최대 재귀 횟수가 정해져 있으므로 반복문을 이용한 이진탐색을 선호하는 편이다. (물론 최대 재귀 횟수를 조정할 수 있다)</p><h3 id="재귀를-이용한-방법"><a href="#재귀를-이용한-방법" class="headerlink" title="재귀를 이용한 방법"></a>재귀를 이용한 방법</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bisearch</span>(<span class="params">array,target,start,end</span>):</span></span><br><span class="line">    <span class="keyword">if</span> start&gt;end: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    mid = (start+end)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> array[mid]==target: <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">elif</span> array[mid]&gt;target: <span class="keyword">return</span> bisearch(array,target,start,mid<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> bisearch(array,target,mid+<span class="number">1</span>,end)</span><br></pre></td></tr></table></figure><p>사실상 위에서 말한 업다운의 예시를 그대로 코드에 옮긴 것과 같다. <code>start</code>와 <code>end</code>를 더한 절반인 <code>mid</code>를 기준으로 큰 지, 작은 지, 일치하는 지를 판단하여 다시 기준을 잡고 함수를 재귀한다.</p><h3 id="반복문을-이용한-방법"><a href="#반복문을-이용한-방법" class="headerlink" title="반복문을 이용한 방법"></a>반복문을 이용한 방법</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bisearch</span>(<span class="params">array,target,start,end</span>):</span></span><br><span class="line">    <span class="keyword">while</span> start&lt;=end:</span><br><span class="line">        mid=(start+end)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> array[mid]==target: <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> array[mid]&gt;target: end=mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>: start=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p><code>while</code>문을 사용하여 이진탐색을 하는 방법인데, 로직은 당연히 재귀함수를 사용할 때와 같다.</p><p>이제 구현한 이진탐색 코드로 숫자를 탐색해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n, target = list(map(int,input().split()))</span><br><span class="line">array = list(map(int, input().split()))</span><br><span class="line">result = bisearch(array,target,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">print(result <span class="keyword">if</span> result <span class="keyword">else</span> <span class="string">&#x27;원소가 존재하지 않음&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/2020-08-30-00-29-15.png"></p><p>이렇게 작성한 코드는 주어진 리스트 원소의 수 <code>n</code>, 찾는 대상 <code>target</code>, 정렬된 리스트 <code>array</code>로 이진 탐색을 시행한 후 대상이 있을 때만 결과를 반환한다.</p><p>예시에서는 숫자의 개수가 10개이기 때문에 그냥 for loop를 돌면서 순차 탐색을 하는 것이 때로는 빠를 수도 있다. 그러나 1부터 10000000까지의 숫자 리스트에서 9999999라는 숫자를 찾는다면 효율은 비교할 수 없이 이진탐색이 빠르다.</p><blockquote><p>순차탐색의 시간복잡도는 <code>O(N)</code>이고, 이진탐색의 시간복잡도는 <code>O(logN)</code>이다.</p></blockquote><h2 id="파이썬에서는-bisect가-있다"><a href="#파이썬에서는-bisect가-있다" class="headerlink" title="파이썬에서는 bisect가 있다"></a>파이썬에서는 bisect가 있다</h2><p>특정 라이브러리를 사용하지 말라는 조건이 없다면 파이썬에는 <code>bisect</code>라는 라이브러리가 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(bisect.bisect(arr, <span class="number">2</span>)) <span class="comment"># 결과: 1</span></span><br></pre></td></tr></table></figure><p>여기서 <code>bisect()</code> 메소드는 <code>bisect_right()</code>와 같은데, <code>2</code>라는 숫자를 넣을 때 인덱스가 몇이어야 하는지 반환한다. 이 방법을 이용하면 어느 자리에 넣을지, 이 숫자가 어디에 있는 지도 찾을 수 있다.</p><p><code>bisect</code> 라이브러리에 대한 자세한 설명은 <a href="https://lioliolio.github.io/python-bisect-module/">KIM TAEWOO님</a>의 블로그에 잘 설명되어 있다.</p><blockquote><p>라이브러리를 쓰는 것은 얼마든지 좋지만 적어도 어떻게 돌아가는 지는 알고 써야한다고 생각한다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;천만개-일억개를-탐색해야-할-때&quot;&gt;&lt;a href=&quot;#천만개-일억개를-탐색해야-할-때&quot; class=&quot;headerlink&quot; title=&quot;천만개, 일억개를 탐색해야 할 때&quot;&gt;&lt;/a&gt;천만개, 일억개를 탐색해야 할 때&lt;/h2&gt;&lt;p&gt;천만개가 넘는 </summary>
      
    
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/tags/algorithm/"/>
    
    <category term="ps" scheme="https://zinirun.github.io/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 15 LocalStorage</title>
    <link href="https://zinirun.github.io/2020/08/29/js-course30-15/"/>
    <id>https://zinirun.github.io/2020/08/29/js-course30-15/</id>
    <published>2020-08-29T05:17:26.000Z</published>
    <updated>2020-08-29T05:46:46.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-15-LocalStorage-Contains-emphasized-items"><a href="#Day-15-LocalStorage-Contains-emphasized-items" class="headerlink" title="Day 15 - LocalStorage, Contains emphasized items"></a>Day 15 - LocalStorage, Contains emphasized items</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/YL1F4dCUlLc" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><img src="/images/2020-08-29-14-46-43.png"></p><p>오랜만에 영상을 먼저 보지 않고 혼자 구현할 수 있었던 과제였다. <code>localStorage</code>의 사용법만 안다면 (매우 간단하다) 리스트를 만들어 관리하는 것은 투두리스트를 많이 만들어봤기에 자신있었다.</p><h2 id="localStorage의-사용"><a href="#localStorage의-사용" class="headerlink" title="localStorage의 사용"></a>localStorage의 사용</h2><p>자바스크립트에서는 기본적으로 로컬 스토리지에, 즉 클라이언트의 로컬 컴퓨터에 어떠한 데이터를 저장, 삭제, 조회할 수 있는 메소드가 있다. 브라우저마다 다르지만, 보통 5MB 정도의 용량을 허용한다고 한다. (사실 5MB 정도면 텍스트 데이터정도를 저장하기에는 충분하다)</p><p>저장, 조회, 삭제에 대한 방법만 알면 충분하다.</p><ul><li>저장: <code>localStorage.setItem(&#39;&lt;item명&gt;&#39;, &lt;저장할 item&gt;)</code></li><li>데이터 조회: <code>localStorage.getItem(&#39;&lt;item명&gt;&#39;)</code></li><li>특정 카테고리 삭제: <code>localStorage.clear(&#39;&lt;item명&gt;&#39;)</code></li><li>로컬 스토리지 전체 삭제: <code>localStorage.clear()</code></li></ul><h2 id="아이템-새로고침-추가-토글-구현"><a href="#아이템-새로고침-추가-토글-구현" class="headerlink" title="아이템 새로고침, 추가, 토글 구현"></a>아이템 새로고침, 추가, 토글 구현</h2><p>로직은 매우 간단한데, <code>&lt;input&gt;</code>에서 추가할 텍스트 데이터를 <code>items</code>라는 배열에 넣고 로컬 스토리지에 저장 후 리스트에 텍스트 데이터를 하나씩 추가하면 된다. 여기서 중요한 것은, 로컬 스토리지에 저장하기 때문에 굳이 하나씩 넣을 필요도 없고, 배열 전체를 받아 <code>innerHTML</code>로 새로고침하는 함수를 하나 만들면 된다.<br>(데이터가 많아지면 비효율적이겠지만 간단한 메뉴 리스트이기에 무관하다)</p><h3 id="새로고침"><a href="#새로고침" class="headerlink" title="새로고침"></a>새로고침</h3><p>우선 배열을 받아 list를 새로고침하는 함수이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">populateList</span>(<span class="params">plates = [], platesList</span>) </span>&#123;</span><br><span class="line">  platesList.innerHTML = plates</span><br><span class="line">    .map(<span class="function">(<span class="params">plate, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">          &lt;input type=&quot;checkbox&quot; data-index=<span class="subst">$&#123;i&#125;</span> id=&quot;item<span class="subst">$&#123;i&#125;</span>&quot; <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        plate.done ? <span class="string">&quot;checked&quot;</span> : <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="subst">      &#125;</span> /&gt;</span></span><br><span class="line"><span class="string">          &lt;label for=&quot;item<span class="subst">$&#123;i&#125;</span>&quot;&gt;<span class="subst">$&#123;plate.text&#125;</span>&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각 요소를 <code>&lt;li&gt;</code> 태그의 요소로 바꿔 한개씩 <code>join(&#39;&#39;)</code> 시켜주면 리스트 전체를 원하는 <code>innerHTML</code>로 바꿔주는 함수이다.</p><p>이제 리스트를 추가하던, 체크박스를 토글하던 이 함수만 실행하면 새로고침된다.</p><h3 id="리스트-추가"><a href="#리스트-추가" class="headerlink" title="리스트 추가"></a>리스트 추가</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">const</span> text = <span class="built_in">this</span>.querySelector(<span class="string">&#x27;[name=&quot;item&quot;]&#x27;</span>).value;</span><br><span class="line">  <span class="keyword">const</span> item = &#123;</span><br><span class="line">    text,</span><br><span class="line">    done: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  items.push(item);</span><br><span class="line">  populateList(items, itemsList);</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;items&quot;</span>, <span class="built_in">JSON</span>.stringify(items));</span><br><span class="line">  <span class="built_in">this</span>.reset();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;form&gt;</code>에 이벤트를 걸기 때문에 <code>e.preventDefault</code>로 기본 동작을 막는다. (안 막으면 기본 동작인 새로고침이 일어난다)</p><p>그리고 아이템의 값을 JSON을 이용하여 String으로 바꿔주고 리스트를 새로고침, 로컬스토리지에도 저장하면 된다.</p><p><code>this.reset()</code>을 하지 않으면 기본 동작을 막아놨기 때문에 폼에 입력한 내용들이 날라가지 않고 그대로 남아있게 되기에 꼭 날려주자.</p><h2 id="체크박스-토글"><a href="#체크박스-토글" class="headerlink" title="체크박스 토글"></a>체크박스 토글</h2><p>마지막으로 구현할 것은 체크박스 토글이고, 이 역시 로컬스토리지에 변경 내용이 저장되어야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleDone</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.target.type != <span class="string">&quot;checkbox&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> index = e.target.dataset.index;</span><br><span class="line">  items[index].done = !items[index].done;</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;items&quot;</span>, <span class="built_in">JSON</span>.stringify(items));</span><br><span class="line">  populateList(items, itemsList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>items</code> 배열의 <code>done</code> 값을 반대로 저장하고, 로컬스토리지와 새로고침하는 과정은 <code>addItem()</code> 함수의 로직과 같다.</p><p>이제 이 모든 함수들을 이벤트만 걸어주면 끝이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addItems.addEventListener(<span class="string">&quot;submit&quot;</span>, addItem);</span><br><span class="line">itemsList.addEventListener(<span class="string">&quot;click&quot;</span>, toggleDone);</span><br><span class="line">populateList(items, itemsList);</span><br></pre></td></tr></table></figure><h2 id="추가-구현-전체-삭제"><a href="#추가-구현-전체-삭제" class="headerlink" title="추가 구현 - 전체 삭제"></a>추가 구현 - 전체 삭제</h2><p>전체 삭제도 만들어보면 좋지 않을까 해서 만든 전체 삭제 함수이다. 당연히 로컬 스토리지도 초기화된다.</p><p>먼저 적당한 위치에 버튼을 만들어준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;clear&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Clear all items&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>배운 방법들을 활용하여 초기화 함수를 작성하고 바로 이벤트를 걸어준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;[name=&quot;clear&quot;]&#x27;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">localStorage</span>.clear(<span class="string">&quot;items&quot;</span>);</span><br><span class="line">  items.length = <span class="number">0</span>;</span><br><span class="line">  populateList(items, itemsList);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>items</code>에 해당하는 데이터를 로컬 스토리지에서 모두 날리고, <code>items</code> 배열을 초기화시키는데 이 배열은 <code>const</code>로 선언되었기 때문에 재선언을 할 수 없으므로 <code>length</code>를 0으로 만들어주는 방법이 있다.</p><blockquote><p>이제 30 코스 중 15개를 완수했다. 하루에 1개씩 배우는 재미가 쏠쏠하고, 뿌듯하다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-15-LocalStorage-Contains-emphasized-items&quot;&gt;&lt;a href=&quot;#Day-15-LocalStorage-Contains-emphasized-items&quot; class=&quot;headerlink&quot; title=&quot;Da</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 14 References VS Copying</title>
    <link href="https://zinirun.github.io/2020/08/29/js-course30-14/"/>
    <id>https://zinirun.github.io/2020/08/29/js-course30-14/</id>
    <published>2020-08-28T16:35:28.000Z</published>
    <updated>2020-08-28T16:49:32.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-14-Javascript-References-VS-Copying"><a href="#Day-14-Javascript-References-VS-Copying" class="headerlink" title="Day 14 - Javascript References VS Copying"></a>Day 14 - Javascript References VS Copying</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/YnfwDQ5XYF4" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Reference(참조)와 Copy(복사)에 대한 전반적인 개념을 다룬다. 개인적으로 자바스크립트의 속성을 이해하기 위해 정말 필요한 과제였다고 생각한다.</p><h2 id="값-복사-number-String"><a href="#값-복사-number-String" class="headerlink" title="값 복사 (number, String)"></a>값 복사 (number, String)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> age2 = age;</span><br><span class="line"><span class="built_in">console</span>.log(age, age2); <span class="comment">// 100, 100</span></span><br><span class="line">age = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age, age2); <span class="comment">// 200, 100</span></span><br></pre></td></tr></table></figure><p>값은 별도의 방법없이 대입 선언만으로 복사할 수 있다. 예시는 숫자인데 문자열(String)도 마찬가지다.</p><h2 id="배열-복사"><a href="#배열-복사" class="headerlink" title="배열 복사"></a>배열 복사</h2><p>배열은 값을 복사할 때 처럼 <code>=</code>로는 할 수 없다. 그러면 “복사”가 아닌 “참조”가 돼서 복사된 (것처럼 보이는) 배열의 요소가 변경되면 원래의 배열도 바뀌게 된다. 당연히 참조되었기 때문에 이런 일이 발생한다.</p><p>배열을 복사하는 방법은 많다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> players = [<span class="string">&quot;Wes&quot;</span>, <span class="string">&quot;Sarah&quot;</span>, <span class="string">&quot;Ryan&quot;</span>, <span class="string">&quot;Poppy&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> team2 = players.slice();</span><br><span class="line"><span class="keyword">const</span> team3 = [].concat(players);</span><br><span class="line"><span class="keyword">const</span> team4 = [...players];</span><br><span class="line"><span class="keyword">const</span> team5 = <span class="built_in">Array</span>.from(players);</span><br></pre></td></tr></table></figure><p><code>players</code> 배열을 복사하기 위해 사용할 수 있는 4가지 방법이고, 결과는 모두 같다. 나는 <code>...</code>을 사용하는 ES6 Spread 방법이 가장 마음에 든다. 참고로 <code>slice()</code>와 <code>concat()</code>으로 복사가 가능한 이유는 대상이 되는 배열을 가지고 새로운 배열을 반환하기 때문이다.</p><h2 id="객체-Object-복사"><a href="#객체-Object-복사" class="headerlink" title="객체(Object) 복사"></a>객체(Object) 복사</h2><h3 id="One-Level-Copy-Object-assign"><a href="#One-Level-Copy-Object-assign" class="headerlink" title="One Level Copy - Object.assign()"></a>One Level Copy - <code>Object.assign()</code></h3><p>복사의 대상이 되는 배열은</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Zini&quot;</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 <code>person</code> 객체이다. 당연히 <code>=</code>를 사용하면 복사가 아닌 참조가 되어버린다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> personCopy = <span class="built_in">Object</span>.assign(&#123;&#125;, person, &#123; <span class="attr">number</span>: <span class="number">99</span> &#125;);</span><br></pre></td></tr></table></figure><p><code>Object.assign</code>을 사용해서 <code>person</code> 객체를 다시 객체화시켜 복사하는 방법이 있다.</p><blockquote><p>나중에는 배열에서 spread를 사용한 것처럼 <code>&#123;...person&#125;</code>으로 복사가 가능해질 것 같다. 참고로 Chrome에서는 현재 지원한다고 한다.</p></blockquote><h3 id="One-Level-이상의-Copy-JSON-parse-JSON-stringify"><a href="#One-Level-이상의-Copy-JSON-parse-JSON-stringify" class="headerlink" title="One Level 이상의 Copy - JSON.parse(JSON.stringify())"></a>One Level 이상의 Copy - <code>JSON.parse(JSON.stringify())</code></h3><p>복사할 대상이</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zini = &#123;</span><br><span class="line">  name: <span class="string">&quot;Zini&quot;</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">  social: &#123;</span><br><span class="line">    github: <span class="string">&quot;zinirun&quot;</span>,</span><br><span class="line">    instagram: <span class="string">&quot;@normalzini&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이렇게 1레벨이 아닌 2레벨로 구성되어 있다면, 앞의 방법처럼 <code>Object.assign()</code>을 사용할 수 없다. 1레벨만 복사되고 2레벨부터는 참조되기 때문에 2레벨의 요소가 변경되면 원 배열의 값도 바뀐다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ziniCopy = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(zini));</span><br></pre></td></tr></table></figure><p><code>JSON</code>을 사용하여 JSON 객체로 stringify 후 parse하면 레벨에 관계없이 복사할 수 있다. 당연히 1레벨도 복사할 수 있기 때문에 나는 객체를 복사할 때는 항상 JSON을 사용할 것 같다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-14-Javascript-References-VS-Copying&quot;&gt;&lt;a href=&quot;#Day-14-Javascript-References-VS-Copying&quot; class=&quot;headerlink&quot; title=&quot;Day 14 - Javas</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>BOJ - 1715 카드 정렬하기 (정렬)</title>
    <link href="https://zinirun.github.io/2020/08/29/ps-sort-boj-1715/"/>
    <id>https://zinirun.github.io/2020/08/29/ps-sort-boj-1715/</id>
    <published>2020-08-28T15:28:10.000Z</published>
    <updated>2020-08-28T15:42:01.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="국영수"><a href="#국영수" class="headerlink" title="국영수"></a>국영수</h2><p>문제 <a href="https://www.acmicpc.net/problem/1715">Acmicpc</a></p><p><img src="/images/2020-08-29-00-41-59.png"></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input=sys.stdin.readline</span><br><span class="line">N = int(input())</span><br><span class="line">card_deck = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</span><br><span class="line">    heapq.heappush(card_deck, int(input()))</span><br><span class="line"><span class="keyword">if</span> len(card_deck)==<span class="number">1</span>: print(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    answer=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> len(card_deck) &gt; <span class="number">1</span>:</span><br><span class="line">        k=heapq.heappop(card_deck)+heapq.heappop(card_deck)</span><br><span class="line">        answer+=k</span><br><span class="line">        heapq.heappush(card_deck,k)</span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><p>우선순위 큐를 이용해서 2개를 뺀 후 (우선순위 큐에서 heappop하면 가장 작은 것 2개를 빼낸다) 더한 값을 결과값에 누적해서 더해주고, 다시 우선순위 큐에 집어넣는다.</p><p>우선순위 큐를 사용하지 않는다면 2개를 더한 값을 넣어준 후 다시 <code>sort()</code>를 쓰던지 해서 정렬시켜야 하는데, 당연히 시간초과가 난다.</p><p>어떻게든 우선순위 큐를 안써보려고 해봤지만, 로직대로면 다시 정렬해야 하기에 라이브러리를 사용 안 할수가 없다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">card=sorted([int(input()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)])</span><br><span class="line">isSet=<span class="literal">False</span></span><br><span class="line">comp_sum=<span class="number">0</span></span><br><span class="line">comp=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> idx,i <span class="keyword">in</span> enumerate(card):</span><br><span class="line">    <span class="keyword">if</span> isSet==<span class="literal">True</span>:</span><br><span class="line">        comp_sum+=(comp_sum+prev+i)</span><br><span class="line">        isSet=<span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> idx==n<span class="number">-1</span>: comp_sum+=(comp_sum+i)</span><br><span class="line">        prev=i</span><br><span class="line">        isSet=<span class="literal">True</span></span><br><span class="line">print(comp_sum)</span><br></pre></td></tr></table></figure><p>위는 틀린 코드인데, 더해서 누적하는 과정은 여차저차 했다고 쳐도 다시 정렬하는 과정이 없기에 당연히 틀린 답이다.</p><blockquote><p>문제를 보고 어떤 로직으로 풀 지, 또 거기에는 어떤 라이브러리가 필요한지 캐치하는 능력을 기르자 (아직 턱없이 부족하다)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;국영수&quot;&gt;&lt;a href=&quot;#국영수&quot; class=&quot;headerlink&quot; title=&quot;국영수&quot;&gt;&lt;/a&gt;국영수&lt;/h2&gt;&lt;p&gt;문제 &lt;a href=&quot;https://www.acmicpc.net/problem/1715&quot;&gt;Acmicpc&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/tags/algorithm/"/>
    
    <category term="ps" scheme="https://zinirun.github.io/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>Progammers - 실패율 (정렬)</title>
    <link href="https://zinirun.github.io/2020/08/29/ps-sort-programmers-fail-rate/"/>
    <id>https://zinirun.github.io/2020/08/29/ps-sort-programmers-fail-rate/</id>
    <published>2020-08-28T15:27:57.100Z</published>
    <updated>2020-08-28T15:34:59.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="실패율"><a href="#실패율" class="headerlink" title="실패율"></a>실패율</h2><p>문제 <a href="https://programmers.co.kr/learn/courses/30/lessons/42889">프로그래머스</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">N, stages</span>):</span></span><br><span class="line">    fail=[]</span><br><span class="line">    remain=len(stages)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> remain!=<span class="number">0</span>:</span><br><span class="line">            p=stages.count(i+<span class="number">1</span>)</span><br><span class="line">            fail.append((i+<span class="number">1</span>,p/remain))</span><br><span class="line">            remain-=p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fail.append((i+<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x:x[<span class="number">0</span>],sorted(fail,reverse=<span class="literal">True</span>,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line">print(solution(<span class="number">5</span>, [<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>주어진 <code>stages</code> 배열을 정수를 증가시키면서 count를 세고 적절히 <code>fail</code> 배열에 집어넣고, 정렬하면 된다.</p><p>정렬된 배열을 리턴하는 부분이 꽤 복잡한데, 실패율(인덱스 1)을 기준으로 내림차순 정렬 후 스테이지 번호(인덱스 0)를 리스트로 반환한다.</p><p>이 문제는 전에 풀었던 문제인데, 코드가 너무 더러운 것 같아 다시 풀었다. 이전 코드는</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">N, stages</span>):</span></span><br><span class="line">    a=[]</span><br><span class="line">    cur=len(stages)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> cur!=<span class="number">0</span>:</span><br><span class="line">            a.append(stages.count(i+<span class="number">1</span>)/cur)</span><br><span class="line">            cur-=stages.count(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x:x+<span class="number">1</span>,sorted(range(len(a)),key=a.__getitem__, reverse=<span class="literal">True</span>)))</span><br></pre></td></tr></table></figure><p>다시 작성한 코드보다 가독성도 별로고, 코드 해석도 어려웠다.</p><blockquote><p>결론: “숏코딩”보다 “클린코딩”하자.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;실패율&quot;&gt;&lt;a href=&quot;#실패율&quot; class=&quot;headerlink&quot; title=&quot;실패율&quot;&gt;&lt;/a&gt;실패율&lt;/h2&gt;&lt;p&gt;문제 &lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/428</summary>
      
    
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/tags/algorithm/"/>
    
    <category term="ps" scheme="https://zinirun.github.io/tags/ps/"/>
    
  </entry>
  
</feed>
