<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zinirun</title>
  
  <subtitle>tech blog by Zini</subtitle>
  <link href="https://zinirun.github.io/feed.xml" rel="self"/>
  
  <link href="https://zinirun.github.io/"/>
  <updated>2020-10-27T07:51:33.258Z</updated>
  <id>https://zinirun.github.io/</id>
  
  <author>
    <name>zini</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js - GraphQL로 CRUD 만들기</title>
    <link href="https://zinirun.github.io/2020/10/27/graphql-crud-sample/"/>
    <id>https://zinirun.github.io/2020/10/27/graphql-crud-sample/</id>
    <published>2020-10-27T07:16:15.000Z</published>
    <updated>2020-10-27T07:51:33.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="REST-API-VS-GraphQL"><a href="#REST-API-VS-GraphQL" class="headerlink" title="REST API VS GraphQL"></a>REST API VS GraphQL</h2><p>REST API로만 벡엔드 서버 API를 구현한 나로서는 굳이 GraphQL이란 것을 알아야할까 싶었다. 이 생각은 GraphQL로 간단한 프로젝트를 만들어 보며 완전히 바뀌게 되었다.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/EkWI6Ru8lFQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>11분동안 정말 재밌게 설명해주신 유튜버가 있어 REST와 GraphQL에 대한 긴 설명은 이것으로 대체한다.</p><p>뭘 써야할 지 모르겠다면 GraphQL, Rest API 모두 만들어서 필요한 작업마다 다르게 써먹으면 된다. 일반적으로 파일 전송같은 경우 RESTful이 더 유리하다고 하고, CRUD 작업이 대부분이라면 GraphQL이 훨씬 편하다.</p><h2 id="Node-js에서-GraphQL-구축하기"><a href="#Node-js에서-GraphQL-구축하기" class="headerlink" title="Node.js에서 GraphQL 구축하기"></a>Node.js에서 GraphQL 구축하기</h2><p>우선 express에서 GraphQL을 사용하기 위해 관련 패키지를 설치한다. (물론 express 세팅은 끝난 가정하이다)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add graphql</span><br><span class="line">$ yarn add express-graphql</span><br></pre></td></tr></table></figure><p>간단하게 GraphQL은 스키마 + 리졸버로 구성된다. 스키마 안에 변수나 함수를 정의하고, 리졸버에서 함수를 구현하면 된다.</p><p>우선 스키마를 정의하자. 나는 모듈화를 위해 파일을 용도에 맞게 쪼개서 쓰기로 했다.</p><h3 id="스키마-만들기"><a href="#스키마-만들기" class="headerlink" title="스키마 만들기"></a>스키마 만들기</h3><p><code>schema.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; buildSchema &#125; = <span class="built_in">require</span>(<span class="string">&#x27;graphql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = buildSchema(<span class="string">`</span></span><br><span class="line"><span class="string">    input ProductInput &#123;</span></span><br><span class="line"><span class="string">    name: String,</span></span><br><span class="line"><span class="string">    price: Int,</span></span><br><span class="line"><span class="string">    description: String</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    type Product &#123;</span></span><br><span class="line"><span class="string">        id: ID!,</span></span><br><span class="line"><span class="string">        name: String,</span></span><br><span class="line"><span class="string">        price: Int,</span></span><br><span class="line"><span class="string">        description: String</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    type Query &#123;</span></span><br><span class="line"><span class="string">        getProduct(id: ID!): Product</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    type Mutation &#123;</span></span><br><span class="line"><span class="string">        addProduct(input: ProductInput): Int</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><p>먼저 <code>type Query</code>와 <code>type Mutation</code>을 보자. 일반적으로 GET 작업은 Query로, POST 작업은 Mutation으로 정의한다.</p><h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p><code>getProduct</code>라는 함수는 <code>ID</code> 유형의 <code>id</code> 변수를 인자로 받고, <code>Product</code> 객체를 반환한다는 의미이다. (여기서 <code>ID</code>는 MySQL에서의 일반적인 PK로 생각하면 된다)</p><p>이제 반환할 <code>Product</code> 객체에 뭐가 들었는지 <code>type Product</code>로 정의해주면 된다. 나만의 자료형을 만든다고 생각하면 쉽다.</p><p>참고로 <code>!</code>가 붙은 변수는 무조건 해당 인자는 받아야 한다는 <code>required</code>의 의미와 비슷한 표시이다.</p><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p><code>addProduct</code>는 말그대로 POST 메소드로 상품을 등록하는 함수이다. 입력값이 <code>ProductInput</code>으로 되어 있는데, <code>Product</code> type을 만들 때와 비슷하게 클라이언트의 입력 값을 미리 정의해둔 것이다. (일반적으로 뒤에 <code>Input</code>을 붙인다고 한다)</p><h3 id="Resolver-만들기"><a href="#Resolver-만들기" class="headerlink" title="Resolver 만들기"></a>Resolver 만들기</h3><p>이제 <code>getProduct</code>와 <code>addProduct</code>의 함수를 구현하면 거의 끝이다.</p><p><code>rootValue.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> products = <span class="built_in">require</span>(<span class="string">&#x27;./products&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> defaultProducts = <span class="built_in">require</span>(<span class="string">&#x27;./defaultProducts&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getProduct: <span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> products.find(<span class="function">(<span class="params">product</span>) =&gt;</span> product.id === <span class="built_in">parseInt</span>(id));</span><br><span class="line">    &#125;,</span><br><span class="line">    addProduct: <span class="function">(<span class="params">&#123; input &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        input.id = products.length === <span class="number">0</span> ? <span class="number">1</span> : products[products.length - <span class="number">1</span>].id + <span class="number">1</span>;</span><br><span class="line">        products.push(input);</span><br><span class="line">        <span class="keyword">return</span> input.id;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>나는 <code>products</code>라는 데이터 배열을 모듈화하여 사용하였다. 스키마에서 선언한 인자를 그대로 받아 적절한 함수를 짜고, 미리 정해놓은 리턴 자료형대로 반환하면 된다.</p><h3 id="Express로-라우팅하기"><a href="#Express로-라우팅하기" class="headerlink" title="Express로 라우팅하기"></a>Express로 라우팅하기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.app.use(</span><br><span class="line">            <span class="string">&#x27;/graphql&#x27;</span>,</span><br><span class="line">            graphqlHTTP(&#123;</span><br><span class="line">                schema,</span><br><span class="line">                rootValue,</span><br><span class="line">                graphiql: <span class="literal">true</span>, <span class="comment">// support GUI</span></span><br><span class="line">            &#125;),</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>이제 <code>/graphql</code>이라는 경로로 GraphQL API를 라우팅하면 모든 구축이 끝난다. 스키마는 <code>schema</code>로, 리졸버는 <code>rootValue</code>라는 값으로 받는다. (그렇기 때문에 난 파일 이름을 똑같이 만들었다) <code>graphiql</code>은 URL에서 <code>/graphql</code>로 접속했을 때 쿼리와 뮤테이션을 써볼 수 있는 GUI 환경을 제공한다. 당연히 보안을 위해 배포시에는 <code>graphiql</code>을 <code>false</code>로 세팅해야 한다.</p><h2 id="클라이언트에서-데이터-주고-받기"><a href="#클라이언트에서-데이터-주고-받기" class="headerlink" title="클라이언트에서 데이터 주고 받기"></a>클라이언트에서 데이터 주고 받기</h2><p>이제 쿼리와 뮤테이션을 각각 GET, POST 요청으로 데이터를 주고 받을 수 있다. <code>fetch</code>, <code>axios</code> 등 방법은 많은데 <code>fetch</code>는 브라우저 호환에 문제가 있다고 하여 <code>axios</code>를 사용하기로 했다.</p><h3 id="GET-요청"><a href="#GET-요청" class="headerlink" title="GET 요청"></a>GET 요청</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apiUri = <span class="string">&#x27;http://localhost:3000/graphql&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProduct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    axios</span><br><span class="line">        .get(apiUri, &#123;</span><br><span class="line">            params: &#123;</span><br><span class="line">                query: <span class="string">`&#123;getProduct(id : <span class="subst">$&#123;pid.value&#125;</span>) &#123;id price name description&#125;&#125;`</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(result)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스키마에서 짜놓은 형식대로 쿼리를 GET으로 넘기면 된다. axios 자체적으로 promise를 지원하기 때문에 then, catch를 사용하면 에러 핸들링이 수월하다. 이제 <code>result</code>를 가지고 데이터를 가공하여 클라이언트에게 제공할 수 있다.</p><h3 id="POST-요청"><a href="#POST-요청" class="headerlink" title="POST 요청"></a>POST 요청</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postProduct</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    axios</span><br><span class="line">        .post(apiUri, &#123;</span><br><span class="line">            query: <span class="string">&#x27;mutation addProduct($input: ProductInput) &#123; addProduct(input: $input)&#125;&#x27;</span>,</span><br><span class="line">            variables: &#123;</span><br><span class="line">                input: &#123;</span><br><span class="line">                    price: <span class="built_in">parseInt</span>(<span class="built_in">this</span>.price.value),</span><br><span class="line">                    name: <span class="built_in">String</span>(<span class="built_in">this</span>.name.value),</span><br><span class="line">                    description: <span class="built_in">String</span>(<span class="built_in">this</span>.description.value),</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            operationName: <span class="literal">null</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET과 방식은 거의 똑같은데, POST 메소드이므로 <code>params</code>가 아닌 <code>query</code>를 넘긴다. <code>$</code>를 사용하여 변수를 <code>variables</code>로 빼서 사용할 수도 있고, 백틱을 사용해서 하드코딩해도 상관은 없다.</p><h2 id="매력적인-GraphQL"><a href="#매력적인-GraphQL" class="headerlink" title="매력적인 GraphQL"></a>매력적인 GraphQL</h2><p>사실 기존의 서버 API를 바꾸는 것은 많은 시간과 노력이 든다. 하지만 REST API와 GraphQL를 한번에 사용할 수도 있으므로 클라이언트(프론트엔드) 부분만 살짝 손대주면 나중을 생각할 때 훨씬 간결한 CRUD 환경을 구축할 수 있다. 현재도 폭발적인 인기를 받아 많은 발전이 이뤄지고 있다고 한다.</p><p>GraphQL의 CRUD 작업을 시뮬레이션할 수 있는 서비스 <code>graphql-crud-demo</code> 를 개발했는데, 다음 글에 포스팅해보겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;REST-API-VS-GraphQL&quot;&gt;&lt;a href=&quot;#REST-API-VS-GraphQL&quot; class=&quot;headerlink&quot; title=&quot;REST API VS GraphQL&quot;&gt;&lt;/a&gt;REST API VS GraphQL&lt;/h2&gt;&lt;p&gt;RE</summary>
      
    
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/categories/nodejs/"/>
    
    <category term="graphql" scheme="https://zinirun.github.io/categories/nodejs/graphql/"/>
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/tags/nodejs/"/>
    
    <category term="graphql" scheme="https://zinirun.github.io/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>클러스터 인덱스 vs 넌클러스터 인덱스</title>
    <link href="https://zinirun.github.io/2020/10/23/database-index/"/>
    <id>https://zinirun.github.io/2020/10/23/database-index/</id>
    <published>2020-10-23T00:11:37.000Z</published>
    <updated>2020-10-23T01:17:39.511Z</updated>
    
    <content type="html"><![CDATA[<p>학과 공부와 시험을 준비하다가 클러스터 인덱스와 넌클러스터 인덱스를 정리해 본다.</p><h2 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h2><p>영어 사전을 생각해보자. 기본적으로 A~Z 알파벳 순으로 책 자체가 정렬되어 있다. 이건 <strong>클러스터 인덱스</strong>이다. 사전 마지막에는 “색인”이 있는데, 필요한 단어를 찾고, 거기에 적힌 페이지로 간다. 이게 <strong>넌클러스터 인덱스</strong>이다.</p><h3 id="클러스터-인덱스"><a href="#클러스터-인덱스" class="headerlink" title="클러스터 인덱스"></a>클러스터 인덱스</h3><ul><li>테이블 당 1개만 허용</li><li>기본 키 설정시 자동으로 만들어짐</li><li>테이블 자체가 인덱스 (클러스터 인덱스를 기준으로 테이블을 정렬하기 때문에 인덱스 페이지가 없다)</li><li>데이터 입력, 수정, 삭제 시 항상 정렬을 유지함</li><li>기본적으로 접근 성능이 좋음</li></ul><h3 id="넌클러스터-인덱스"><a href="#넌클러스터-인덱스" class="headerlink" title="넌클러스터 인덱스"></a>넌클러스터 인덱스</h3><ul><li>테이블 당 최대 240개 생성 가능</li><li>인덱스 페이지를 별도로 저장</li><li>테이블 자체는 정렬되지 않고, 인덱스 페이지에만 정렬</li><li>성능 증가는 정말 “Case By Case”</li></ul><p>부가적으로 설명하자면, <strong>클러스터 인덱스</strong>는 항상 정렬을 유지하기 때문에 기본적으로 성능이 보장된다. AUTO_INCREMENT 같은 id에 클러스터 인덱스가 있어도 조회 성능이 향상된다. 하지만 테이블을 정렬 상태로 유지해야하므로 데이터를 입력, 수정, 삭제하는 경우에 즉각 정렬이 일어나기 때문에 느려진다. Trade Off라고 생각하면 된다. 따라서 DML 작업이 자주 일어나는 테이블에 클러스터 인덱스는 정말 신중하게 결정해야 한다.</p><p><strong>넌클러스터 인덱스</strong>는 DML 작업이 일어나도 괜찮다. 별도의 인덱스 페이지가 있기 때문에 테이블 전체를 정렬하는 것보다 훨씬 낫다. 하지만 어디에 넌클러스터 인덱스를 걸어야 할 지는 정말 신중해야 한다. 바보같이 걸면 성능도 바보가 된다. 인덱스가 없는 것보다 느려질 수도 있다.</p><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><h3 id="클러스터-인덱스-1"><a href="#클러스터-인덱스-1" class="headerlink" title="클러스터 인덱스"></a>클러스터 인덱스</h3><p>쿼리를 기준으로 예를 들면,</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>(hire_date), <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> hire_date &gt;= <span class="string">&#x27;1997-01-01&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">year</span>(hire_date); </span><br></pre></td></tr></table></figure><p>조건절에 <code>hire_date</code>가 있고, 범위 탐색이다. 이 경우 <code>hire_date</code>에 클러스터 인덱스를 보여하면 성능이 엄청나게 향상된다. 여기서 WHERE 절만 빼보자.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>(hire_date), <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">year</span>(hire_date); </span><br></pre></td></tr></table></figure><p>여기서 마찬가지로 <code>hire_date</code>에 클러스터 인덱스를 건다면? 성능 향상에 도움이 안되거나, 데이터가 많아지는 경우 오히려 느려진다. 스캔 방식을 생각해야 한다. 클러스터 인덱스가 없는 경우 기본적으로 Heap 테이블 스캔이 이루어진다. 클러스터 인덱스가 있는 경우에는 클러스터 인덱스 스캔이 이루어진다. 하지만 조건절이 없으므로 무식하게 다 읽는건 Heap 테이블 스캔이 빠르다.</p><h3 id="넌클러스터-인덱스-1"><a href="#넌클러스터-인덱스-1" class="headerlink" title="넌클러스터 인덱스"></a>넌클러스터 인덱스</h3><p>위의 예시와 같은 쿼리이다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>(hire_date), <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> hire_date &gt;= <span class="string">&#x27;1997-01-01&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">year</span>(hire_date); </span><br></pre></td></tr></table></figure><p>여기서 <code>hire_date</code>에 넌클러스터 인덱스를 건다면? 놀랍게도 클러스터 인덱스를 걸었을 때보다 더 빠르다. 이 경우 때문에 구글링을 2시간은 한 것 같다. 내가 내린 결론은, 넌클러스터 인덱스가 탐색 범위에 포함되었기 때문에 옵티마이저에서는 인덱스 스캔이 아닌 <strong>Non-Clustered Index Seek</strong> 방식을 선택한다. Index Scan은 인덱스의 모든 행을 인덱스 순서로 읽는 반면에, Index Seek은 필터 기준에 따라 일치하는 행이나 한정된 행만 찾으려고 리프 노드를 거치기 때문에 논리적 읽기 수가 훨씬 감소한다.(고 한다)</p><p>하지만 포인트 쿼리인지 범위 쿼리인지, 범위 쿼리라면 조건절의 탐색 범위는 얼마나인지에 따라서 경우가 달라진다. 결국 실무에서 클러스터링 최적화를 위해서는 테스트를 거친 후 적용해야 하고, 클러스터 인덱스를 걸 때는 인덱스를 거는 행동만으로 데이터 정렬에 비용이 소요되므로 신중하게 결정해야 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;학과 공부와 시험을 준비하다가 클러스터 인덱스와 넌클러스터 인덱스를 정리해 본다.&lt;/p&gt;
&lt;h2 id=&quot;개념&quot;&gt;&lt;a href=&quot;#개념&quot; class=&quot;headerlink&quot; title=&quot;개념&quot;&gt;&lt;/a&gt;개념&lt;/h2&gt;&lt;p&gt;영어 사전을 생각해보자. 기본적</summary>
      
    
    
    
    <category term="database" scheme="https://zinirun.github.io/categories/database/"/>
    
    
    <category term="database" scheme="https://zinirun.github.io/tags/database/"/>
    
    <category term="index" scheme="https://zinirun.github.io/tags/index/"/>
    
    <category term="clustered index" scheme="https://zinirun.github.io/tags/clustered-index/"/>
    
    <category term="nonclustered index" scheme="https://zinirun.github.io/tags/nonclustered-index/"/>
    
    <category term="sql" scheme="https://zinirun.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Node.js - 좀 더 바람직하게 Express 서버 여는 법</title>
    <link href="https://zinirun.github.io/2020/10/16/node-better-express-app/"/>
    <id>https://zinirun.github.io/2020/10/16/node-better-express-app/</id>
    <published>2020-10-16T14:24:09.000Z</published>
    <updated>2020-10-16T15:07:00.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="바람직한-코드"><a href="#바람직한-코드" class="headerlink" title="바람직한 코드"></a>바람직한 코드</h2><p>이전부터 Node.js로 작고 큰 프로젝트들을 해왔지만 뚜렷한 코드 작성의 방향없이 생각나는 대로 집어 쓰는 경우가 많았다. “되기만 하면 된다”는 생각을 버려야 한다. 난 요즘 코드를 작성할 때 내가 만든 프로그램이 오픈소스가 되었을 때 사람들에게 당당하게 보여줄 수 있는 코드를 쓰려 노력하고 있다.</p><p>노드로 서버를 구축하면 항상 쓰는 Express 작성 방식부터가 엉망이었다. 처음에 책에서 하란 대로 하는데 되니까 그저 서버가 돌아가는 것에 만족하고 사용해왔다가, 여러 강의와 오픈 소스들을 살펴보니 Express 서버(app) 자체를 Class화하여 효율적으로 관리할 수 있는 방법이 있었다.</p><h2 id="이전의-주먹구구식-Express"><a href="#이전의-주먹구구식-Express" class="headerlink" title="이전의 주먹구구식 Express"></a>이전의 주먹구구식 Express</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>).createServer(app);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>),</span><br><span class="line">  bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>),</span><br><span class="line">  cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>),</span><br><span class="line">  <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&quot;serve-static&quot;</span>),</span><br><span class="line">  errorHandler = <span class="built_in">require</span>(<span class="string">&quot;errorhandler&quot;</span>),</span><br><span class="line">  expressErrorHandler = <span class="built_in">require</span>(<span class="string">&quot;express-error-handler&quot;</span>),</span><br><span class="line">  expressSession = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>),</span><br><span class="line">  ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>),</span><br><span class="line">  fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>),</span><br><span class="line">  url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>),</span><br><span class="line">  cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&quot;port&quot;</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(</span><br><span class="line">  bodyParser.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(<span class="string">&quot;/public&quot;</span>, express.static(__dirname + <span class="string">&quot;/public&quot;</span>));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(</span><br><span class="line">  expressSession(&#123;</span><br><span class="line">    secret: <span class="string">&quot;my key&quot;</span>,</span><br><span class="line">    resave: <span class="literal">true</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(cors());</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 404 에러 페이지 처리</span></span><br><span class="line"><span class="keyword">var</span> errorHandler = expressErrorHandler(&#123;</span><br><span class="line">  <span class="keyword">static</span>: &#123;</span><br><span class="line">    <span class="number">404</span>: <span class="string">&quot;./public/404.html&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(expressErrorHandler.httpError(<span class="number">404</span>));</span><br><span class="line">app.use(errorHandler);</span><br><span class="line"></span><br><span class="line">http.listen(app.get(<span class="string">&quot;port&quot;</span>), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;server started - port: &quot;</span> + app.get(<span class="string">&quot;port&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>가관이지만, 사실 이 형편없는 코드만으로도 서버는 정상적으로 돌아간다. 하지만 내가 노드를 쓰는 사람을 뽑는 채용 담당자라면 미들웨어가 이렇게 엉켜있고 재선언할 리 없는 변수나 라이브러리를 <code>var</code>로 남발하는 등의 엉성한 코드를 쓰는 사람에게 프로젝트를 믿고 맡길 수는 없을 것 같다.</p><h2 id="보다-나은-Express"><a href="#보다-나은-Express" class="headerlink" title="보다 나은 Express"></a>보다 나은 Express</h2><p>먼저 <code>app.js</code>를 <code>server.js</code>, <code>app.js</code>로 분할한다. (이름은 상관없다)</p><p>Express 관련 코드를 <code>app</code>에 담고, 그 <code>app</code>을 <code>http</code>와 <code>https</code>로 오픈할 <code>server</code> 소스로 나누어 작성한다.</p><p>먼저 <code>app.js</code>를 보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> expressSession = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.app = express();</span><br><span class="line">    <span class="built_in">this</span>.setViewEngine();</span><br><span class="line">    <span class="built_in">this</span>.setMiddleWare();</span><br><span class="line">    <span class="built_in">this</span>.setStatic();</span><br><span class="line">    <span class="built_in">this</span>.setLocals();</span><br><span class="line">    <span class="built_in">this</span>.getRouting();</span><br><span class="line">    <span class="built_in">this</span>.errorHandler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMiddleWare() &#123;</span><br><span class="line">    <span class="comment">// HTTP -&gt; HTTPS Redirection</span></span><br><span class="line">    <span class="built_in">this</span>.app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.secure) &#123;</span><br><span class="line">        next();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> to = <span class="string">`https://<span class="subst">$&#123;req.hostname&#125;</span><span class="subst">$&#123;req.url&#125;</span>`</span>;</span><br><span class="line">        res.redirect(to);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.app.use(logger(<span class="string">&quot;dev&quot;</span>));</span><br><span class="line">    <span class="built_in">this</span>.app.use(bodyParser.json());</span><br><span class="line">    <span class="built_in">this</span>.app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">    <span class="built_in">this</span>.app.use(cookieParser());</span><br><span class="line">    <span class="built_in">this</span>.app.use(</span><br><span class="line">      expressSession(&#123;</span><br><span class="line">        secret: <span class="string">&quot;my key&quot;</span>,</span><br><span class="line">        resave: <span class="literal">true</span>,</span><br><span class="line">        saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">this</span>.app.use(cors());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setViewEngine() &#123;</span><br><span class="line">    <span class="built_in">this</span>.app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.app.set(<span class="string">&quot;views&quot;</span>, <span class="string">&quot;./public&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.app.engine(<span class="string">&quot;html&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>).renderFile);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setStatic() &#123;</span><br><span class="line">    <span class="built_in">this</span>.app.use(<span class="string">&quot;/public&quot;</span>, express.static(__dirname + <span class="string">&quot;/public&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setLocals() &#123;</span><br><span class="line">    <span class="built_in">this</span>.app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.app.locals.isLogin = <span class="literal">true</span>;</span><br><span class="line">      next();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getRouting() &#123;</span><br><span class="line">    <span class="built_in">this</span>.app.use(<span class="built_in">require</span>(<span class="string">&quot;./controllers&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  errorHandler() &#123;</span><br><span class="line">    <span class="built_in">this</span>.app.use(<span class="function">(<span class="params">req, res, _</span>) =&gt;</span> &#123;</span><br><span class="line">      res.status(<span class="number">404</span>).render(<span class="string">&quot;404.html&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.app.use(<span class="function">(<span class="params">err, req, res, _</span>) =&gt;</span> &#123;</span><br><span class="line">      res.status(<span class="number">500</span>).render(<span class="string">&quot;500.html&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> App().app;</span><br></pre></td></tr></table></figure><p>코드만 봐도 Express에서 미들웨어를 설정하는지, 뷰엔진을 설정하는지, 라우터를 설정하는지, 에러핸들링을 하는지 알 수 있다. 만약에 미들웨어를 추가할 일이 생겼다면 <code>setMiddleware()</code>를 보고 여기가 미들웨어 넣는 자리구나하고 넣으면 된다.</p><p>이 Express app을 Class로 관리하면 또 다른 장점이 있는데, 서버 앱을 하나의 인스턴스로 관리할 수 있다. 비동기식 실행과 스레딩의 장점으로 노드를 CDN 서버 등으로 많이 활용하는데 접속된 인스턴스가 몇 개인지 관리하거나 접속 인스턴스의 갯수 제한을 두는 등의 작업을 편하게 할 수 있다.</p><p>이제 이 app을 기반으로 서버를 열면 된다. <code>server.js</code>를 보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&quot;./app.js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">require</span>(<span class="string">&quot;./config/pem_config&quot;</span>).options;</span><br><span class="line"><span class="keyword">const</span> httpPort = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> httpsPort = <span class="number">443</span>;</span><br><span class="line"></span><br><span class="line">https.createServer(options, app).listen(httpsPort, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`HTTPS: Express listening on port <span class="subst">$&#123;httpsPort&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(httpPort, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`HTTP: Express listening on port <span class="subst">$&#123;httpPort&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>작성해놓은 app을 불러와서 <code>http</code>와 <code>https</code> 모두로 열어주면 된다. 당연히 <code>https</code>는 발급한 SSL 인증서 정보를 같이 넣어주어야 한다. SSL 인증서로 https 서버를 구축하는 방법은 <a href="https://zinirun.github.io/2020/10/07/nodejs-https-server/">여기</a>에 포스팅해두었다. 학습용으로 만드는 토이 프로젝트가 아닌 이상 배포시에는 https를 당연히 지원해야 한다. 그래서 위에 <code>app.js</code>에는 http 접속을 https로 리다이렉트하는 미들웨어가 작성되어 있다.</p><p>이 방법이 완벽한 방법은 아닐 수 있다. 분명 더 세세하게 분리되어 있거나, 다른 좋은 방법으로 express 서버를 관리하는 방법도 많을 것이다. 중요한 것은 질 나쁜 코드를 작성하는 것을 끊임없이 지양하는 것에 있다고 생각한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;바람직한-코드&quot;&gt;&lt;a href=&quot;#바람직한-코드&quot; class=&quot;headerlink&quot; title=&quot;바람직한 코드&quot;&gt;&lt;/a&gt;바람직한 코드&lt;/h2&gt;&lt;p&gt;이전부터 Node.js로 작고 큰 프로젝트들을 해왔지만 뚜렷한 코드 작성의 방향없이 생각나</summary>
      
    
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/categories/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/tags/nodejs/"/>
    
    <category term="express" scheme="https://zinirun.github.io/tags/express/"/>
    
    <category term="https" scheme="https://zinirun.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>SQLD 38회 결과 (국가공인 SQL 개발자 자격증)</title>
    <link href="https://zinirun.github.io/2020/10/12/sqld-38-result/"/>
    <id>https://zinirun.github.io/2020/10/12/sqld-38-result/</id>
    <published>2020-10-12T00:08:42.000Z</published>
    <updated>2020-10-12T00:15:59.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="합격"><a href="#합격" class="headerlink" title="합격"></a>합격</h2><p><img src="/images/2020-10-12-09-10-48.png"></p><p>SQLD 사이트가 결과 발표 날에 마비되어 뒤늦게 확인했다. 결과는 합격! 순공시간 하루 정도에 좋은 결과를 얻었다. 자격증보다 프로젝트 하나가 낫다고 생각하지만 공부하는 머리도 돌릴겸 재미로 자격증 하나씩 따는건 재미있다. 오라클 자격증도 따보고 싶은데 터무니없이 비싸기도 하고 그 시간에 하둡이나 카프카를 공부해보고 싶기도 하다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;합격&quot;&gt;&lt;a href=&quot;#합격&quot; class=&quot;headerlink&quot; title=&quot;합격&quot;&gt;&lt;/a&gt;합격&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/2020-10-12-09-10-48.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;SQLD 사이트가 결과 발표 날에 </summary>
      
    
    
    
    <category term="Etc" scheme="https://zinirun.github.io/categories/Etc/"/>
    
    
    <category term="sqld" scheme="https://zinirun.github.io/tags/sqld/"/>
    
  </entry>
  
  <entry>
    <title>Node.js - MySQL timezone 삽질기</title>
    <link href="https://zinirun.github.io/2020/10/11/nodejs-mysql-timezone/"/>
    <id>https://zinirun.github.io/2020/10/11/nodejs-mysql-timezone/</id>
    <published>2020-10-11T08:54:18.000Z</published>
    <updated>2020-10-11T14:01:36.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="제-컴에선-되는데요"><a href="#제-컴에선-되는데요" class="headerlink" title="제 컴에선 되는데요"></a>제 컴에선 되는데요</h2><p>개발자들간의 대화에서 자주 나오는 변명이다. 지금 고군분투하고 있는 졸업작품에서 뼈저리게 느껴지는 말이다. 테스트 환경(로컬)과 운영 환경이 정말 다르다. localhost에선 잘만 되던 것이 도커로 서버에 배포하면 기대와 정말 다르다. 이번 문제는 도커로 배포된 MySQL 컨테이너의 시간대가 <code>UTC</code>로 설정되어 있어서 발생했다.</p><h2 id="삽질의-시작"><a href="#삽질의-시작" class="headerlink" title="삽질의 시작"></a>삽질의 시작</h2><p>백엔드(Node)에서 DB에 대한 config를 수정해야겠다 싶어서 구글링하다가 <a href="https://lemontia.tistory.com/873">비슷한 문제에 대한 해결방법</a>을 찾았다. Sequalize를 사용하지는 않지만 MySQL 설정에 대한 방법은 동일하겠다 싶었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  connectionLimit: <span class="number">30</span>,</span><br><span class="line">  host: process.env.DATABASE_HOST,</span><br><span class="line">  user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  password,</span><br><span class="line">  database,</span><br><span class="line">  dateStrings: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">  charset: <span class="string">&quot;utf8mb4&quot;</span>,</span><br><span class="line">  debug: <span class="literal">false</span>,</span><br><span class="line">  insecureAuth: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 config를</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  connectionLimit: <span class="number">30</span>,</span><br><span class="line">  host: process.env.DATABASE_HOST,</span><br><span class="line">  user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  password,</span><br><span class="line">  database,</span><br><span class="line">  timezone: <span class="string">&quot;Asia/Seoul&quot;</span>,</span><br><span class="line">  dateStrings: <span class="literal">true</span>,</span><br><span class="line">  typeCast: <span class="literal">true</span>,</span><br><span class="line">  charset: <span class="string">&quot;utf8mb4&quot;</span>,</span><br><span class="line">  debug: <span class="literal">false</span>,</span><br><span class="line">  insecureAuth: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이렇게 바꿨다. 배포해보니 결과는 똑같았다.</p><p><img src="/images/2020-10-11-22-55-06.png"></p><p>9시간 전으로 타임스탬프가 찍힌다.. <code>timezone: &#39;+09:00&#39;</code>으로 설정해도 먹히지 않았다. 대체 왜 이러는걸까 생각하다가 도커로 배포한 MySQL에서 직접 <code>select current_timestamp()</code>를 찍어봐야겠다 생각했다.</p><p>그러니 문제의 timezone과 동일한 시간이 출력되어서 데이터베이스의 timezone만 바꾸면 되겠다고 생각했다. (여기서 해결한 줄 알았다)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">time_zone</span> = <span class="string">&#x27;Asia/Seoul&#x27;</span>;</span><br></pre></td></tr></table></figure><p>이제 현재시간도 정상적으로 찍힌다.</p><p>그런데 배포했는데 또 안된다. 9시간 전으로 (UTC 시간으로) 찍힌다.</p><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>데이터베이스에서 timezone을 설정하는 방법은 맞았다. 하지만 데이터베이스 컨테이너 내 모든 DB의 Global 값을 설정해야 모든 테이블에 대해 timezone이 정상적으로 적용되는 것이었다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> <span class="keyword">time_zone</span> = <span class="string">&#x27;Asia/Seoul&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/2020-10-11-22-59-39.png"></p><p>이제 정상적으로 찍힌다. 사실 이 설정들을 바꾸는 건 어렵지 않은데, 아무리 배포 자동화가 되어 있어도 깃에 푸시하고 서버에 접속해서 스크립트를 실행하면 몇 초만에 끝나는 것도 아니라서 꽤 번거로웠다. 로컬 환경에서 배포 환경 기준으로 테스트할 수 있는 방법이 있으면 좋겠다..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;제-컴에선-되는데요&quot;&gt;&lt;a href=&quot;#제-컴에선-되는데요&quot; class=&quot;headerlink&quot; title=&quot;제 컴에선 되는데요&quot;&gt;&lt;/a&gt;제 컴에선 되는데요&lt;/h2&gt;&lt;p&gt;개발자들간의 대화에서 자주 나오는 변명이다. 지금 고군분투하고 있는 </summary>
      
    
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/categories/nodejs/"/>
    
    
    <category term="docker" scheme="https://zinirun.github.io/tags/docker/"/>
    
    <category term="nodejs" scheme="https://zinirun.github.io/tags/nodejs/"/>
    
    <category term="mysql" scheme="https://zinirun.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Node.js - HTTPS 서버 구축하기</title>
    <link href="https://zinirun.github.io/2020/10/07/nodejs-https-server/"/>
    <id>https://zinirun.github.io/2020/10/07/nodejs-https-server/</id>
    <published>2020-10-07T06:10:35.000Z</published>
    <updated>2020-10-09T08:39:06.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="왜-굳이-HTTPS"><a href="#왜-굳이-HTTPS" class="headerlink" title="왜 굳이 HTTPS?"></a>왜 굳이 HTTPS?</h2><p>우리가 들어가는 대부분의 사이트는 HTTPS 프로토콜을 지원한다. HTTP 프로토콜은 프로토타입에서만 사용하고 끝내야 한다. 가장 큰 차이점은 SSL 인증서의 유무이다. SSL 인증서는 사용자가 사이트에 제공하는 정보를 암호화한다. HTTP와 HTTPS의 자세한 차이는 <a href="http://blog.wishket.com/http-vs-https-%EC%B0%A8%EC%9D%B4-%EC%95%8C%EB%A9%B4-%EC%82%AC%EC%9D%B4%ED%8A%B8%EC%9D%98-%EB%A0%88%EB%B2%A8%EC%9D%B4-%EB%B3%B4%EC%9D%B8%EB%8B%A4/">여기</a>에 잘 나와있다. 이번에는 노드에서 어떻게 HTTPS 서버를 구축하는지 정리해보려 한다.</p><h2 id="HTTPS-서버-구축하기"><a href="#HTTPS-서버-구축하기" class="headerlink" title="HTTPS 서버 구축하기"></a>HTTPS 서버 구축하기</h2><h3 id="인증서-선택하기-무료-유료"><a href="#인증서-선택하기-무료-유료" class="headerlink" title="인증서 선택하기 (무료/유료)"></a>인증서 선택하기 (무료/유료)</h3><p>기본적으로 SSL 인증서는 유료이다. 하지만 https를 지향하는 기업에서 “https는 필수가 되어야 한다”는 목소리를 모아 <a href="https://letsencrypt.org/ko/">Let’s Encrypt</a>라는 무료 인증기관을 만들었다.</p><p>그러나 기본적으로 3달 주기로 인증서를 업데이트해줘야 하기 때문에 현재 도메인 서비스를 받고 있는 <a href="namecheap.com">Namecheap</a>에서 꽤 저렴한 SSL 인증서 제품을 팔고 있어서 이를 사서 쓰기로 했다. 1년에 4달러 정도인데, 이는 특정 한 도메인에만 사용할 수 있다. wildcard(*) 서브 도메인을 모두 인증서로 걸고 싶다면 Wildcard 제품을 별도로 구입해야 한다. (이건 비싸다)</p><h3 id="OpenSSL로-키-생성하기"><a href="#OpenSSL로-키-생성하기" class="headerlink" title="OpenSSL로 키 생성하기"></a>OpenSSL로 키 생성하기</h3><p><a href="http://slproweb.com/products/Win32OpenSSL.html">여기</a>에서 OpenSSL 설치 파일을 받아 설치한다. 이후 커맨드 창(터미널)을 관리자 권한으로 실행한다.</p><p>먼저 key를 생성한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out key.pem 2048</span><br></pre></td></tr></table></figure><p>다음으로 csr을 생성한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key key.pem -out csr.pem</span><br></pre></td></tr></table></figure><p>나는 csr을 생성할 때 순서대로 이렇게 입력했고, 참고하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Country Name (국가코드) : KR</span><br><span class="line">State or Province Name (시&#x2F;도) : Seoul</span><br><span class="line">Locality Name (구&#x2F;군) : (Enter로 넘어감)</span><br><span class="line">Organization Name (회사명) : NemoBros</span><br><span class="line">Organizational Unit Name (부서명) : Dev Team</span><br><span class="line">Common Name (인증 받을 도메인 주소) : zini.work</span><br><span class="line">Email Address : email@email.com</span><br><span class="line"></span><br><span class="line">Please enter the following &#39;extra&#39; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password : (Enter로 넘어감)</span><br><span class="line">An optional company name : (Enter로 넘어감)</span><br></pre></td></tr></table></figure><p>이제 이 CSR 파일을 열어서 각자의 도메인 사이트에서 인증서 제품을 구입한 후 CSR 파일의 주석을 제외한 암호화 코드 부분을 넣으면 정상적으로 인증서 파일이 발급된다. 그리고 사이트가 본인의 것이 맞는지 검사하는 절차가 3가지정도 있는데, 마음대로 선택해서 인증을 진행한다.</p><p>(Let’s Encrypt 무료 인증서를 이용하면 스킵해도 된다.)</p><h3 id="Node-js-HTTPS-서버-구축"><a href="#Node-js-HTTPS-서버-구축" class="headerlink" title="Node.js HTTPS 서버 구축"></a>Node.js HTTPS 서버 구축</h3><p>이제 Node.js에서 인증서를 걸어서 https 서버를 구축해보자. http 서버만 정상적으로 구축했다면 어렵지 않다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">require</span>(<span class="string">&#x27;./config/pem_config&#x27;</span>).options;</span><br><span class="line"><span class="keyword">const</span> httpPort = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> httpsPort = <span class="number">443</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTPS 서버</span></span><br><span class="line">https.createServer(options, app).listen(httpsPort, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`HTTPS: Express listening on port <span class="subst">$&#123;httpsPort&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP 서버</span></span><br><span class="line">app.listen(httpPort, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`HTTP: Express listening on port <span class="subst">$&#123;httpPort&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>HTTPS 서버를 구축하는데 HTTP 서버까지 오픈하는 이유는 나중에 설명하겠다.</p><p>다음으로 <code>options</code>에 연결된 파일을 만드는데, pem키에 대한 config를 하드코딩 하는 것보다는 option 파일로 미리 빼서 사용하는 것이 보안적으로나 가독성으로나 낫다. 내 <code>./config/pem_config</code>는 이렇게 작성되어 있는데,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> keys_dir = <span class="string">&quot;config/secure/&quot;</span>; <span class="comment">// 키 파일이 위치</span></span><br><span class="line"><span class="keyword">const</span> ca = fs.readFileSync(keys_dir + <span class="string">&quot;ca.ca-bundle&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> key = fs.readFileSync(keys_dir + <span class="string">&quot;key.pem&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cert = fs.readFileSync(keys_dir + <span class="string">&quot;cert.crt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.options = &#123;</span><br><span class="line">  key,</span><br><span class="line">  cert,</span><br><span class="line">  ca,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이렇게 Let’s Encrypt로 발급한 인증서를 넣던지, 나처럼 기관에서 유료 인증서를 발급받고 다운로드받은 파일을 넣던지 하면 된다. 참고로 <code>keys_dir</code>는 키 파일이 위치한 폴더 경로인데, <code>fs</code>의 <code>readFile</code> 경로는 절대경로가 아님에 주의해서 작성하자.</p><h3 id="HTTPS-리다이렉션"><a href="#HTTPS-리다이렉션" class="headerlink" title="HTTPS 리다이렉션"></a>HTTPS 리다이렉션</h3><p>이제 서버를 열면 HTTPS (443 포트), HTTP (80 포트) 모두에서 접속할 수 있다. 하지만 HTTPS 서버를 구축했는데 사용자가 임의로 HTTP로 프로토콜을 변경해서 들어오면 말짱도루묵이 될 것이다. 이제 HTTP 요청을 HTTPS로 리다이렉션하는 미들웨어만 작성하면 모든 작업이 끝난다.</p><p>나는 express를 class화하여 서버 인스턴스를 열고 있는데, 그렇지 않은 경우에는 앞에 <code>this.</code>만 지우면 된다. 모든 미들웨어의 최상단에 작성해야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.secure) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> to = <span class="string">`https://<span class="subst">$&#123;req.hostname&#125;</span><span class="subst">$&#123;req.url&#125;</span>`</span>;</span><br><span class="line">    res.redirect(to);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>req.secure</code>은 https 요청인지 아닌지를 반환하기에 이를 이용하여 https 리다이렉션을 구현할 수 있다. (구현하는 방법은 이것 말고도 많다)</p><p>우여곡절의 HTTPS 서버 구축이 끝났다. 사이트에 자물쇠 모양이 뜨는 것만으로도 인증서 4천원은 아까워하지 않기로 했다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;왜-굳이-HTTPS&quot;&gt;&lt;a href=&quot;#왜-굳이-HTTPS&quot; class=&quot;headerlink&quot; title=&quot;왜 굳이 HTTPS?&quot;&gt;&lt;/a&gt;왜 굳이 HTTPS?&lt;/h2&gt;&lt;p&gt;우리가 들어가는 대부분의 사이트는 HTTPS 프로토콜을 지원한다.</summary>
      
    
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/categories/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/tags/nodejs/"/>
    
    <category term="express" scheme="https://zinirun.github.io/tags/express/"/>
    
    <category term="https" scheme="https://zinirun.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 심화 공부와 졸업작품 리팩토링 계획</title>
    <link href="https://zinirun.github.io/2020/10/04/capstone-design-review-2/"/>
    <id>https://zinirun.github.io/2020/10/04/capstone-design-review-2/</id>
    <published>2020-10-04T06:58:35.000Z</published>
    <updated>2020-10-04T07:38:22.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="추석-기념-Node-js-심화-공부"><a href="#추석-기념-Node-js-심화-공부" class="headerlink" title="추석 기념(?) Node.js 심화 공부"></a>추석 기념(?) Node.js 심화 공부</h2><p>코로나때문에 추석에 고향을 가지 않았다. 보다 알찬 추석을 위해 그동안 하고 싶었던 졸업작품 리팩토링이 떠올랐다. 무턱대고 하기에는 확신이 없어서, Node.js와 Express 관련 강의를 처음부터 끝까지 동영상을 100개정도 본 것 같다. 아는 것도 많았지만 반성할 점 투성이었다. 지금까지 졸업 작품의 코드가 되게 바보같다는 생각을 했다.</p><h2 id="졸업작품-셀프-코드리뷰-그리고-반성"><a href="#졸업작품-셀프-코드리뷰-그리고-반성" class="headerlink" title="졸업작품 셀프 코드리뷰 그리고 반성"></a>졸업작품 셀프 코드리뷰 그리고 반성</h2><h3 id="REST-API-미준수"><a href="#REST-API-미준수" class="headerlink" title="REST API 미준수"></a>REST API 미준수</h3><p>우선 REST API를 제대로 준수하지 않았다. 예를 들어 회원가입을 굳이 GET 요청은 <code>/register</code>로, POST 요청은 <code>/reg_submit</code>으로 하는 등, CRUD 요청을 한 URL에서 라우터의 속성만 바꿔서 작성하면 될 것을 뒤에 <code>submit</code>이라는 말을 붙여 불필요하게 만들었다는 것이다.</p><h3 id="주먹구구식-app-js"><a href="#주먹구구식-app-js" class="headerlink" title="주먹구구식 app.js"></a>주먹구구식 app.js</h3><p><img src="/images/2020-10-04-16-10-36.png"></p><p>모든 라우터와 익스프레스 설정이 포함된 <code>app.js</code>도 엉망이다. <code>server.js</code>로 분리하여 서버에 대한 설정(미들웨어 등)을 하고 각 대분류에 대한 컨트롤러 파일을 따로 만들었다면 유지보수가 훨씬 수월한 코드가 만들어졌을텐데, 지금의 코드는 주먹구구식이었다. 그리고 서버에 대한 코드를 class화 한다면 인스턴스 관점에서의 서버 접속 관리를 할 수 있다. 구조에 대한 전체적인 수정이 필요하다..</p><h3 id="바보같은-미들웨어-처리"><a href="#바보같은-미들웨어-처리" class="headerlink" title="바보같은 미들웨어 처리"></a>바보같은 미들웨어 처리</h3><p>지금 만드는 서비스는 기본적으로 로그인이 되어 있어야 동작한다. 그래서 모든 라우터에는</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.session.user) &#123;</span><br><span class="line">  <span class="comment">// 로그인이 되어 있을 때</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 로그인으로 넘기기</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 로그인 확인 로직이 기본적으로 처음에 들어간다. 사실 <code>checkLogined</code> 함수를 따로 만들어서 미들웨어로 <code>next()</code> 처리만 해주면 똑같은 코드를 복사해서 쓰는 어리석은 짓은 하지 않아도 됐었다.</p><h3 id="레이아웃이-없는-뷰"><a href="#레이아웃이-없는-뷰" class="headerlink" title="레이아웃이 없는 뷰"></a>레이아웃이 없는 뷰</h3><p>프론트엔드 단에서는 <code>ejs</code> 템플릿 엔진을 사용하고 있는데 별도의 레이아웃을 사용하지 않아서 내비게이션 바같은 상단에 고정에 들어가는 항목들이 모든 html 파일에 포함되어 있다. 당연히 내비게이션 바의 코드를 수정하려면 모든 html을 수정해야 한다. 레이아웃 뷰를 도입했다면 이런 비효율적인 행위를 하지 않아도 됐었다.</p><h2 id="리팩토링-계획"><a href="#리팩토링-계획" class="headerlink" title="리팩토링 계획"></a>리팩토링 계획</h2><p>생각보다 리팩토링할 내용이 너무 많다. 위에서 나온 4가지 큰 문제를 수정할 계획인데, 일단 서버 사이드의 코드부터 뜯어 고치고 프론트 사이드에 레이아웃을 적용할 생각이다.</p><ol><li>app.js, server.js 분리, class화</li><li>미들웨어 처리</li><li>라우터에 MVC 패턴 도입, REST API 준수</li><li>짜잘한 코드 수정 (함수 세분화)</li><li>레이아웃 뷰 사용하기</li></ol><p>위 순서대로 차근차근 리팩토링을 할 계획이다. 이번 졸업작품에서 제대로 된 코드를 작성한다면 다음 프로젝트에서는 이런 번거로운 리팩토링은 하지 않아도 될 기대를 한다. 물론 완벽한 리팩토링이란 것은 없지만, 현재의 코드에 안주하는 개발자는 발전 가능성이 없다는 것을 잘 알고 있기에 더 완벽한 코드를 지향하려 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;추석-기념-Node-js-심화-공부&quot;&gt;&lt;a href=&quot;#추석-기념-Node-js-심화-공부&quot; class=&quot;headerlink&quot; title=&quot;추석 기념(?) Node.js 심화 공부&quot;&gt;&lt;/a&gt;추석 기념(?) Node.js 심화 공부&lt;/h2</summary>
      
    
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/categories/nodejs/"/>
    
    
    <category term="capstone design" scheme="https://zinirun.github.io/tags/capstone-design/"/>
    
    <category term="homes" scheme="https://zinirun.github.io/tags/homes/"/>
    
    <category term="nodejs" scheme="https://zinirun.github.io/tags/nodejs/"/>
    
    <category term="express" scheme="https://zinirun.github.io/tags/express/"/>
    
    <category term="refactoring" scheme="https://zinirun.github.io/tags/refactoring/"/>
    
  </entry>
  
  <entry>
    <title>search-algorithm-1</title>
    <link href="https://zinirun.github.io/2020/10/01/search-algorithm-1/"/>
    <id>https://zinirun.github.io/2020/10/01/search-algorithm-1/</id>
    <published>2020-10-01T10:17:00.000Z</published>
    <updated>2020-10-21T05:19:35.634Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://m.blog.naver.com/ndb796/220578642298">좋은 자료</a>가 있어서 공유한다.</p><p>​1. Greedy Best-First Search<br>2. A* Search<br>3. Memory-Bounded Heuristic Search</p><p>이 중에서 가장 유용해서 실제로 매우 많이 사용되고, 중요한 것이 바로 A* Search입니다.</p><p>솔직히 말씀드리자면 공부할 시간이 없으신 분들은 A* Search만 알고 넘어가도 괜찮을 것 같습니다.</p><p>또한 한가지 더 알고 계시면 좋은 점은 바로 이 모든 Heuristic Search 알고리즘은 ‘길 찾기 알고리즘’으로 많이 사용된다는 것입니다.</p><p>다음 지도를 이번 강좌에서도 사용하겠습니다.</p><ol><li>Greedy Best-First Search</li></ol><p>Greedy는 ‘탐욕스러운’이라는 의미를 가지고 있습니다.</p><p>어떻게 보면 단순하다는 의미를 내포하고 있다고 봐도 됩니다.</p><p>여기서는 평가 함수를 오직 휴리스틱 함수로만 구성합니다.</p><p>즉, F(n) = H(n)입니다.</p><p>여기서 이 H(n)를 어떻게 설정하냐에 따라서 알고리즘의 질이 바뀌는데요.</p><p>흔히 길찾기에서는 이 H(n)를 현재 노드와 목표 노드 사이의 직선 거리로 확인합니다.</p><p>즉, 이 Heuristic Search 알고리즘들과 기존의 Blind Search의</p><p>다른 점은 바로 목표 노드의 위치를 알 고 있다는 사실입니다.</p><p>이 목표 노드의 위치를 알고 있다는 사실은 바로 경험적 근거가 되겠지요?</p><p>그 경험적 근거를 바로 문자 그대로 Heuristic(경험적인)으로 받아들이시면 됩니다.</p><p>그리고 쉽게 이 Heuristic Search 알고리즘의 예시들은 ‘길찾기’라고 생각하고 학습하시면 됩니다.</p><p>또한 실제로 아주 많은 장애물을 효과적으로 건너가서 길을 찾는 프로그램들이</p><p>사용하는 알고리즘이 바로 Heuristic Search 알고리즘이기 때문입니다.</p><p>직선 거리 Straight-Line-Distance(SLD)가 휴리스틱을 결정한다고 하였으면</p><p>실제로 Arad라는 도시에서 Bucharest라는 도시로 이동하는 과정을 보겠습니다.</p><p>위 사진은 각각의 도시에서 Bucharest로 이르는 직선 거리를 보여줍니다.</p><p>이를 통해서 Tree-Based Search를 하면 다음과 같습니다.</p><p>아주 직관적인 그림이기 때문에 이해하시기 쉬울 것입니다.</p><p>다만 여기서 고려할 점은 Arad에서 Sibiu 노드를 확장했을 때 Child Node로 Arad가 또 있는 것을 볼 수 있습니다.</p><p>만약에 여기서 다시 Arad로 들어가는 경우가 생긴다면 아주 충격적인 결과가 벌어지겠죠. 무한 반복입니다.</p><p>그렇기 때문에 Node를 Expand할 때 자신의 조상 노드들을 확인해서 이미 나온 Node라면 Discarding 해주면 됩니다.</p><p>● Evaluation</p><p>Complete : No<br>Optimal : No<br>Time &amp; Space Complexity : O(b^m)</p><p>But, 휴리스틱 함수를 잘만 짤 수 있다면 이 복잡도를 줄여나갈 수 있습니다.</p><p>또한 Graph Search에 근거한다면 Search Space가 유한한 경우에 한정하여</p><p>Complete하다는 결과를 낼 수 있습니다. 또한 최적은 아니더라도 Solution을 찾을 수 있겠죠.</p><ol><li>A* Search</li></ol><p>Best-First Search 중에서 가장 잘 알려진 Search 방법인 이 A* Search는 H(n)뿐 아니라 G(n)도 사용합니다.</p><p>즉, F(n) = G(n) + H(n)이라고 할 수 있습니다. 다만 여기서 G(n)가 의미하는 바는 바로 Start Node에서</p><p>현재까지 걸린 Path Cost가 되겠습니다. 또한 H(n)는 현재 State에서 Goal State까지의 가장 빠른 길입니다.</p><p>따라서 이 F(n)는 n을 통한 Solution 중 가장 적은 비용을 추정하는 방법이라고 할 수 있습니다.</p><p>결과적으로 이 A* Search는 Optimal하고 Complete합니다.</p><p>이 알고리즘 자체는 Uniform-Cost Search와 큰 차이가 없습니다.</p><p>다만 A*에서는 G대신 G + H를 사용할 뿐이지요.</p><p>따라서 가장 중요한 것은 당연히 H(n) 함수입니다.</p><p>정확히 어떤 휴리스틱을 사용할 것이냐가 관건이죠.</p><p>Goal State를 아주 최적의 해를 통해서 만족시키는 것이 목표이다.</p><p>결론으로,</p><p>f(n)은 n을 통한 solution 중 가장 적은 비용을 추정하는 방법이다. 결과적으로 A* 알고리즘은 Optimal하고 Complete하다고 볼 수 있다. 최적의 경로를 찾기 위해 필요한 것은 당연히 h(n)이다. h(n)이 0이라면 무한 루프에 빠지는 경우가 생길 수 있다.<br>h(n)을 사용하여 정확히 어떤 휴리스틱을 사용할 것인지 정하고 탐색을 진행하는 것이 알고리즘의 최적의 경로를 찾아낼 수 있는 방법이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://m.blog.naver.com/ndb796/220578642298&quot;&gt;좋은 자료&lt;/a&gt;가 있어서 공유한다.&lt;/p&gt;
&lt;p&gt;​1. Greedy Best-First Search&lt;br&gt;2. A* Search&lt;br&gt;3. Mem</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>졸업작품을 하면서 - 첫번째 회고</title>
    <link href="https://zinirun.github.io/2020/09/28/capstone-design-review-1/"/>
    <id>https://zinirun.github.io/2020/09/28/capstone-design-review-1/</id>
    <published>2020-09-28T00:36:40.000Z</published>
    <updated>2020-09-28T06:03:12.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="졸업작품-팀-프로젝트-Homes의-4주차까지"><a href="#졸업작품-팀-프로젝트-Homes의-4주차까지" class="headerlink" title="졸업작품 팀 프로젝트, Homes의 4주차까지"></a>졸업작품 팀 프로젝트, Homes의 4주차까지</h1><p>첫 졸업작품에 대한 이야기를 적어보려 한다. 끝나고 한번에 적을까 했는데, 소중한 기억들이 사라질까 싶어 생각이 날 때 마다 회고를 써볼까 한다. 프로젝트는 올해 12월까지 진행하고, 지금 4분의 1정도 왔다.</p><h2 id="다르게-살아온-4명과-프로젝트를-한다는-것"><a href="#다르게-살아온-4명과-프로젝트를-한다는-것" class="headerlink" title="다르게 살아온 4명과 프로젝트를 한다는 것"></a>다르게 살아온 4명과 프로젝트를 한다는 것</h2><p>우리 학교는 보통 4학년 1학기, 2학기에 캡스톤 디자인(졸업작품) 과목이 있다. 나는 3학년 2학기이지만 마지막 학기에는 실무에서 일하고 싶어서 미리 듣기로 했다.</p><p>2명과 협업은 해봤지만 4명과 한 학기동안 한 목표를 가지고 프로젝트를 하는 것은 처음이다. 나와 같은 16학번 3명과 15학번 1명으로 뭉쳤고, 당연히 각자가 가진 개발 지식이나 경험이 다르다.</p><p>팀 이름은 팀원들이 각각 서울, 강원도 홍천, 대구, 포항에서 온 꼭짓점을 이으면 사각형이 되고, 네모난 세상을 둥글게 바꾸자는 의미에서 “네모난 형제들”로 지었다.</p><h2 id="역할-분담하기"><a href="#역할-분담하기" class="headerlink" title="역할 분담하기"></a>역할 분담하기</h2><p><img src="http://file3.instiz.net/data/cached_img/upload/2018/03/27/22/714ab1cb590abab490b0c15ad6d6e169.jpg"></p><p>우리는 침팬지에 뒤쳐질 수는 없었다. 각자 할 수 있는 위치에서 적절한 역할 분담이 필요했다.</p><p>우선 팀원들의 개발 지식을 간략하게 소개하자면,</p><ul><li>나: 프론트엔드, 벡엔드, 서버 인프라에 대한 프로젝트 경력이 있음</li><li>팀원 A: 웹 공부를 시작한지 얼마 되지 않음</li><li>팀원 B: 생*코딩에서 노드 클론 코딩 경험, 프론트, 서버에 대한 지식은 전무</li><li>팀원 C: 웹에 대한 지식 전무, SQLD 공부로 데이터베이스나 SQL문은 짤 수 있음</li></ul><p>모두가 참여할 수 있는 역할 분담의 방향을 잡다가, 하이브리드 앱으로 결정했다. 웹은 3명이 어떻게 하다보면 할 수 있겠다 싶었다. 나는 프로젝트 총괄, <code>팀원 A</code>는 프론트엔드, <code>팀원 B</code>는 벡엔드, 데이터베이스는 <code>팀원 C</code>에게 맡기면 될 것 같았다. 팀 리더는 하이브리드 앱을 만들어 봤고 장기간의 프로젝트에 자신이 있는 내가 하기로 했다.</p><h2 id="프로젝트-구상하기"><a href="#프로젝트-구상하기" class="headerlink" title="프로젝트 구상하기"></a>프로젝트 구상하기</h2><p>이제 뭘 만들까 고민했다. 구체적인 목표만 있다면 어떻게든 구현하는 것은 문제가 되지 않다고 지금까지 생각해왔기에 각자가 생각해 본 아이디어를 제시했다. “오 이거 괜찮다”고 생각한 아이디어는 대부분 시장에 나와 있다.</p><p>내 주변에서 느낄 수 있는 불편함이 뭐가 있을까 생각하다가 세 들어서 사는 나같은 대학생들이 평소에 느끼는 불편함이 떠올랐다. 거의 대학가의 모든 주택이 그런데, 유지보수가 엉망이다. 모두가 공감했고 어떻게 해소할 수 있을까 고민하다가 지금 진행하는 프로젝트 Homes가 탄생했다.</p><h3 id="애자일-방법론"><a href="#애자일-방법론" class="headerlink" title="애자일 방법론"></a>애자일 방법론</h3><p>구체적인 목표를 정해서 단계별로 하기 보다는 프로젝트의 작은 요소들을 하나하나 모아서 트러블 슈팅하기 위해 애자일 방법론을 추구하기로 했다. 전반적인 프로젝트 목표는 정해져 있지만 처음 생각한 아이디어이므로 중간에 끼워넣거나 빼는 기능들이 많을 것이라고 생각했다.</p><h2 id="협업-환경-만들기"><a href="#협업-환경-만들기" class="headerlink" title="협업 환경 만들기"></a>협업 환경 만들기</h2><p><img src="/images/2020-09-28-10-34-00.png"></p><p>절대 카톡같은 메신저로 협업하는 어리석은 짓은 하지 않기로 했다. 저번 외주를 하면서 느낀 것 중 가장 큰 것이 버전 관리였기 때문이다. 나중에 톡에서 코드를 보면 “이게 뭐더라”고 할 것이 분명하다. 나름 체계적인 협업 환경을 만들려고 노력했다.</p><p>그래서 Github를 코드 저장과 버전 관리에, Notion을 공지사항, 전파사항, 회의 내용 작성에, Google Docs을 발표 문서, PPT 작성에 사용하기로 했다. 깃허브에 익숙하지 않은 사람이 많았고, 노션은 나만 사용해봐서 팀원들에게 내가 아는 선에서 사용법과 기능을 알려주었다.</p><p><img src="/images/2020-09-28-10-53-44.png"></p><p>우여곡절 끝에 협업 환경이 갖춰졌다.</p><h2 id="기술-스택-정하기"><a href="#기술-스택-정하기" class="headerlink" title="기술 스택 정하기"></a>기술 스택 정하기</h2><p>하이브리드 앱은 기본적으로 웹을 기반으로 만들어지기 때문에 벡엔드와 서버 인프라만 구상하면 된다. 프론트엔드는 React, Vue같은 프레임워크 없이 Vanilla Javascript로만 구현하기로 했다.</p><p>백엔드는 나와 <code>팀원 B</code>가 사용해본 Node.js를 쓰기로 했다. 자바스크립트 기반이므로 프론트엔드 담당인 <code>팀원 A</code>도 나중에 공부하다가 합류할 수도 있겠다 싶었다. 서버는 학교에서 NHN Toast 인스턴스를 신청하면 대여해주었고, 마침 나는 학교에서 Toast 서버 스터디를 마쳤기에 AWS 프리티어 인스턴스를 고민하던 나로서는 다행이었다. 모든 서비스를 Docker로 서비스하기로 했다.</p><p>어플리케이션으로 매핑하는 프레임워크는 React Native를 쓰기로 했다. 저번 외주에서와 마찬가지로 React Native와 Expo 툴을 사용하면 웹 앱 만들기가 정말 수월하고 테스트도 쉽다. 어플리케이션에서 푸시 알림 기능은 Firebase Push를 사용하기로 했다.</p><h2 id="배포-테스트-자동화하기"><a href="#배포-테스트-자동화하기" class="headerlink" title="배포(테스트) 자동화하기"></a>배포(테스트) 자동화하기</h2><p>로컬 환경과 실제 배포된 환경은 분명히 다르다. 어플리케이션으로 매핑하는 것은 나중에 하더라도 그 기반이 되는 웹은 안드로이드던 iOS던 완벽에 가까워야 한다. 터미널에서 깃 클론하고, 도커 이미지 만들고, 컨테이너 연결하고 실행하고 이 모든 명령어들을 테스트할 때 마다 타이핑하다가는 어차피 올 터널 증후군이 더 일찍 올 수도 있다.</p><p>이전에도 사용한 배포 자동화 쉘 스크립트를 좀 더 체계적으로 변형하여 사용하기로 했다. <a href="https://zinirun.github.io/2020/09/18/docker-automation-shellscript/">이전 포스트</a>에 관련 내용을 포스팅했다. 이제 개발하고 서버에 배포해서 테스트하고 싶으면 터미널에 <code>./get_git.sh</code>와 <code>./build_n_run.sh</code>만 치면 된다.</p><blockquote><p>이제 팀원들은 본격적으로 코드, 데이터베이스 작성에만 집중할 수 있다.</p></blockquote><h2 id="변수-이름-짓기부터-다른-우리"><a href="#변수-이름-짓기부터-다른-우리" class="headerlink" title="변수 이름 짓기부터 다른 우리"></a>변수 이름 짓기부터 다른 우리</h2><p><img src="/images/2020-09-28-11-17-26.png"></p><p>개발자는 많은 난관에 봉착하는데, 그 중 가장 심각한 난관이 “변수 네이밍”이다. 협업에서 변수 네이밍은 절대적으로 통일되어야 한다. 내 코드를 남이 봐도 이해할 수 있어야 하기 때문이다.</p><h3 id="이름은-길어도-좋다"><a href="#이름은-길어도-좋다" class="headerlink" title="이름은 길어도 좋다"></a>이름은 길어도 좋다</h3><p>우리는 크게 건물주(host), 관리인(manager), 세입자(tenant) 3가지 범주로 나누어 코드를 작성하고 있는데, 한 팀원이 manager를 mgr로, management를 mgmt로 네이밍했다. 변수 작성 방법을 통일하자고 얘기한 찰나에 <code>host_aden.html</code> 파일을 보고 이게 대체 무슨 파일인가 싶어서 물어봤는데 건물주가 자신의 건물을 보는 상세 페이지라고 한다. 그래서 <code>aden</code>이 뭔지 물었더니 구글에 기능 이름을 검색해서 줄인 이름인데 까먹었다고 한다. 앞으로는 변수나 파일 이름을 길게 해도 좋으니 <code>mgr_mgmt</code> 보다는 <code>manager_management</code>로 작성하자고 모두에게 알렸다.</p><h3 id="camelCase-snake-case"><a href="#camelCase-snake-case" class="headerlink" title="camelCase, snake_case"></a>camelCase, snake_case</h3><p><img src="/images/2020-09-28-11-28-20.png"></p><p>사실 카멜 케이스던 스네이크 케이스던 어떤 방법을 사용해도 좋지만 적어도 통일은 필요했다. 이게 혼용되면 가독성에서나 코드 리뷰에서나 최악의 코드가 만들어질 수 있다. <code>팀원 C</code>의 Database 테이블을 생성하는 SQL을 보고, 이 경우도 강조해야겠다 싶어서 다시 모두에게 공지했다. 두 번의 실수는 없기를 바랄 뿐이었다.</p><h3 id="var는-쓰지마"><a href="#var는-쓰지마" class="headerlink" title="var는 쓰지마"></a>var는 쓰지마</h3><p>자바스크립트에서 정말 임시적으로 사용할 것이 아니라면 <code>var</code>로 변수를 선언할 일은 희박하다. 90%의 변수는 <code>const</code>를 써도 되고, 굳이 바뀔 변수라면 <code>let</code>을 사용하면 된다. 같은 이름으로 변수를 재할당하는 실수를 방지하기 위해 팀원들에게 <code>var</code>를 쓸 일은 최대한 줄여달라고 당부했다.</p><h2 id="첫번째-회고를-마치며"><a href="#첫번째-회고를-마치며" class="headerlink" title="첫번째 회고를 마치며,"></a>첫번째 회고를 마치며,</h2><p>4주차까지 프로젝트가 진행되고 있고 전반적인 협업 개발 환경에서 각자의 임무에 어느정도 적응하고 나름 멋진 협업을 하고 있다. 대학교 졸업 작품을 뭐 이렇게까지 하냐는 말도 들었는데, 졸업 작품이라서 더 체계적이고 정확한 방법을 지향하는 것이다. 4년동안 쌓아온 경험을 교수님의 지도 아래 마음껏 표현할 수 있는 중요한 기회를 주먹구구식으로 하기는 싫었다. 그래도 깐깐한 리더의 말에 동감하고 노력해주는 팀원들에게 매주 얘기하지만, 정말 고마울 뿐이다. 최고의 팀 작품이 탄생할 것이라고 믿는다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;졸업작품-팀-프로젝트-Homes의-4주차까지&quot;&gt;&lt;a href=&quot;#졸업작품-팀-프로젝트-Homes의-4주차까지&quot; class=&quot;headerlink&quot; title=&quot;졸업작품 팀 프로젝트, Homes의 4주차까지&quot;&gt;&lt;/a&gt;졸업작품 팀 프로젝트, </summary>
      
    
    
    
    <category term="project" scheme="https://zinirun.github.io/categories/project/"/>
    
    <category term="homes" scheme="https://zinirun.github.io/categories/project/homes/"/>
    
    
    <category term="capstone design" scheme="https://zinirun.github.io/tags/capstone-design/"/>
    
    <category term="homes" scheme="https://zinirun.github.io/tags/homes/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile과 배포 자동화 스크립트 만들기</title>
    <link href="https://zinirun.github.io/2020/09/18/docker-automation-shellscript/"/>
    <id>https://zinirun.github.io/2020/09/18/docker-automation-shellscript/</id>
    <published>2020-09-18T12:51:03.000Z</published>
    <updated>2020-09-18T13:30:48.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="그럴듯한-자동화"><a href="#그럴듯한-자동화" class="headerlink" title="그럴듯한 자동화"></a>그럴듯한 자동화</h2><p>프로젝트를 하다 보면, 깃에서 파일을 수정하고 Docker 이미지를 다시 만들고, 빌드한 이미지로 컨테이너를 실행하여 재배포해야할 때가 많다. 팀 프로젝트를 하면서 원래 있던 자동화 스크립트를 짜집기해서 쓰려다가 이번에 변수를 선언해서 제대로 만들어 놓는게 좋겠다 싶었다.</p><p>실무에서는 Jira, Jenkins 등으로 체계적인 자동화와 버전 관리가 되어있겠지만 팀원이 4명인 프로젝트에서는 이정도면 되겠다고 생각했다.</p><p>현재 프로젝트에 필요한 컨테이너는 DB 컨테이너와 노드 컨테이너이고, docker 안에서 연결되어야 한다. 학교에서 인스턴스를 하나만 주어서, 한 폴더 안에 데이터베이스와 서버 파일이 모두 들어가 있어야 했다. 나는 <code>database-app</code>으로 데이터베이스 파일을 분리했다.</p><h2 id="Database-배포-자동화하기"><a href="#Database-배포-자동화하기" class="headerlink" title="Database 배포 자동화하기"></a>Database 배포 자동화하기</h2><h3 id="MySQL-Dockerfile-만들기"><a href="#MySQL-Dockerfile-만들기" class="headerlink" title="MySQL Dockerfile 만들기"></a>MySQL Dockerfile 만들기</h3><p>같은 디렉토리에 데이터베이스 구축 sql 파일을 넣고, <code>Dockerfile</code>을 작성한다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mysql:<span class="number">5.7</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> &lt;AUTHOR&gt; &lt;github.com/GITHUB-NAME&gt;</span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_DATABASE=&lt;DB-NAME&gt; \</span><br><span class="line">    MYSQL_ROOT_PASSWORD=&lt;DB-PASSWORD&gt;</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./&lt;SQL-FILENAME&gt;.sql /docker-entrypoint-initdb.d/</span></span><br></pre></td></tr></table></figure><h3 id="Shell-Script-만들어서-자동화하기"><a href="#Shell-Script-만들어서-자동화하기" class="headerlink" title="Shell Script 만들어서 자동화하기"></a>Shell Script 만들어서 자동화하기</h3><p>이제 같은 폴더에 스크립트 파일을 작성한다.</p><p><code>build_n_run.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build N Run DB Container</span></span><br><span class="line"><span class="comment"># 2020. 09. 18 Zini</span></span><br><span class="line"></span><br><span class="line">docker_username=<span class="string">&quot;&quot;</span></span><br><span class="line">db_image_name=<span class="string">&quot;&quot;</span></span><br><span class="line">db_container_name=<span class="string">&quot;&quot;</span></span><br><span class="line">db_password=<span class="string">&quot;&quot;</span></span><br><span class="line">version=<span class="string">&quot;&quot;</span></span><br><span class="line">port=3306 <span class="comment"># Default MySQL Port: 3306</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;## Automation docker-database build and run ##&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove container</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Remove previous container...&quot;</span></span><br><span class="line">docker rm -f <span class="variable">$&#123;db_container_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove image</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Remove previous image...&quot;</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;db_image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new-build/re-build docker image</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Build new image...&quot;</span></span><br><span class="line">docker build --tag <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;db_image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run container</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Run container...&quot;</span></span><br><span class="line">docker run -d -p <span class="variable">$&#123;port&#125;</span>:<span class="variable">$&#123;port&#125;</span> -e MYSQL_ROOT_PASSWORD=<span class="variable">$&#123;db_password&#125;</span> --name <span class="variable">$&#123;db_container_name&#125;</span> <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;db_image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span> --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>이전에 컨테이너와 이미지가 있다면 삭제하고 재빌드 후 컨테이너를 실행한다. 이제 이 스크립트로 위에 변수만 바꿔주면서 써먹을 수 있다.</p><h2 id="Node-배포-자동화하기"><a href="#Node-배포-자동화하기" class="headerlink" title="Node 배포 자동화하기"></a>Node 배포 자동화하기</h2><h3 id="Node-js-Dockerfile-만들기"><a href="#Node-js-Dockerfile-만들기" class="headerlink" title="Node.js Dockerfile 만들기"></a>Node.js Dockerfile 만들기</h3><p>이제 프로젝트 최상위 폴더에 서버(노드)에 대한 <code>Dockerfile</code>을 작성한다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g yarn; npm install forever -g;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json /src/package.json</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">cd</span> /src; yarn install;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /src</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> yarn start</span></span><br></pre></td></tr></table></figure><p><code>forever</code>와 <code>yarn</code> 패키지를 먼저 설치하고 패키지를 세팅한다. 예전에는 <code>npm</code>을 썼지만 속도, 성능 면에서 <code>yarn</code>을 사용하려 하고 있다.</p><p><code>package.json</code>의 일부를 보면,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Homes&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Homes App&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;app.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;forever app.js&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;&quot;</span><br><span class="line">  &#125;, ...</span><br></pre></td></tr></table></figure><p>이렇게 <code>start</code>에 <code>forever app.js</code>를 설정해뒀다.</p><h3 id="Shell-Script-만들기"><a href="#Shell-Script-만들기" class="headerlink" title="Shell Script 만들기"></a>Shell Script 만들기</h3><p>같은 최상위 폴더에 <code>build_n_run.sh</code>을 작성한다. 이 스크립트는 미리 만들어둔 데이터베이스 컨테이너와 연결되어 있는 노드 컨테이너 배포를 자동화한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build N Run Container with DB Container</span></span><br><span class="line"><span class="comment"># 2020. 09. 18 Zini</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### You MUST RUN Database Container First ###</span></span><br><span class="line"></span><br><span class="line">docker_username=<span class="string">&quot;&quot;</span></span><br><span class="line">container_name=<span class="string">&quot;&quot;</span></span><br><span class="line">image_name=<span class="string">&quot;&quot;</span></span><br><span class="line">db_container_name=<span class="string">&quot;&quot;</span></span><br><span class="line">version=<span class="string">&quot;&quot;</span></span><br><span class="line">host_port=3000</span><br><span class="line">virtual_port=3000</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;## Automation docker build and run ##&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove container</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Remove previous container...&quot;</span></span><br><span class="line">docker rm -f <span class="variable">$&#123;container_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove image</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Remove previous image...&quot;</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new-build/re-build docker image</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Build new image...&quot;</span></span><br><span class="line">docker build --tag <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run container connected to existing database container</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Run container...&quot;</span></span><br><span class="line">docker run -t -d --name <span class="variable">$&#123;container_name&#125;</span> -p <span class="variable">$&#123;host_port&#125;</span>:<span class="variable">$&#123;virtual_port&#125;</span> --link <span class="variable">$&#123;db_container_name&#125;</span>:db -e DATABASE_HOST=db <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span></span><br></pre></td></tr></table></figure><p>데이터베이스 컨테이너와 연결할 필요가 없을 경우 마지막 <code>docker run</code> 부분만 조금 수정하면 된다. 데이터베이스 컨테이너 자동화와 거의 같은데, 연결하는 부분만 조금 다르다.</p><h2 id="그럴듯한-자동화를-마치며"><a href="#그럴듯한-자동화를-마치며" class="headerlink" title="그럴듯한 자동화를 마치며"></a>그럴듯한 자동화를 마치며</h2><p>직접 작성한 스크립트 파일을 실행하기 위해서는 리눅스에서 실행 권한을 주고 실행해야 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x build_n_run.sh</span><br></pre></td></tr></table></figure><p>두 개의 파일에 모두 실행 권한을 주고 실행하면 된다.</p><p>사실 이 과정도 너무 귀찮아서, git 업데이트와 실행 권한 설정을 모두 하는 쉘 스크립트를 또 작성했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &lt;app-name&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zinirun/&lt;app-name&gt;</span><br><span class="line">chmod +x &lt;app-name&gt;/database-app/build_n_run.sh</span><br><span class="line">chmod +x &lt;app-name&gt;/build_n_run.sh</span><br></pre></td></tr></table></figure><p><em>이제 업데이트할 때도 명령어 칠 생각에 두려워하지 않아도 된다.</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;그럴듯한-자동화&quot;&gt;&lt;a href=&quot;#그럴듯한-자동화&quot; class=&quot;headerlink&quot; title=&quot;그럴듯한 자동화&quot;&gt;&lt;/a&gt;그럴듯한 자동화&lt;/h2&gt;&lt;p&gt;프로젝트를 하다 보면, 깃에서 파일을 수정하고 Docker 이미지를 다시 만들고, </summary>
      
    
    
    
    <category term="cloud" scheme="https://zinirun.github.io/categories/cloud/"/>
    
    <category term="docker" scheme="https://zinirun.github.io/categories/cloud/docker/"/>
    
    
    <category term="docker" scheme="https://zinirun.github.io/tags/docker/"/>
    
    <category term="cloud" scheme="https://zinirun.github.io/tags/cloud/"/>
    
    <category term="linux" scheme="https://zinirun.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>BOJ - 18352 특정 거리의 도시 찾기 (BFS)</title>
    <link href="https://zinirun.github.io/2020/09/18/ps-bfs-boj-18352/"/>
    <id>https://zinirun.github.io/2020/09/18/ps-bfs-boj-18352/</id>
    <published>2020-09-18T07:18:50.000Z</published>
    <updated>2020-09-18T07:27:42.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="특정-거리의-도시-찾기"><a href="#특정-거리의-도시-찾기" class="headerlink" title="특정 거리의 도시 찾기"></a>특정 거리의 도시 찾기</h2><p><a href="https://www.acmicpc.net/problem/18352">문제 Acmicpc</a></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">n,m,k,x=map(int,input().split())</span><br><span class="line">node=[[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(m):</span><br><span class="line">    a,b=map(int,input().split())</span><br><span class="line">    node[a].append(b)</span><br><span class="line"></span><br><span class="line">dist=[<span class="number">-1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">dist[x]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">q=deque([x])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> q:</span><br><span class="line">    now=q.popleft()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node[now]:</span><br><span class="line">        <span class="keyword">if</span> dist[i] == <span class="number">-1</span>:</span><br><span class="line">            dist[i]=dist[now]+<span class="number">1</span></span><br><span class="line">            q.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx,d <span class="keyword">in</span> enumerate(dist):</span><br><span class="line">    <span class="keyword">if</span> d == k:</span><br><span class="line">        print(idx)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p><code>모든 도로의 거리는 1</code>에서 너비 우선 탐색을 사용하는게 쉽겠구나라고 생각할 수 있어야 한다.</p><p>너비 우선 탐색은 기본적으로 큐를 이용하므로 파이썬에서는 <code>deque</code>를 사용한다. 기본 스택으로 선언하고 <code>pop(0)</code>을 사용하면 분명히 시간초과가 난다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dist=[<span class="number">-1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">dist[x]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">q=deque([x])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> q:</span><br><span class="line">    now=q.popleft()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node[now]:</span><br><span class="line">        <span class="keyword">if</span> dist[i] == <span class="number">-1</span>:</span><br><span class="line">            dist[i]=dist[now]+<span class="number">1</span></span><br><span class="line">            q.append(i)</span><br></pre></td></tr></table></figure><p>BFS를 구현한 부분이다. 방문했던 노드인지 확인하고 최단 거리를 저장하기 위해 <code>dist</code> 변수를 <code>-1</code>로 초기화하여 선언한다. 이후 덱에서 탐색할 노드를 <code>popleft()</code>하고, 노드의 각 경로를 <code>dist</code>를 검사하여 방문했던 노드인지 확인한 후, 미방문 노드이면 거리를 설정하고 다시 큐에 넣어준다.</p><p>BFS로 풀면 되겠다는 것을 바로 떠올리면 쉽게 풀 수 있지만, 아직 경로 관련 문제에서 이건 DFS, 저건 BFS라고 확신하기가 어렵다. 더 공부해야겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;특정-거리의-도시-찾기&quot;&gt;&lt;a href=&quot;#특정-거리의-도시-찾기&quot; class=&quot;headerlink&quot; title=&quot;특정 거리의 도시 찾기&quot;&gt;&lt;/a&gt;특정 거리의 도시 찾기&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n</summary>
      
    
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/tags/algorithm/"/>
    
    <category term="ps" scheme="https://zinirun.github.io/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 25 Event Capture, Propagation, Bubbling and Once</title>
    <link href="https://zinirun.github.io/2020/09/15/js-course30-25/"/>
    <id>https://zinirun.github.io/2020/09/15/js-course30-25/</id>
    <published>2020-09-15T12:25:35.000Z</published>
    <updated>2020-09-15T12:40:38.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-25-Event-Capture-Propagation-Bubbling-and-Once"><a href="#Day-25-Event-Capture-Propagation-Bubbling-and-Once" class="headerlink" title="Day 25 - Event Capture, Propagation, Bubbling and Once"></a>Day 25 - Event Capture, Propagation, Bubbling and Once</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/F1anRyL37lE" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 <code>addEventListner</code>로 DOM 객체에 이벤트를 추가할 때 줄 수 있는 옵션들에 대한 것이다.</p><h2 id="Bubbling"><a href="#Bubbling" class="headerlink" title="Bubbling"></a>Bubbling</h2><p>Bubbling에 대한 이해가 필요한데, 특정 DOM 객체에서 이벤트가 발생하면 기본적으로 Bubbling이 발생한다. Bubbling이란 특정 DOM 객체에서만 이벤트가 발생하지 않고 상위 DOM 객체까지도 이벤트가 올라가며 발생하는 것이다.</p><p>간단하게 예시를 들면,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;click&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>여기서 id가 <code>click</code>인 <code>div</code>에 클릭 이벤트를 추가해서 클릭 이벤트가 발생하면 상위 <code>div</code>, <code>body</code>, <code>html</code>까지 타고 올라가며 이벤트가 발생하는 것이다.</p><h2 id="addEventListener에-옵션-걸기"><a href="#addEventListener에-옵션-걸기" class="headerlink" title="addEventListener에 옵션 걸기"></a><code>addEventListener</code>에 옵션 걸기</h2><p><code>addEventListener</code>에서 추가적인 인자로 옵션을 주어 Bubbling 순서를 통제할 수 있다.</p><p>클릭 시 호출할 함수인 <code>logText</code>를 먼저 만들어보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logText</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.classList.value);</span><br><span class="line">  e.stopPropagation(); <span class="comment">// bubbling 금지</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 <code>div</code> 객체에 click 이벤트를 옵션과 함께 추가한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&quot;click&quot;</span>, logText, &#123;</span><br><span class="line">  <span class="comment">// capture: true ==&gt; down-&gt;up을 up-&gt;down으로</span></span><br><span class="line">  capture: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// unbinding: click 이벤트를 한번만 받음</span></span><br><span class="line">  once: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>capture</code> 속성으로 bubbling의 순서를 역으로 바꿀 수 있다. 기본 설정은 <code>false</code>이며, <code>true</code>로 주면 하위에서 상위 객체로 이벤트가 전달되는 것이 반대로 상위에서 하위 객체로 타고 내려간다.</p><p><code>once</code> 속성으로 <code>click</code> 이벤트를 단 한번만 받을 수 있다. 이 속성 <code>true</code>로 주면 해당 DOM 객체에서의 이벤트는 한 번밖에 실행되지 않는다.</p><h2 id="Bubbling-금지시키기"><a href="#Bubbling-금지시키기" class="headerlink" title="Bubbling 금지시키기"></a>Bubbling 금지시키기</h2><p>하위 객체로든, 상위 객체로든 Bubbling이 발생하지 않게 할 수도 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.stopPropagation();</span><br></pre></td></tr></table></figure><p>DOM 객체에 내장된 <code>stopPropagation()</code>을 호출하면 Bubbling이 발생하지 않는다. 앞에서 작성한 <code>logText</code> 함수로 예를 들면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logText</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.classList.value);</span><br><span class="line">  e.stopPropagation(); <span class="comment">// bubbling 금지</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 Bubbling을 통제할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-25-Event-Capture-Propagation-Bubbling-and-Once&quot;&gt;&lt;a href=&quot;#Day-25-Event-Capture-Propagation-Bubbling-and-Once&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 24 Sticky Nav</title>
    <link href="https://zinirun.github.io/2020/09/12/js-course30-24/"/>
    <id>https://zinirun.github.io/2020/09/12/js-course30-24/</id>
    <published>2020-09-12T13:33:57.000Z</published>
    <updated>2020-09-12T14:16:51.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-24-Sticky-Nav"><a href="#Day-24-Sticky-Nav" class="headerlink" title="Day 24 - Sticky Nav"></a>Day 24 - Sticky Nav</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/5FLOBCGH3_U" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 반응형 웹에서 많이 쓰이는 디자인으로, 스크롤할 때 내비게이션 바(메뉴)가 고정되어 내려가고, 로고가 보이는 효과이다.</p><p>이전 과제 중에 <code>scroll</code> 속성을 이용한 과제들이 많았는데, 이번에도 그렇고, 쉬운 편이다.</p><h2 id="CSS-속성-추가하기"><a href="#CSS-속성-추가하기" class="headerlink" title="CSS 속성 추가하기"></a>CSS 속성 추가하기</h2><p>우선 우리가 고정시켜야 하는 내비게이션 바는 <code>&lt;nav&gt;</code>로 감싸져 있다. 특정 시점에서 <code>.fixed-nav</code>라는 class 속성을 추가하면 css 스타일의 변화도 쉽게 끄고 켜는 개념으로 조정할 수 있다.</p><h3 id="상단에-메뉴-고정시키기"><a href="#상단에-메뉴-고정시키기" class="headerlink" title="상단에 메뉴 고정시키기"></a>상단에 메뉴 고정시키기</h3><p>원래의 <code>nav</code> 속성은</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 <code>relative</code> 속성이기 때문에 스크롤을 내리지 않은 상태에서는 그냥 중간에 위치한 메뉴바처럼 생겼다.</p><p>이제 <code>.fixed-nav</code> 속성이 <code>body</code>에 추가된 경우의 속성을 작성하자.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fixed-nav</span> <span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이미 <code>nav</code>는 <code>top: 0</code>이고 <code>fixed</code> 위치 속성으로 바꿔줌으로써 상단에 고정시킬 수 있다.</p><h3 id="로고-보이게-하기"><a href="#로고-보이게-하기" class="headerlink" title="로고 보이게 하기"></a>로고 보이게 하기</h3><p>원래의 로고는</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>max-width</code>가 0으로 설정되어 보이지 않는다. 간단하게 <code>.fixed-nav</code> 속성이 body에 추가됐을 때 위에서 한 것과 똑같이 <code>li.logo</code>의 <code>max-width</code> 속성만 바꾸면 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fixed-nav</span> <span class="selector-tag">li</span><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>transition: all 0.5s;</code>로 설정되었기 때문에 모든 효과들이 보기 좋게 변한다. <em>(스르륵 변화한다)</em></p><h2 id="JS-작성하기"><a href="#JS-작성하기" class="headerlink" title="JS 작성하기"></a>JS 작성하기</h2><p>이번 자바스크립트 작성은 정말 쉽다. <code>window.scrollY</code>로 스크롤 한 Y 좌표 값(높이값)을 구해서 내비게이션 바의 <code>offsetTop</code>과 비교해주고 class 속성을 넣었다 뺐다 하면 끝난다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#main&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> topOfNav = nav.offsetTop;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixNav</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.scrollY &gt; topOfNav) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.paddingTop = nav.offsetHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.add(<span class="string">&quot;fixed-nav&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.paddingTop = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.remove(<span class="string">&quot;fixed-nav&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, fixNav);</span><br></pre></td></tr></table></figure><p><code>paddingTop</code>을 설정하는 이유는 <code>fixed</code>로 속성이 변경될 때 의도하지 않는 여백이 생겨버려 뚝뚝 끊겨버리기 때문이다.</p><p>이제 부드러운 상단 고정 메뉴바가 완성되었다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-24-Sticky-Nav&quot;&gt;&lt;a href=&quot;#Day-24-Sticky-Nav&quot; class=&quot;headerlink&quot; title=&quot;Day 24 - Sticky Nav&quot;&gt;&lt;/a&gt;Day 24 - Sticky Nav&lt;/h2&gt;&lt;div clas</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 23 Speech Synthesis</title>
    <link href="https://zinirun.github.io/2020/09/11/js-course30-23/"/>
    <id>https://zinirun.github.io/2020/09/11/js-course30-23/</id>
    <published>2020-09-11T14:37:29.000Z</published>
    <updated>2020-09-11T14:54:10.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-23-Speech-Synthesis"><a href="#Day-23-Speech-Synthesis" class="headerlink" title="Day 23 - Speech Synthesis"></a>Day 23 - Speech Synthesis</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/saCpKH_xdgs" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>지난 <a href="https://zinirun.github.io/2020/09/07/js-course30-20/">Day 20</a>의 주제가 <strong>STT</strong>(Speech To Text)였다면, 이번 과제의 주제는 **TTS(Text To Speech)**이다. 자바스크립트 자체에서 STT를 지원하듯이 TTS도 브라우저에 내장된 <code>SpeechSynthesis</code>를 사용하면 된다. 사용법은 간단하다.</p><p>먼저 TTS의 정보가 들어간 객체인 <code>msg</code> 를 선언한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="keyword">new</span> SpeechSynthesisUtterance();</span><br></pre></td></tr></table></figure><h2 id="음성의-목록을-나타내는-populateVoices-작성하기"><a href="#음성의-목록을-나타내는-populateVoices-작성하기" class="headerlink" title="음성의 목록을 나타내는 populateVoices() 작성하기"></a>음성의 목록을 나타내는 <code>populateVoices()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">populateVoices</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  voices = <span class="built_in">this</span>.getVoices();</span><br><span class="line">  voicesDropdown.innerHTML = voices</span><br><span class="line">    .filter(<span class="function">(<span class="params">voice</span>) =&gt;</span> voice.lang.includes(<span class="string">&quot;en&quot;</span>))</span><br><span class="line">    .map(</span><br><span class="line">      (voice) =&gt;</span><br><span class="line">        <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;voice.name&#125;</span>&quot;&gt;<span class="subst">$&#123;voice.name&#125;</span> (<span class="subst">$&#123;voice.lang&#125;</span>)&lt;/option&gt;`</span></span><br><span class="line">    )</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>speechSynthesis</code> 객체에서 <code>voicechanged</code> 이벤트가 일어났을 때 이 함수를 실행한다.</p><h2 id="목소리를-설정하는-setVoice-작성하기"><a href="#목소리를-설정하는-setVoice-작성하기" class="headerlink" title="목소리를 설정하는 setVoice() 작성하기"></a>목소리를 설정하는 <code>setVoice()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setVoice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.voice = voices.find(<span class="function">(<span class="params">voice</span>) =&gt;</span> voice.name === <span class="built_in">this</span>.value);</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>음성 목록에 <code>change</code> 이벤트를 목소리를 설정하는 이 함수로 걸어준다. TTS 정보를 관리하는 <code>msg</code> 객체의 <code>voice</code> 값을 바꿔준 후 직접 작성한 <code>toggle()</code> 함수로 목소리를 다시 재생한다.</p><h2 id="음성을-재생하는-toggle-작성하기"><a href="#음성을-재생하는-toggle-작성하기" class="headerlink" title="음성을 재생하는 toggle() 작성하기"></a>음성을 재생하는 <code>toggle()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggle</span>(<span class="params">startOver = true</span>) </span>&#123;</span><br><span class="line">  speechSynthesis.cancel();</span><br><span class="line">  <span class="keyword">if</span> (startOver) &#123;</span><br><span class="line">    speechSynthesis.speak(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>인자로 <code>startOver</code>를 넘기고, 기본 설정 인자인 <code>true</code>인 경우 이전 음성을 취소하고 새로운 음성을 재생하며, <code>false</code>를 인자로 주면 음성만 취소한다.</p><h2 id="다른-설정을-바꿀-수-있는-setOption-작성하기"><a href="#다른-설정을-바꿀-수-있는-setOption-작성하기" class="headerlink" title="다른 설정을 바꿀 수 있는 setOption() 작성하기"></a>다른 설정을 바꿀 수 있는 <code>setOption()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOption</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.value);</span><br><span class="line">  msg[<span class="built_in">this</span>.name] = <span class="built_in">this</span>.value;</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이전 과제에서 많이 보던 옵션 변경 함수인데, <code>input</code> 객체의 <code>name</code>을 변경할 속성의 이름과 일치시키면 <code>input</code> 객체의 <code>value</code>로 별도로 옵션을 구별하여 작성할 필요없이 한번에 사용할 수 있다.</p><p>이제 이 함수들을 이벤트로 걸어준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">speechSynthesis.addEventListener(<span class="string">&quot;voiceschanged&quot;</span>, populateVoices);</span><br><span class="line">voicesDropdown.addEventListener(<span class="string">&quot;change&quot;</span>, setVoice);</span><br><span class="line">options.forEach(<span class="function">(<span class="params">option</span>) =&gt;</span> option.addEventListener(<span class="string">&quot;change&quot;</span>, setOption));</span><br><span class="line">speakButton.addEventListener(<span class="string">&quot;click&quot;</span>, toggle);</span><br><span class="line">stopButton.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> toggle(<span class="literal">false</span>));</span><br><span class="line"><span class="comment">// same with toggle.bind(null, false);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-23-Speech-Synthesis&quot;&gt;&lt;a href=&quot;#Day-23-Speech-Synthesis&quot; class=&quot;headerlink&quot; title=&quot;Day 23 - Speech Synthesis&quot;&gt;&lt;/a&gt;Day 23 - Speech</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 Dev-Matching 2020 웹 프론트엔드 개발자(하반기) 합격</title>
    <link href="https://zinirun.github.io/2020/09/10/js-programmers-matching-2020-review-2/"/>
    <id>https://zinirun.github.io/2020/09/10/js-programmers-matching-2020-review-2/</id>
    <published>2020-09-10T05:08:24.000Z</published>
    <updated>2020-09-10T05:28:24.310Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zinirun.github.io/2020/08/23/js-programmers-matching-2020-review/">이전 후기 포스트</a></p><p><img src="/images/2020-09-10-14-20-21.png"></p><p>프로그래머스 Dev-Matching 2020 웹 프론트엔드 개발자 하반기(제목이 참 길다)에 합격했다. 물론 기업 1차에 붙은 것이라고 하기에도 뭐한게, 희망 기업에 “이력서를 전달할 기회”를 얻었다.</p><p>정말 좋다고 느낀 것은, 과제에 대해 하나하나 시니어 웹 개발자분들이 리뷰를 해준다는 것이다. 좋은 점, 아쉬운 점, 총평 3가지로 내 과제를 평가해준다. 아쉬운 코드라고 총평에는 나와있는데 상위 20%를 받은 것이 약간 아이러니하지만 뿌듯하긴 하다.</p><p>사실 취업에 발등이 떨어져서 이번 테스트를 신청한 것이 아니고, 코드 리뷰도 받고 내 역량도 체크할 겸 마음 편하게 봤는데 뜻밖의 좋은 소식을 받아서 기분이 좋다.</p><p>아쉬운 점 중 가장 반성하는 점 3개를 꼽자면</p><p><img src="/images/2020-09-10-14-25-15.png"></p><p>자바스크립트에서 클린 코드를 작성하려고 열심히 공부하고 있는데 이런 바보같은 짓을 해서 아직 정말 멀었다고 생각했다. 자바스크립트에서의 리팩토링과 디자인 패턴에 대해서 심도있는 공부가 필요할 것 같다.</p><p>아무튼 자신감 10% 정도 충전한 기분이다. 더 열심히 하자.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zinirun.github.io/2020/08/23/js-programmers-matching-2020-review/&quot;&gt;이전 후기 포스트&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-09-10-14-</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 22 Follow Along Link Highlighter</title>
    <link href="https://zinirun.github.io/2020/09/10/js-course30-22/"/>
    <id>https://zinirun.github.io/2020/09/10/js-course30-22/</id>
    <published>2020-09-10T04:34:27.000Z</published>
    <updated>2020-09-10T05:33:00.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-22-Follow-Along-Link-Highlighter"><a href="#Day-22-Follow-Along-Link-Highlighter" class="headerlink" title="Day 22 - Follow Along Link Highlighter"></a>Day 22 - Follow Along Link Highlighter</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/POP_qri7RA8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><img src="/images/2020-09-10-13-36-16.png"></p><p>디자인적으로 잘 갖춰진 웹을 돌아다니다 보면 메뉴의 요소들에 마우스를 이동할 때 <code>hover</code> 효과가 끊어지는 효과가 아닌 부드러운 배경의 이동을 사용하는 경우가 있다.</p><p>이번 과제는 상단 메뉴뿐만 아니라 페이지 전체에서 스크롤을 해도 모든 <code>&lt;a&gt;</code> 태그에 그런 효과를 주며 마우스를 이동할 때 마다 흰 배경이 따라다니게 구현하는 것을 목적으로 한다.</p><h2 id="CSS-이해하기"><a href="#CSS-이해하기" class="headerlink" title="CSS 이해하기"></a>CSS 이해하기</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* highlight는 span 객체 */</span></span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>미리 작성된 css를 보면 <code>absolute</code> 위치 속성과 <code>z-index: -1</code>을 적용했다. 객체의 절대적인 위치 값과 화면의 가로, 세로 값을 이용할 것이기 때문이다. <code>transition: all 0.2s;</code>는 객체에서 css의 변화가 일어날 때 모든 효과 변화에 대해 0.2초 간격의 부드러운 변환을 제공한다.</p><p>사실 이런 것들이 css에서 암기보다는 이해에 가깝다고 생각한다. 외우지 않아도 된다는 말을 많이 하지만, 적어도 이런 효과를 어떤 로직으로 주어야 할 지는 알아야 구글에 뭐라고 검색해야 할 지라도 알기 때문이다.</p><h2 id="Script-작성"><a href="#Script-작성" class="headerlink" title="Script 작성"></a>Script 작성</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> linkCoords = <span class="built_in">this</span>.getBoundingClientRect();</span><br><span class="line">  <span class="built_in">console</span>.log(linkCoords);</span><br><span class="line">  <span class="keyword">const</span> coords = &#123;</span><br><span class="line">    width: linkCoords.width,</span><br><span class="line">    height: linkCoords.height,</span><br><span class="line">    top: linkCoords.top + <span class="built_in">window</span>.scrollY,</span><br><span class="line">    left: linkCoords.left + <span class="built_in">window</span>.scrollX,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  highlight.style.width = <span class="string">`<span class="subst">$&#123;coords.width&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.height = <span class="string">`<span class="subst">$&#123;coords.height&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.transform = <span class="string">`translate(<span class="subst">$&#123;coords.left&#125;</span>px, <span class="subst">$&#123;coords.top&#125;</span>px)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getBoundingClientRect()</code>는 요소의 각종 좌표값이 들어있는 객체를 반환한다. 예를 들어 <code>getBoundingClientRect().top</code>은 Viewport의 시작지점을 기준으로 한 상대좌표 Y 값을 구할 수 있다.</p><p>그런데 이번 과제에서는 스크롤을 내려도 <code>highlight</code> 객체가 정확히 이동해야 하므로 <code>window.scrollX</code>, <code>window.scrollY</code>로 스크롤한 X, Y 값을 가져와서 더해주어야 정확한 요소의 위치에 객체가 이동한다.</p><p>이제 <code>a</code> 태그에 <code>mouseenter</code> 이벤트만 걸어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">triggers.forEach(<span class="function">(<span class="params">a</span>) =&gt;</span> a.addEventListener(<span class="string">&quot;mouseenter&quot;</span>, highlightLink));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-22-Follow-Along-Link-Highlighter&quot;&gt;&lt;a href=&quot;#Day-22-Follow-Along-Link-Highlighter&quot; class=&quot;headerlink&quot; title=&quot;Day 22 - Follow Alon</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 21 Geolocation</title>
    <link href="https://zinirun.github.io/2020/09/08/js-course30-21/"/>
    <id>https://zinirun.github.io/2020/09/08/js-course30-21/</id>
    <published>2020-09-08T07:50:43.000Z</published>
    <updated>2020-09-10T05:32:51.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-21-Geolocation"><a href="#Day-21-Geolocation" class="headerlink" title="Day 21 - Geolocation"></a>Day 21 - Geolocation</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/X7Cbtra0C6I" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 위치 정보를 다룰 수 있는 <code>navigator.geolocation</code>을 사용한다. 그런데 크롬 브라우저에서는 지원하지 않고 사파리에서 디버깅 모드로 속도, 위치를 바꿔가며 실습할 수 있다는데 맥 개발 환경이 없어서 코드만 보고 끝냈다. (내년에 맥북 사야할 이유가 한가지 늘었다)</p><h2 id="navigator-geolocation-watchPosition"><a href="#navigator-geolocation-watchPosition" class="headerlink" title="navigator.geolocation.watchPosition()"></a>navigator.geolocation.watchPosition()</h2><p>나침반인 <code>arrow</code>와 속도계인 <code>speed</code>가 모두 구현되어 있고, 위치 값을 이용하여 이를 조작하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">navigator.geolocation.watchPosition(</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    speed.textContent = data.coords.speed;</span><br><span class="line">    arrow.style.transform = <span class="string">`rotate(<span class="subst">$&#123;data.coords.heading&#125;</span>deg)`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>watchPosition()</code> 메소드를 활용하여 <code>coords.speed</code> 데이터와 <code>coords.heading</code> 데이터로 속도와 방향을 추출할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-21-Geolocation&quot;&gt;&lt;a href=&quot;#Day-21-Geolocation&quot; class=&quot;headerlink&quot; title=&quot;Day 21 - Geolocation&quot;&gt;&lt;/a&gt;Day 21 - Geolocation&lt;/h2&gt;&lt;div </summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 20 Speech Detection</title>
    <link href="https://zinirun.github.io/2020/09/07/js-course30-20/"/>
    <id>https://zinirun.github.io/2020/09/07/js-course30-20/</id>
    <published>2020-09-07T12:34:24.000Z</published>
    <updated>2020-09-07T12:56:12.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-20-Speech-Detection"><a href="#Day-20-Speech-Detection" class="headerlink" title="Day 20 - Speech Detection"></a>Day 20 - Speech Detection</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/0mJC0A72Fnw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 <a href="https://zinirun.github.io/2020/09/06/js-course30-19/">Day 19</a>의 웹캠 사용에 이어 연속으로 신기했는데, 바로 음성 인식이다.</p><p>사용해보니 유튜브 자동 자막처럼 완벽에 가까운 음성 인식은 아니지만 그래도 또박또박 말하면 90% 정도는 알아먹는 것 같다. 이 모듈은 로컬에서 <code>npm</code> 없이 테스트하면 계속 마이크 권한 창이 떠서 사용이 힘들고 Wesbos의 말대로 패키지 설치 후 <code>npm start</code>로 테스트해야 한다.</p><h2 id="window-SpeechRecognition"><a href="#window-SpeechRecognition" class="headerlink" title="window.SpeechRecognition"></a>window.SpeechRecognition</h2><p>음성인식 객체는 Window DOM의 최상단에 위치한다고 한다. 선언해서 사용하는 방법은 매우 간단하다.</p><p>먼저 선언하고, 변수에 음성인식 객체를 할당한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.SpeechRecognition =</span><br><span class="line">  <span class="built_in">window</span>.SpeechRecognition || <span class="built_in">window</span>.webkitSpeechRecognition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recognition = <span class="keyword">new</span> SpeechRecognition();</span><br></pre></td></tr></table></figure><p>그리고 대화가 끝날때까지 한 문장으로 입력받는 속성을 설정하고, 언어를 설정한다. 언어는 한국어 <code>ko-KR</code>을 지원하는 것을 봐서 거의 모든 언어를 지원하는 것 같다. (영어는 <code>en-US</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recognition.interimResults = <span class="literal">true</span>;</span><br><span class="line">recognition.lang = <span class="string">&quot;ko-KR&quot;</span>; <span class="comment">//en-US</span></span><br></pre></td></tr></table></figure><p><img src="/images/2020-09-07-21-43-48.png"></p><p>이제 음성인식된 스크립트를 <code>p</code> 객체를 <code>appendChild()</code>하여 <code>div</code> 객체에 넣어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> words = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.words&quot;</span>);</span><br><span class="line">words.appendChild(p);</span><br></pre></td></tr></table></figure><p><code>p</code> 객체를 먼저 만들어주고 <code>textContent</code>를 음성인식 스크립트로 넣어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>isFinal</code>을 검사하는 이유는 문장이 끝나면 새로운 <code>p</code> 객체를 만들어주어야 계속 <code>p</code>를 추가할 수 있기 때문이다.</p><p>이제 음성 인식을 실행해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recognition.start();</span><br></pre></td></tr></table></figure><p>그런데 위에서 짠 코드까지만 넣으면 한 문장만 입력되고 더 이상 입력되지 않는데, 음성인식이 종료되기 때문에 <code>recognition</code>에 <code>end</code> 이벤트를 걸어주고, 음성인식이 종료되면 다시 <code>recognition.start</code>를 실행하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;end&quot;</span>, recognition.start);</span><br></pre></td></tr></table></figure><h2 id="Full-Script"><a href="#Full-Script" class="headerlink" title="Full Script"></a>Full Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.SpeechRecognition =</span><br><span class="line">  <span class="built_in">window</span>.SpeechRecognition || <span class="built_in">window</span>.webkitSpeechRecognition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recognition = <span class="keyword">new</span> SpeechRecognition();</span><br><span class="line">recognition.interimResults = <span class="literal">true</span>;</span><br><span class="line">recognition.lang = <span class="string">&quot;ko-KR&quot;</span>; <span class="comment">//en-US</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> words = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.words&quot;</span>);</span><br><span class="line">words.appendChild(p);</span><br><span class="line"></span><br><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">recognition.addEventListener(<span class="string">&quot;end&quot;</span>, recognition.start);</span><br><span class="line"></span><br><span class="line">recognition.start();</span><br></pre></td></tr></table></figure><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><p>음성 인식을 활용해서 특정 단어가 포함되었을 때 로직을 추가할 수도 있다. 나는 <code>날씨</code>라는 말이 포함되었을 때 구글 날씨를 띄워봤는데, 작동해보니 매우 잘된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 날씨 추가한 부분</span></span><br><span class="line">  <span class="keyword">if</span> (transcript.includes(<span class="string">&quot;날씨&quot;</span>)) &#123;</span><br><span class="line">    <span class="built_in">window</span>.open(</span><br><span class="line">      <span class="string">&quot;https://www.google.com/search?q=%EB%82%A0%EC%94%A8&amp;oq=%EB%82%A0%EC%94%A8&amp;aqs=chrome..69i57j35i39l2j0j69i61j69i65j69i61l2.1234j0j7&amp;sourceid=chrome&amp;ie=UTF-8&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-20-Speech-Detection&quot;&gt;&lt;a href=&quot;#Day-20-Speech-Detection&quot; class=&quot;headerlink&quot; title=&quot;Day 20 - Speech Detection&quot;&gt;&lt;/a&gt;Day 20 - Speech</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>단국대학교 이러닝 강의 다운로더 제작기 (Chrome Extension)</title>
    <link href="https://zinirun.github.io/2020/09/07/project-dku-lms-downloader/"/>
    <id>https://zinirun.github.io/2020/09/07/project-dku-lms-downloader/</id>
    <published>2020-09-07T05:58:02.000Z</published>
    <updated>2020-09-07T07:20:32.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LMSDownloader-제작기"><a href="#LMSDownloader-제작기" class="headerlink" title="LMSDownloader 제작기"></a>LMSDownloader 제작기</h2><p>우리 학교에서 새로운 이러닝 시스템을 도입했는데, 리액트 구버전을 사용했으나 조잡한 느낌이 없지 않아 있다고 생각했다. 옛날 이러닝은 기존에 쓰던 비디오 다운로더 크롬 확장 프로그램을 통해 강의를 다운받을 수 있었는데, 새로운 이러닝은 강의를 기괴한(?) 방식으로 보여주고 있어서 다른 다운로드 프로그램들이 잡아내지를 못했다.</p><p><img src="/images/2020-09-07-16-10-04.png" alt="capture_program"></p><div style="text-align:center">완성한 프로그램의 디자인.</div><div style="text-align:center">아이콘은 단국대학교 공식 UI에서 가져왔다.</div><blockquote><p>블로그에서는 일부 중요한 코드만 언급하고, 모든 코드는 <a href="https://github.com/zinirun/LMSDownloader">Github</a>에 공개되어 있고, 기여할 수 있다.</p></blockquote><h2 id="로직-구성하기"><a href="#로직-구성하기" class="headerlink" title="로직 구성하기"></a>로직 구성하기</h2><p>사이트 소스를 보니 그럴만도 했다. <code>iframe</code>이 4중으로 되어 있고, 마지막 강의가 들어있는 프레임은 <code>contentDocument()</code> 메소드가 차단되어 있어 가져오지를 못했다.</p><p>조금 더 생각을 바꾸고, 세번째 프레임까지 들어간 다음, 네번째 프레임을 띄워주고 거기서 <code>video</code> 객체의 <code>src</code> 경로를 가져올 수 있겠다 싶었다.</p><h2 id="영상의-경로를-가져올-때-까지"><a href="#영상의-경로를-가져올-때-까지" class="headerlink" title="영상의 경로를 가져올 때 까지"></a>영상의 경로를 가져올 때 까지</h2><p>우선 세번째 프레임까지는 <code>contentDocument</code>를 통해 들어갈 수 있어서 안의 컨텐츠 내용을 가져올 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 첫번째 강의의 경우</span></span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>].src;</span><br><span class="line"><span class="comment">// 두번째 강의의 경우</span></span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>].src;</span><br></pre></td></tr></table></figure><p>코드가 바보같을 수도 있지만 우리 학교 이러닝에만 잘 사용되면 되므로 이 코드가 최적이라고 생각했다.</p><p>프로그램이 거의 완성되고 나서 알게된 건데, 2개 강의를 하루에 올려서 한 페이지에 영상이 2개가 로드되는 경우도 있었다. 그래서 스캔 버튼을 2개로 나누기로 하고 2번째 강의까지 성공적으로 <code>src</code>를 가져올 수 있었다.</p><h2 id="다운로드만-하면-된다"><a href="#다운로드만-하면-된다" class="headerlink" title="다운로드만 하면 된다"></a>다운로드만 하면 된다</h2><p>기본적으로 클라이언트 사이드에서는 로컬이 아닌 주소의 다운로드 요청이 차단되어서 서버 사이드에서의 작업이 요구된다. 하지만 크롬 프로그램이기 때문에 <code>chrome.downloads.download()</code>를 사용할 수 있다는 정보를 찾았고 <code>background.js</code>와 <code>popup.js</code> 두개로 나눠서 작업했다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.sendMessage(&#123;</span><br><span class="line">  action: <span class="string">&quot;download&quot;</span>,</span><br><span class="line">  source: vidUrl[<span class="number">0</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>popup.js</code>에서 위와 같은 메시지를 요청하면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.onMessage.addListener(<span class="function">(<span class="params">request</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.action === <span class="string">&quot;download&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.source.includes(<span class="string">&quot;dankook.commonscdn&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        chrome.downloads.download(&#123;</span><br><span class="line">          url: request.source,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        alert(<span class="string">`오류: <span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">&quot;다운받을 수 있는 강의컨텐츠가 아닙니다😭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>background.js</code>에서는 위와 같이 <code>download</code> 요청인지 검사 후 단국대에서 들어오는 요청인지 검사 후 다운로드를 시작한다. 다양한 경우가 있을 수 있으므로 에러 핸들링에 신경을 썼다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>일주일 중 하루는 내가 원하는 것을 하는 날로 살기로 했는데 5시간동안의 몰두 끝에 그럴듯하게 완성하니 하루를 잘 보낸 것 같다. (5시간 중 2시간은 구글링을 한 것 같다) 학교 사람들이 써준다면 정말 뿌듯할 것 같고, 안 쓰신다 해도 지인들이나 나는 유용하게 쓸 것 같다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LMSDownloader-제작기&quot;&gt;&lt;a href=&quot;#LMSDownloader-제작기&quot; class=&quot;headerlink&quot; title=&quot;LMSDownloader 제작기&quot;&gt;&lt;/a&gt;LMSDownloader 제작기&lt;/h2&gt;&lt;p&gt;우리 학교에서 새로</summary>
      
    
    
    
    <category term="Etc" scheme="https://zinirun.github.io/categories/Etc/"/>
    
    
    <category term="chrome" scheme="https://zinirun.github.io/tags/chrome/"/>
    
    <category term="project" scheme="https://zinirun.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 19 Webcam Fun</title>
    <link href="https://zinirun.github.io/2020/09/06/js-course30-19/"/>
    <id>https://zinirun.github.io/2020/09/06/js-course30-19/</id>
    <published>2020-09-06T05:54:21.000Z</published>
    <updated>2020-09-06T06:19:15.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-19-Webcam-Fun"><a href="#Day-19-Webcam-Fun" class="headerlink" title="Day 19 - Webcam Fun"></a>Day 19 - Webcam Fun</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/ElWFcBlVk-o" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 웹캠을 브라우저에서 사용한다. 프로그래머스에서 온라인 코딩테스트를 볼 때 크롬에서 실시간 웹캠 사용이 되는 것이 신기했는데, 아마 이런 방식을 사용한게 아닐까 싶다.</p><p>웹캠의 사용이 클라이언트만 있어서 되는게 아니고, 서버 관련 모듈을 설치하고 환경을 세팅해야 한다. 하지만 npm 환경을 사용해서 내장된 <code>package.json</code>만으로 <code>npm install</code>을 통해 모든 환경을 한번에 세팅할 수 있었다.</p><h2 id="비디오-가져오기"><a href="#비디오-가져오기" class="headerlink" title="비디오 가져오기"></a>비디오 가져오기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  navigator.mediaDevices</span><br><span class="line">    .getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">localMediaStream</span>) =&gt;</span> &#123;</span><br><span class="line">      video.srcObject = localMediaStream;</span><br><span class="line">      video.play();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`Oh NO!!`</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>캠의 비디오를 가져오는 방법은 <code>navigator.mediaDevices.getUserMedia()</code> 메소드를 사용하면 되므로 간편하다. 그 후 적절한 에러핸들링과 함께 미리 선언해놓은 <code>video</code> 돔 객체의 <code>src</code> 경로에 스트리밍되는 캠 데이터를 넣고 <code>play()</code> 시켜주면 된다.</p><blockquote><p>원래는 <code>video.src = window.URL.createObjectURL(localMediaStream)</code>을 사용했었는데 현재의 브라우저에서는 <code>video.srcObject=localMediaStream</code>으로 사용한다고 한다. 관련 Deprecated 정보는 <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL">Mozilla</a>에서 확인할 수 있다.</p></blockquote><h2 id="캔버스에-비디오-넣기"><a href="#캔버스에-비디오-넣기" class="headerlink" title="캔버스에 비디오 넣기"></a>캔버스에 비디오 넣기</h2><p>캔버스에 비디오를 넣는 이유는 R, G, B 픽셀 값을 조정하는 바(bar)로 비디오에 장난(?)을 치기 위해서인데 굳이 비디오에 효과를 안 줘도 되면 그냥 대충 보고 넘어갔다가 필요할 때 쓰면 될 것 같다. (내가 그렇다)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintToCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = video.videoWidth;</span><br><span class="line">  <span class="keyword">const</span> height = video.videoHeight;</span><br><span class="line">  canvas.width = width;</span><br><span class="line">  canvas.height = height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ctx.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드가 데이터의 픽셀에 대한 접근없이, 순수하게 비디오를 캔버스에 그려넣는 과정이다. 캠마다 너비와 높이가 다르므로 전체화면에서 적절하게 조정하기 위해, 비디오의 너비와 높이를 캔버스에 넣어준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintToCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = video.videoWidth;</span><br><span class="line">  <span class="keyword">const</span> height = video.videoHeight;</span><br><span class="line">  canvas.width = width;</span><br><span class="line">  canvas.height = height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ctx.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="comment">// take the pixels out</span></span><br><span class="line">    <span class="keyword">let</span> pixels = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="comment">// mess with them</span></span><br><span class="line">    pixels = redEffect(pixels);</span><br><span class="line"></span><br><span class="line">    pixels = rgbSplit(pixels);</span><br><span class="line">    ctx.globalAlpha = <span class="number">0.8</span>;</span><br><span class="line"></span><br><span class="line">    pixels = greenScreen(pixels);</span><br><span class="line">    <span class="comment">// put them back</span></span><br><span class="line">    ctx.putImageData(pixels, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드가 캔버스의 픽셀을 rgb를 조정하는 함수를 작성하여 다시 그려내는 과정이다. 픽셀을 조정하는 함수는 밑에서 설명하겠다. 이제 이 함수를 <code>video</code> 객체에 이벤트로 걸어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">video.addEventListener(<span class="string">&quot;canplay&quot;</span>, paintToCanvas);</span><br></pre></td></tr></table></figure><p><code>canplay</code> 라는 이벤트 속성이 있는지 몰랐다, 꽤 유용하게 사용할 것 같다.</p><h2 id="비디오-캡쳐하기"><a href="#비디오-캡쳐하기" class="headerlink" title="비디오 캡쳐하기"></a>비디오 캡쳐하기</h2><p>버튼을 누르면 비디오가 캡쳐되고, 미리보기 스냅샷이 화면 아래에 삽입된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takePhoto</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 찰칵 소리 내기</span></span><br><span class="line">  snap.currentTime = <span class="number">0</span>;</span><br><span class="line">  snap.play();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 캔버스의 데이터를 내보내기</span></span><br><span class="line">  <span class="keyword">const</span> data = canvas.toDataURL(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  link.href = data;</span><br><span class="line">  link.setAttribute(<span class="string">&quot;download&quot;</span>, <span class="string">&quot;handsome&quot;</span>);</span><br><span class="line">  link.innerHTML = <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;data&#125;</span>&quot; alt=&quot;Handsome Man&quot; /&gt;`</span>;</span><br><span class="line">  strip.insertBefore(link, strip.firstChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>버튼을 누른 후 화면 밑을 보면</p><p><img src="/images/2020-09-06-15-13-58.png"></p><p>이렇게 스냅샷이 보여지고 클릭하면 다운로드된다. <code>createElement</code>를 써도 되고 <code>innerHTML</code>을 <code>+=</code>로 늘여나가도 상관없을 것 같다.</p><h2 id="픽셀로-장난-치기"><a href="#픽셀로-장난-치기" class="headerlink" title="픽셀로 장난(?)치기"></a>픽셀로 장난(?)치기</h2><p>밑에서부터 나오는 코드들은 솔직히 제대로 보지는 않았다. 내가 이미지 처리에 관심도 없을 뿐더러 비디오 처리시에 필터 효과가 필요하다면 그때 검색해서 쓰면 되기 때문에 굳이 하나하나 파헤치지는 않았다.</p><p>그 전에, 한가지 괜찮다고 생각한 코드는</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.rgb input&quot;</span>).forEach(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">  levels[input.name] = input.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 코드인데, 난 range bar에 이벤트가 걸려있지 않은데 어떻게 값을 실시간으로 바꿀까 생각하다가 코드를 보니 이렇게 비디오가 플레이되고 있을 때 실행되는 함수 내에서 이렇게 값을 받아오고 있었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redEffect</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pixels.data.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">    pixels.data[i + <span class="number">0</span>] = pixels.data[i + <span class="number">0</span>] + <span class="number">200</span>; <span class="comment">// RED</span></span><br><span class="line">    pixels.data[i + <span class="number">1</span>] = pixels.data[i + <span class="number">1</span>] - <span class="number">50</span>; <span class="comment">// GREEN</span></span><br><span class="line">    pixels.data[i + <span class="number">2</span>] = pixels.data[i + <span class="number">2</span>] * <span class="number">0.5</span>; <span class="comment">// Blue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbSplit</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pixels.data.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">    pixels.data[i - <span class="number">150</span>] = pixels.data[i + <span class="number">0</span>]; <span class="comment">// RED</span></span><br><span class="line">    pixels.data[i + <span class="number">500</span>] = pixels.data[i + <span class="number">1</span>]; <span class="comment">// GREEN</span></span><br><span class="line">    pixels.data[i - <span class="number">550</span>] = pixels.data[i + <span class="number">2</span>]; <span class="comment">// Blue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greenScreen</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> levels = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.rgb input&quot;</span>).forEach(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    levels[input.name] = input.value;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pixels.data.length; i = i + <span class="number">4</span>) &#123;</span><br><span class="line">    red = pixels.data[i + <span class="number">0</span>];</span><br><span class="line">    green = pixels.data[i + <span class="number">1</span>];</span><br><span class="line">    blue = pixels.data[i + <span class="number">2</span>];</span><br><span class="line">    alpha = pixels.data[i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      red &gt;= levels.rmin &amp;&amp;</span><br><span class="line">      green &gt;= levels.gmin &amp;&amp;</span><br><span class="line">      blue &gt;= levels.bmin &amp;&amp;</span><br><span class="line">      red &lt;= levels.rmax &amp;&amp;</span><br><span class="line">      green &lt;= levels.gmax &amp;&amp;</span><br><span class="line">      blue &lt;= levels.bmax</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// take it out!</span></span><br><span class="line">      pixels.data[i + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-19-Webcam-Fun&quot;&gt;&lt;a href=&quot;#Day-19-Webcam-Fun&quot; class=&quot;headerlink&quot; title=&quot;Day 19 - Webcam Fun&quot;&gt;&lt;/a&gt;Day 19 - Webcam Fun&lt;/h2&gt;&lt;div clas</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
</feed>
