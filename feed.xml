<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zinirun</title>
  
  <subtitle>tech blog by Zini</subtitle>
  <link href="https://zinirun.github.io/feed.xml" rel="self"/>
  
  <link href="https://zinirun.github.io/"/>
  <updated>2020-10-09T08:14:52.552Z</updated>
  <id>https://zinirun.github.io/</id>
  
  <author>
    <name>zini</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js - HTTPS 서버 구축하기</title>
    <link href="https://zinirun.github.io/2020/10/07/nodejs-https-server/"/>
    <id>https://zinirun.github.io/2020/10/07/nodejs-https-server/</id>
    <published>2020-10-07T06:10:35.000Z</published>
    <updated>2020-10-09T08:14:52.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="왜-굳이-HTTPS"><a href="#왜-굳이-HTTPS" class="headerlink" title="왜 굳이 HTTPS?"></a>왜 굳이 HTTPS?</h2><p>우리가 들어가는 대부분의 사이트는 HTTPS 프로토콜을 지원한다. HTTP 프로토콜은 프로토타입에서만 사용하고 끝내야 한다. 가장 큰 차이점은 SSL 인증서의 유무이다. SSL 인증서는 사용자가 사이트에 제공하는 정보를 암호화한다. HTTP와 HTTPS의 자세한 차이는 <a href="http://blog.wishket.com/http-vs-https-%EC%B0%A8%EC%9D%B4-%EC%95%8C%EB%A9%B4-%EC%82%AC%EC%9D%B4%ED%8A%B8%EC%9D%98-%EB%A0%88%EB%B2%A8%EC%9D%B4-%EB%B3%B4%EC%9D%B8%EB%8B%A4/">여기</a>에 잘 나와있다. 이번에는 노드에서 어떻게 HTTPS 서버를 구축하는지 정리해보려 한다.</p><h2 id="HTTPS-서버-구축하기"><a href="#HTTPS-서버-구축하기" class="headerlink" title="HTTPS 서버 구축하기"></a>HTTPS 서버 구축하기</h2><h3 id="인증서-선택하기-무료-유료"><a href="#인증서-선택하기-무료-유료" class="headerlink" title="인증서 선택하기 (무료/유료)"></a>인증서 선택하기 (무료/유료)</h3><p>기본적으로 SSL 인증서는 유료이다. 하지만 https를 지향하는 기업에서 “https는 필수가 되어야 한다”는 목소리를 모아 [<a href="https://letsencrypt.org/ko/]">https://letsencrypt.org/ko/]</a>(Let’s Encrypt)라는 무료 인증기관을 만들었다.</p><p>그러나 기본적으로 3달 주기로 인증서를 업데이트해줘야 하기 때문에 현재 도메인 서비스를 받고 있는 <a href="namecheap.com">Namecheap</a>에서 꽤 저렴한 SSL 인증서 제품을 팔고 있어서 이를 사서 쓰기로 했다. 1년에 4달러 정도인데, 이는 특정 한 도메인에만 사용할 수 있다. wildcard(*) 서브 도메인을 모두 인증서로 걸고 싶다면 Wildcard 제품을 별도로 구입해야 한다. (이건 비싸다)</p><h3 id="OpenSSL로-키-생성하기"><a href="#OpenSSL로-키-생성하기" class="headerlink" title="OpenSSL로 키 생성하기"></a>OpenSSL로 키 생성하기</h3><p><a href="http://slproweb.com/products/Win32OpenSSL.html">여기</a>에서 OpenSSL 설치 파일을 받아 설치한다. 이후 커맨드 창(터미널)을 관리자 권한으로 실행한다.</p><p>먼저 key를 생성한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out key.pem 2048</span><br></pre></td></tr></table></figure><p>다음으로 csr을 생성한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key key.pem -out csr.pem</span><br></pre></td></tr></table></figure><p>나는 csr을 생성할 때 순서대로 이렇게 입력했고, 참고하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Country Name (국가코드) : KR</span><br><span class="line">State or Province Name (시&#x2F;도) : Seoul</span><br><span class="line">Locality Name (구&#x2F;군) : (Enter로 넘어감)</span><br><span class="line">Organization Name (회사명) : NemoBros</span><br><span class="line">Organizational Unit Name (부서명) : Dev Team</span><br><span class="line">Common Name (인증 받을 도메인 주소) : zini.work</span><br><span class="line">Email Address : email@email.com</span><br><span class="line"></span><br><span class="line">Please enter the following &#39;extra&#39; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password : (Enter로 넘어감)</span><br><span class="line">An optional company name : (Enter로 넘어감)</span><br></pre></td></tr></table></figure><p>이제 이 CSR 파일을 열어서 각자의 도메인 사이트에서 인증서 제품을 구입한 후 CSR 파일의 주석을 제외한 암호화 코드 부분을 넣으면 정상적으로 인증서 파일이 발급된다. 그리고 사이트가 본인의 것이 맞는지 검사하는 절차가 3가지정도 있는데, 마음대로 선택해서 인증을 진행한다.</p><p>(Let’s Encrypt 무료 인증서를 이용하면 스킵해도 된다.)</p><h3 id="Node-js-HTTPS-서버-구축"><a href="#Node-js-HTTPS-서버-구축" class="headerlink" title="Node.js HTTPS 서버 구축"></a>Node.js HTTPS 서버 구축</h3><p>이제 Node.js에서 인증서를 걸어서 https 서버를 구축해보자. http 서버만 정상적으로 구축했다면 어렵지 않다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">require</span>(<span class="string">&#x27;./config/pem_config&#x27;</span>).options;</span><br><span class="line"><span class="keyword">const</span> httpPort = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> httpsPort = <span class="number">443</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTPS 서버</span></span><br><span class="line">https.createServer(options, app).listen(httpsPort, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`HTTPS: Express listening on port <span class="subst">$&#123;httpsPort&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP 서버</span></span><br><span class="line">app.listen(httpPort, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`HTTP: Express listening on port <span class="subst">$&#123;httpPort&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>HTTPS 서버를 구축하는데 HTTP 서버까지 오픈하는 이유는 나중에 설명하겠다.</p><p>다음으로 <code>options</code>에 연결된 파일을 만드는데, pem키에 대한 config를 하드코딩 하는 것보다는 option 파일로 미리 빼서 사용하는 것이 보안적으로나 가독성으로나 낫다. 내 <code>./config/pem_config</code>는 이렇게 작성되어 있는데,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> keys_dir = <span class="string">&quot;config/secure/&quot;</span>; <span class="comment">// 키 파일이 위치</span></span><br><span class="line"><span class="keyword">const</span> ca = fs.readFileSync(keys_dir + <span class="string">&quot;ca.ca-bundle&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> key = fs.readFileSync(keys_dir + <span class="string">&quot;key.pem&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cert = fs.readFileSync(keys_dir + <span class="string">&quot;cert.crt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.options = &#123;</span><br><span class="line">  key,</span><br><span class="line">  cert,</span><br><span class="line">  ca,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이렇게 Let’s Encrypt로 발급한 인증서를 넣던지, 나처럼 기관에서 유료 인증서를 발급받고 다운로드받은 파일을 넣던지 하면 된다. 참고로 <code>keys_dir</code>는 키 파일이 위치한 폴더 경로인데, <code>fs</code>의 <code>readFile</code> 경로는 절대경로가 아님에 주의해서 작성하자.</p><h3 id="HTTPS-리다이렉션"><a href="#HTTPS-리다이렉션" class="headerlink" title="HTTPS 리다이렉션"></a>HTTPS 리다이렉션</h3><p>이제 서버를 열면 HTTPS (443 포트), HTTP (80 포트) 모두에서 접속할 수 있다. 하지만 HTTPS 서버를 구축했는데 사용자가 임의로 HTTP로 프로토콜을 변경해서 들어오면 말짱도루묵이 될 것이다. 이제 HTTP 요청을 HTTPS로 리다이렉션하는 미들웨어만 작성하면 모든 작업이 끝난다.</p><p>나는 express를 class화하여 서버 인스턴스를 열고 있는데, 그렇지 않은 경우에는 앞에 <code>this.</code>만 지우면 된다. 모든 미들웨어의 최상단에 작성해야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.secure) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> to = <span class="string">`https://<span class="subst">$&#123;req.hostname&#125;</span><span class="subst">$&#123;req.url&#125;</span>`</span>;</span><br><span class="line">    res.redirect(to);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>req.secure</code>은 https 요청인지 아닌지를 반환하기에 이를 이용하여 https 리다이렉션을 구현할 수 있다. (구현하는 방법은 이것 말고도 많다)</p><p>우여곡절의 HTTPS 서버 구축이 끝났다. 사이트에 자물쇠 모양이 뜨는 것만으로도 인증서 4천원은 아까워하지 않기로 했다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;왜-굳이-HTTPS&quot;&gt;&lt;a href=&quot;#왜-굳이-HTTPS&quot; class=&quot;headerlink&quot; title=&quot;왜 굳이 HTTPS?&quot;&gt;&lt;/a&gt;왜 굳이 HTTPS?&lt;/h2&gt;&lt;p&gt;우리가 들어가는 대부분의 사이트는 HTTPS 프로토콜을 지원한다.</summary>
      
    
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/categories/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/tags/nodejs/"/>
    
    <category term="express" scheme="https://zinirun.github.io/tags/express/"/>
    
    <category term="https" scheme="https://zinirun.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 심화 공부와 졸업작품 리팩토링 계획</title>
    <link href="https://zinirun.github.io/2020/10/04/capstone-design-review-2/"/>
    <id>https://zinirun.github.io/2020/10/04/capstone-design-review-2/</id>
    <published>2020-10-04T06:58:35.000Z</published>
    <updated>2020-10-04T07:38:22.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="추석-기념-Node-js-심화-공부"><a href="#추석-기념-Node-js-심화-공부" class="headerlink" title="추석 기념(?) Node.js 심화 공부"></a>추석 기념(?) Node.js 심화 공부</h2><p>코로나때문에 추석에 고향을 가지 않았다. 보다 알찬 추석을 위해 그동안 하고 싶었던 졸업작품 리팩토링이 떠올랐다. 무턱대고 하기에는 확신이 없어서, Node.js와 Express 관련 강의를 처음부터 끝까지 동영상을 100개정도 본 것 같다. 아는 것도 많았지만 반성할 점 투성이었다. 지금까지 졸업 작품의 코드가 되게 바보같다는 생각을 했다.</p><h2 id="졸업작품-셀프-코드리뷰-그리고-반성"><a href="#졸업작품-셀프-코드리뷰-그리고-반성" class="headerlink" title="졸업작품 셀프 코드리뷰 그리고 반성"></a>졸업작품 셀프 코드리뷰 그리고 반성</h2><h3 id="REST-API-미준수"><a href="#REST-API-미준수" class="headerlink" title="REST API 미준수"></a>REST API 미준수</h3><p>우선 REST API를 제대로 준수하지 않았다. 예를 들어 회원가입을 굳이 GET 요청은 <code>/register</code>로, POST 요청은 <code>/reg_submit</code>으로 하는 등, CRUD 요청을 한 URL에서 라우터의 속성만 바꿔서 작성하면 될 것을 뒤에 <code>submit</code>이라는 말을 붙여 불필요하게 만들었다는 것이다.</p><h3 id="주먹구구식-app-js"><a href="#주먹구구식-app-js" class="headerlink" title="주먹구구식 app.js"></a>주먹구구식 app.js</h3><p><img src="/images/2020-10-04-16-10-36.png"></p><p>모든 라우터와 익스프레스 설정이 포함된 <code>app.js</code>도 엉망이다. <code>server.js</code>로 분리하여 서버에 대한 설정(미들웨어 등)을 하고 각 대분류에 대한 컨트롤러 파일을 따로 만들었다면 유지보수가 훨씬 수월한 코드가 만들어졌을텐데, 지금의 코드는 주먹구구식이었다. 그리고 서버에 대한 코드를 class화 한다면 인스턴스 관점에서의 서버 접속 관리를 할 수 있다. 구조에 대한 전체적인 수정이 필요하다..</p><h3 id="바보같은-미들웨어-처리"><a href="#바보같은-미들웨어-처리" class="headerlink" title="바보같은 미들웨어 처리"></a>바보같은 미들웨어 처리</h3><p>지금 만드는 서비스는 기본적으로 로그인이 되어 있어야 동작한다. 그래서 모든 라우터에는</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.session.user) &#123;</span><br><span class="line">  <span class="comment">// 로그인이 되어 있을 때</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 로그인으로 넘기기</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 로그인 확인 로직이 기본적으로 처음에 들어간다. 사실 <code>checkLogined</code> 함수를 따로 만들어서 미들웨어로 <code>next()</code> 처리만 해주면 똑같은 코드를 복사해서 쓰는 어리석은 짓은 하지 않아도 됐었다.</p><h3 id="레이아웃이-없는-뷰"><a href="#레이아웃이-없는-뷰" class="headerlink" title="레이아웃이 없는 뷰"></a>레이아웃이 없는 뷰</h3><p>프론트엔드 단에서는 <code>ejs</code> 템플릿 엔진을 사용하고 있는데 별도의 레이아웃을 사용하지 않아서 내비게이션 바같은 상단에 고정에 들어가는 항목들이 모든 html 파일에 포함되어 있다. 당연히 내비게이션 바의 코드를 수정하려면 모든 html을 수정해야 한다. 레이아웃 뷰를 도입했다면 이런 비효율적인 행위를 하지 않아도 됐었다.</p><h2 id="리팩토링-계획"><a href="#리팩토링-계획" class="headerlink" title="리팩토링 계획"></a>리팩토링 계획</h2><p>생각보다 리팩토링할 내용이 너무 많다. 위에서 나온 4가지 큰 문제를 수정할 계획인데, 일단 서버 사이드의 코드부터 뜯어 고치고 프론트 사이드에 레이아웃을 적용할 생각이다.</p><ol><li>app.js, server.js 분리, class화</li><li>미들웨어 처리</li><li>라우터에 MVC 패턴 도입, REST API 준수</li><li>짜잘한 코드 수정 (함수 세분화)</li><li>레이아웃 뷰 사용하기</li></ol><p>위 순서대로 차근차근 리팩토링을 할 계획이다. 이번 졸업작품에서 제대로 된 코드를 작성한다면 다음 프로젝트에서는 이런 번거로운 리팩토링은 하지 않아도 될 기대를 한다. 물론 완벽한 리팩토링이란 것은 없지만, 현재의 코드에 안주하는 개발자는 발전 가능성이 없다는 것을 잘 알고 있기에 더 완벽한 코드를 지향하려 한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;추석-기념-Node-js-심화-공부&quot;&gt;&lt;a href=&quot;#추석-기념-Node-js-심화-공부&quot; class=&quot;headerlink&quot; title=&quot;추석 기념(?) Node.js 심화 공부&quot;&gt;&lt;/a&gt;추석 기념(?) Node.js 심화 공부&lt;/h2</summary>
      
    
    
    
    <category term="nodejs" scheme="https://zinirun.github.io/categories/nodejs/"/>
    
    
    <category term="capstone design" scheme="https://zinirun.github.io/tags/capstone-design/"/>
    
    <category term="homes" scheme="https://zinirun.github.io/tags/homes/"/>
    
    <category term="nodejs" scheme="https://zinirun.github.io/tags/nodejs/"/>
    
    <category term="express" scheme="https://zinirun.github.io/tags/express/"/>
    
    <category term="refactoring" scheme="https://zinirun.github.io/tags/refactoring/"/>
    
  </entry>
  
  <entry>
    <title>졸업작품을 하면서 - 첫번째 회고</title>
    <link href="https://zinirun.github.io/2020/09/28/capstone-design-review-1/"/>
    <id>https://zinirun.github.io/2020/09/28/capstone-design-review-1/</id>
    <published>2020-09-28T00:36:40.000Z</published>
    <updated>2020-09-28T06:03:12.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="졸업작품-팀-프로젝트-Homes의-4주차까지"><a href="#졸업작품-팀-프로젝트-Homes의-4주차까지" class="headerlink" title="졸업작품 팀 프로젝트, Homes의 4주차까지"></a>졸업작품 팀 프로젝트, Homes의 4주차까지</h1><p>첫 졸업작품에 대한 이야기를 적어보려 한다. 끝나고 한번에 적을까 했는데, 소중한 기억들이 사라질까 싶어 생각이 날 때 마다 회고를 써볼까 한다. 프로젝트는 올해 12월까지 진행하고, 지금 4분의 1정도 왔다.</p><h2 id="다르게-살아온-4명과-프로젝트를-한다는-것"><a href="#다르게-살아온-4명과-프로젝트를-한다는-것" class="headerlink" title="다르게 살아온 4명과 프로젝트를 한다는 것"></a>다르게 살아온 4명과 프로젝트를 한다는 것</h2><p>우리 학교는 보통 4학년 1학기, 2학기에 캡스톤 디자인(졸업작품) 과목이 있다. 나는 3학년 2학기이지만 마지막 학기에는 실무에서 일하고 싶어서 미리 듣기로 했다.</p><p>2명과 협업은 해봤지만 4명과 한 학기동안 한 목표를 가지고 프로젝트를 하는 것은 처음이다. 나와 같은 16학번 3명과 15학번 1명으로 뭉쳤고, 당연히 각자가 가진 개발 지식이나 경험이 다르다.</p><p>팀 이름은 팀원들이 각각 서울, 강원도 홍천, 대구, 포항에서 온 꼭짓점을 이으면 사각형이 되고, 네모난 세상을 둥글게 바꾸자는 의미에서 “네모난 형제들”로 지었다.</p><h2 id="역할-분담하기"><a href="#역할-분담하기" class="headerlink" title="역할 분담하기"></a>역할 분담하기</h2><p><img src="http://file3.instiz.net/data/cached_img/upload/2018/03/27/22/714ab1cb590abab490b0c15ad6d6e169.jpg"></p><p>우리는 침팬지에 뒤쳐질 수는 없었다. 각자 할 수 있는 위치에서 적절한 역할 분담이 필요했다.</p><p>우선 팀원들의 개발 지식을 간략하게 소개하자면,</p><ul><li>나: 프론트엔드, 벡엔드, 서버 인프라에 대한 프로젝트 경력이 있음</li><li>팀원 A: 웹 공부를 시작한지 얼마 되지 않음</li><li>팀원 B: 생*코딩에서 노드 클론 코딩 경험, 프론트, 서버에 대한 지식은 전무</li><li>팀원 C: 웹에 대한 지식 전무, SQLD 공부로 데이터베이스나 SQL문은 짤 수 있음</li></ul><p>모두가 참여할 수 있는 역할 분담의 방향을 잡다가, 하이브리드 앱으로 결정했다. 웹은 3명이 어떻게 하다보면 할 수 있겠다 싶었다. 나는 프로젝트 총괄, <code>팀원 A</code>는 프론트엔드, <code>팀원 B</code>는 벡엔드, 데이터베이스는 <code>팀원 C</code>에게 맡기면 될 것 같았다. 팀 리더는 하이브리드 앱을 만들어 봤고 장기간의 프로젝트에 자신이 있는 내가 하기로 했다.</p><h2 id="프로젝트-구상하기"><a href="#프로젝트-구상하기" class="headerlink" title="프로젝트 구상하기"></a>프로젝트 구상하기</h2><p>이제 뭘 만들까 고민했다. 구체적인 목표만 있다면 어떻게든 구현하는 것은 문제가 되지 않다고 지금까지 생각해왔기에 각자가 생각해 본 아이디어를 제시했다. “오 이거 괜찮다”고 생각한 아이디어는 대부분 시장에 나와 있다.</p><p>내 주변에서 느낄 수 있는 불편함이 뭐가 있을까 생각하다가 세 들어서 사는 나같은 대학생들이 평소에 느끼는 불편함이 떠올랐다. 거의 대학가의 모든 주택이 그런데, 유지보수가 엉망이다. 모두가 공감했고 어떻게 해소할 수 있을까 고민하다가 지금 진행하는 프로젝트 Homes가 탄생했다.</p><h3 id="애자일-방법론"><a href="#애자일-방법론" class="headerlink" title="애자일 방법론"></a>애자일 방법론</h3><p>구체적인 목표를 정해서 단계별로 하기 보다는 프로젝트의 작은 요소들을 하나하나 모아서 트러블 슈팅하기 위해 애자일 방법론을 추구하기로 했다. 전반적인 프로젝트 목표는 정해져 있지만 처음 생각한 아이디어이므로 중간에 끼워넣거나 빼는 기능들이 많을 것이라고 생각했다.</p><h2 id="협업-환경-만들기"><a href="#협업-환경-만들기" class="headerlink" title="협업 환경 만들기"></a>협업 환경 만들기</h2><p><img src="/images/2020-09-28-10-34-00.png"></p><p>절대 카톡같은 메신저로 협업하는 어리석은 짓은 하지 않기로 했다. 저번 외주를 하면서 느낀 것 중 가장 큰 것이 버전 관리였기 때문이다. 나중에 톡에서 코드를 보면 “이게 뭐더라”고 할 것이 분명하다. 나름 체계적인 협업 환경을 만들려고 노력했다.</p><p>그래서 Github를 코드 저장과 버전 관리에, Notion을 공지사항, 전파사항, 회의 내용 작성에, Google Docs을 발표 문서, PPT 작성에 사용하기로 했다. 깃허브에 익숙하지 않은 사람이 많았고, 노션은 나만 사용해봐서 팀원들에게 내가 아는 선에서 사용법과 기능을 알려주었다.</p><p><img src="/images/2020-09-28-10-53-44.png"></p><p>우여곡절 끝에 협업 환경이 갖춰졌다.</p><h2 id="기술-스택-정하기"><a href="#기술-스택-정하기" class="headerlink" title="기술 스택 정하기"></a>기술 스택 정하기</h2><p>하이브리드 앱은 기본적으로 웹을 기반으로 만들어지기 때문에 벡엔드와 서버 인프라만 구상하면 된다. 프론트엔드는 React, Vue같은 프레임워크 없이 Vanilla Javascript로만 구현하기로 했다.</p><p>백엔드는 나와 <code>팀원 B</code>가 사용해본 Node.js를 쓰기로 했다. 자바스크립트 기반이므로 프론트엔드 담당인 <code>팀원 A</code>도 나중에 공부하다가 합류할 수도 있겠다 싶었다. 서버는 학교에서 NHN Toast 인스턴스를 신청하면 대여해주었고, 마침 나는 학교에서 Toast 서버 스터디를 마쳤기에 AWS 프리티어 인스턴스를 고민하던 나로서는 다행이었다. 모든 서비스를 Docker로 서비스하기로 했다.</p><p>어플리케이션으로 매핑하는 프레임워크는 React Native를 쓰기로 했다. 저번 외주에서와 마찬가지로 React Native와 Expo 툴을 사용하면 웹 앱 만들기가 정말 수월하고 테스트도 쉽다. 어플리케이션에서 푸시 알림 기능은 Firebase Push를 사용하기로 했다.</p><h2 id="배포-테스트-자동화하기"><a href="#배포-테스트-자동화하기" class="headerlink" title="배포(테스트) 자동화하기"></a>배포(테스트) 자동화하기</h2><p>로컬 환경과 실제 배포된 환경은 분명히 다르다. 어플리케이션으로 매핑하는 것은 나중에 하더라도 그 기반이 되는 웹은 안드로이드던 iOS던 완벽에 가까워야 한다. 터미널에서 깃 클론하고, 도커 이미지 만들고, 컨테이너 연결하고 실행하고 이 모든 명령어들을 테스트할 때 마다 타이핑하다가는 어차피 올 터널 증후군이 더 일찍 올 수도 있다.</p><p>이전에도 사용한 배포 자동화 쉘 스크립트를 좀 더 체계적으로 변형하여 사용하기로 했다. <a href="https://zinirun.github.io/2020/09/18/docker-automation-shellscript/">이전 포스트</a>에 관련 내용을 포스팅했다. 이제 개발하고 서버에 배포해서 테스트하고 싶으면 터미널에 <code>./get_git.sh</code>와 <code>./build_n_run.sh</code>만 치면 된다.</p><blockquote><p>이제 팀원들은 본격적으로 코드, 데이터베이스 작성에만 집중할 수 있다.</p></blockquote><h2 id="변수-이름-짓기부터-다른-우리"><a href="#변수-이름-짓기부터-다른-우리" class="headerlink" title="변수 이름 짓기부터 다른 우리"></a>변수 이름 짓기부터 다른 우리</h2><p><img src="/images/2020-09-28-11-17-26.png"></p><p>개발자는 많은 난관에 봉착하는데, 그 중 가장 심각한 난관이 “변수 네이밍”이다. 협업에서 변수 네이밍은 절대적으로 통일되어야 한다. 내 코드를 남이 봐도 이해할 수 있어야 하기 때문이다.</p><h3 id="이름은-길어도-좋다"><a href="#이름은-길어도-좋다" class="headerlink" title="이름은 길어도 좋다"></a>이름은 길어도 좋다</h3><p>우리는 크게 건물주(host), 관리인(manager), 세입자(tenant) 3가지 범주로 나누어 코드를 작성하고 있는데, 한 팀원이 manager를 mgr로, management를 mgmt로 네이밍했다. 변수 작성 방법을 통일하자고 얘기한 찰나에 <code>host_aden.html</code> 파일을 보고 이게 대체 무슨 파일인가 싶어서 물어봤는데 건물주가 자신의 건물을 보는 상세 페이지라고 한다. 그래서 <code>aden</code>이 뭔지 물었더니 구글에 기능 이름을 검색해서 줄인 이름인데 까먹었다고 한다. 앞으로는 변수나 파일 이름을 길게 해도 좋으니 <code>mgr_mgmt</code> 보다는 <code>manager_management</code>로 작성하자고 모두에게 알렸다.</p><h3 id="camelCase-snake-case"><a href="#camelCase-snake-case" class="headerlink" title="camelCase, snake_case"></a>camelCase, snake_case</h3><p><img src="/images/2020-09-28-11-28-20.png"></p><p>사실 카멜 케이스던 스네이크 케이스던 어떤 방법을 사용해도 좋지만 적어도 통일은 필요했다. 이게 혼용되면 가독성에서나 코드 리뷰에서나 최악의 코드가 만들어질 수 있다. <code>팀원 C</code>의 Database 테이블을 생성하는 SQL을 보고, 이 경우도 강조해야겠다 싶어서 다시 모두에게 공지했다. 두 번의 실수는 없기를 바랄 뿐이었다.</p><h3 id="var는-쓰지마"><a href="#var는-쓰지마" class="headerlink" title="var는 쓰지마"></a>var는 쓰지마</h3><p>자바스크립트에서 정말 임시적으로 사용할 것이 아니라면 <code>var</code>로 변수를 선언할 일은 희박하다. 90%의 변수는 <code>const</code>를 써도 되고, 굳이 바뀔 변수라면 <code>let</code>을 사용하면 된다. 같은 이름으로 변수를 재할당하는 실수를 방지하기 위해 팀원들에게 <code>var</code>를 쓸 일은 최대한 줄여달라고 당부했다.</p><h2 id="첫번째-회고를-마치며"><a href="#첫번째-회고를-마치며" class="headerlink" title="첫번째 회고를 마치며,"></a>첫번째 회고를 마치며,</h2><p>4주차까지 프로젝트가 진행되고 있고 전반적인 협업 개발 환경에서 각자의 임무에 어느정도 적응하고 나름 멋진 협업을 하고 있다. 대학교 졸업 작품을 뭐 이렇게까지 하냐는 말도 들었는데, 졸업 작품이라서 더 체계적이고 정확한 방법을 지향하는 것이다. 4년동안 쌓아온 경험을 교수님의 지도 아래 마음껏 표현할 수 있는 중요한 기회를 주먹구구식으로 하기는 싫었다. 그래도 깐깐한 리더의 말에 동감하고 노력해주는 팀원들에게 매주 얘기하지만, 정말 고마울 뿐이다. 최고의 팀 작품이 탄생할 것이라고 믿는다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;졸업작품-팀-프로젝트-Homes의-4주차까지&quot;&gt;&lt;a href=&quot;#졸업작품-팀-프로젝트-Homes의-4주차까지&quot; class=&quot;headerlink&quot; title=&quot;졸업작품 팀 프로젝트, Homes의 4주차까지&quot;&gt;&lt;/a&gt;졸업작품 팀 프로젝트, </summary>
      
    
    
    
    <category term="project" scheme="https://zinirun.github.io/categories/project/"/>
    
    <category term="homes" scheme="https://zinirun.github.io/categories/project/homes/"/>
    
    
    <category term="capstone design" scheme="https://zinirun.github.io/tags/capstone-design/"/>
    
    <category term="homes" scheme="https://zinirun.github.io/tags/homes/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile과 배포 자동화 스크립트 만들기</title>
    <link href="https://zinirun.github.io/2020/09/18/docker-automation-shellscript/"/>
    <id>https://zinirun.github.io/2020/09/18/docker-automation-shellscript/</id>
    <published>2020-09-18T12:51:03.000Z</published>
    <updated>2020-09-18T13:30:48.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="그럴듯한-자동화"><a href="#그럴듯한-자동화" class="headerlink" title="그럴듯한 자동화"></a>그럴듯한 자동화</h2><p>프로젝트를 하다 보면, 깃에서 파일을 수정하고 Docker 이미지를 다시 만들고, 빌드한 이미지로 컨테이너를 실행하여 재배포해야할 때가 많다. 팀 프로젝트를 하면서 원래 있던 자동화 스크립트를 짜집기해서 쓰려다가 이번에 변수를 선언해서 제대로 만들어 놓는게 좋겠다 싶었다.</p><p>실무에서는 Jira, Jenkins 등으로 체계적인 자동화와 버전 관리가 되어있겠지만 팀원이 4명인 프로젝트에서는 이정도면 되겠다고 생각했다.</p><p>현재 프로젝트에 필요한 컨테이너는 DB 컨테이너와 노드 컨테이너이고, docker 안에서 연결되어야 한다. 학교에서 인스턴스를 하나만 주어서, 한 폴더 안에 데이터베이스와 서버 파일이 모두 들어가 있어야 했다. 나는 <code>database-app</code>으로 데이터베이스 파일을 분리했다.</p><h2 id="Database-배포-자동화하기"><a href="#Database-배포-자동화하기" class="headerlink" title="Database 배포 자동화하기"></a>Database 배포 자동화하기</h2><h3 id="MySQL-Dockerfile-만들기"><a href="#MySQL-Dockerfile-만들기" class="headerlink" title="MySQL Dockerfile 만들기"></a>MySQL Dockerfile 만들기</h3><p>같은 디렉토리에 데이터베이스 구축 sql 파일을 넣고, <code>Dockerfile</code>을 작성한다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mysql:<span class="number">5.7</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> &lt;AUTHOR&gt; &lt;github.com/GITHUB-NAME&gt;</span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_DATABASE=&lt;DB-NAME&gt; \</span><br><span class="line">    MYSQL_ROOT_PASSWORD=&lt;DB-PASSWORD&gt;</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./&lt;SQL-FILENAME&gt;.sql /docker-entrypoint-initdb.d/</span></span><br></pre></td></tr></table></figure><h3 id="Shell-Script-만들어서-자동화하기"><a href="#Shell-Script-만들어서-자동화하기" class="headerlink" title="Shell Script 만들어서 자동화하기"></a>Shell Script 만들어서 자동화하기</h3><p>이제 같은 폴더에 스크립트 파일을 작성한다.</p><p><code>build_n_run.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build N Run DB Container</span></span><br><span class="line"><span class="comment"># 2020. 09. 18 Zini</span></span><br><span class="line"></span><br><span class="line">docker_username=<span class="string">&quot;&quot;</span></span><br><span class="line">db_image_name=<span class="string">&quot;&quot;</span></span><br><span class="line">db_container_name=<span class="string">&quot;&quot;</span></span><br><span class="line">db_password=<span class="string">&quot;&quot;</span></span><br><span class="line">version=<span class="string">&quot;&quot;</span></span><br><span class="line">port=3306 <span class="comment"># Default MySQL Port: 3306</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;## Automation docker-database build and run ##&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove container</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Remove previous container...&quot;</span></span><br><span class="line">docker rm -f <span class="variable">$&#123;db_container_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove image</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Remove previous image...&quot;</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;db_image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new-build/re-build docker image</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Build new image...&quot;</span></span><br><span class="line">docker build --tag <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;db_image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run container</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Run container...&quot;</span></span><br><span class="line">docker run -d -p <span class="variable">$&#123;port&#125;</span>:<span class="variable">$&#123;port&#125;</span> -e MYSQL_ROOT_PASSWORD=<span class="variable">$&#123;db_password&#125;</span> --name <span class="variable">$&#123;db_container_name&#125;</span> <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;db_image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span> --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>이전에 컨테이너와 이미지가 있다면 삭제하고 재빌드 후 컨테이너를 실행한다. 이제 이 스크립트로 위에 변수만 바꿔주면서 써먹을 수 있다.</p><h2 id="Node-배포-자동화하기"><a href="#Node-배포-자동화하기" class="headerlink" title="Node 배포 자동화하기"></a>Node 배포 자동화하기</h2><h3 id="Node-js-Dockerfile-만들기"><a href="#Node-js-Dockerfile-만들기" class="headerlink" title="Node.js Dockerfile 만들기"></a>Node.js Dockerfile 만들기</h3><p>이제 프로젝트 최상위 폴더에 서버(노드)에 대한 <code>Dockerfile</code>을 작성한다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g yarn; npm install forever -g;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json /src/package.json</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">cd</span> /src; yarn install;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /src</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> yarn start</span></span><br></pre></td></tr></table></figure><p><code>forever</code>와 <code>yarn</code> 패키지를 먼저 설치하고 패키지를 세팅한다. 예전에는 <code>npm</code>을 썼지만 속도, 성능 면에서 <code>yarn</code>을 사용하려 하고 있다.</p><p><code>package.json</code>의 일부를 보면,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Homes&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Homes App&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;app.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;forever app.js&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;&quot;</span><br><span class="line">  &#125;, ...</span><br></pre></td></tr></table></figure><p>이렇게 <code>start</code>에 <code>forever app.js</code>를 설정해뒀다.</p><h3 id="Shell-Script-만들기"><a href="#Shell-Script-만들기" class="headerlink" title="Shell Script 만들기"></a>Shell Script 만들기</h3><p>같은 최상위 폴더에 <code>build_n_run.sh</code>을 작성한다. 이 스크립트는 미리 만들어둔 데이터베이스 컨테이너와 연결되어 있는 노드 컨테이너 배포를 자동화한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build N Run Container with DB Container</span></span><br><span class="line"><span class="comment"># 2020. 09. 18 Zini</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### You MUST RUN Database Container First ###</span></span><br><span class="line"></span><br><span class="line">docker_username=<span class="string">&quot;&quot;</span></span><br><span class="line">container_name=<span class="string">&quot;&quot;</span></span><br><span class="line">image_name=<span class="string">&quot;&quot;</span></span><br><span class="line">db_container_name=<span class="string">&quot;&quot;</span></span><br><span class="line">version=<span class="string">&quot;&quot;</span></span><br><span class="line">host_port=3000</span><br><span class="line">virtual_port=3000</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;## Automation docker build and run ##&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove container</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Remove previous container...&quot;</span></span><br><span class="line">docker rm -f <span class="variable">$&#123;container_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove image</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Remove previous image...&quot;</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new-build/re-build docker image</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Build new image...&quot;</span></span><br><span class="line">docker build --tag <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run container connected to existing database container</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=&gt; Run container...&quot;</span></span><br><span class="line">docker run -t -d --name <span class="variable">$&#123;container_name&#125;</span> -p <span class="variable">$&#123;host_port&#125;</span>:<span class="variable">$&#123;virtual_port&#125;</span> --link <span class="variable">$&#123;db_container_name&#125;</span>:db -e DATABASE_HOST=db <span class="variable">$&#123;docker_username&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;version&#125;</span></span><br></pre></td></tr></table></figure><p>데이터베이스 컨테이너와 연결할 필요가 없을 경우 마지막 <code>docker run</code> 부분만 조금 수정하면 된다. 데이터베이스 컨테이너 자동화와 거의 같은데, 연결하는 부분만 조금 다르다.</p><h2 id="그럴듯한-자동화를-마치며"><a href="#그럴듯한-자동화를-마치며" class="headerlink" title="그럴듯한 자동화를 마치며"></a>그럴듯한 자동화를 마치며</h2><p>직접 작성한 스크립트 파일을 실행하기 위해서는 리눅스에서 실행 권한을 주고 실행해야 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x build_n_run.sh</span><br></pre></td></tr></table></figure><p>두 개의 파일에 모두 실행 권한을 주고 실행하면 된다.</p><p>사실 이 과정도 너무 귀찮아서, git 업데이트와 실행 권한 설정을 모두 하는 쉘 스크립트를 또 작성했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &lt;app-name&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zinirun/&lt;app-name&gt;</span><br><span class="line">chmod +x &lt;app-name&gt;/database-app/build_n_run.sh</span><br><span class="line">chmod +x &lt;app-name&gt;/build_n_run.sh</span><br></pre></td></tr></table></figure><p><em>이제 업데이트할 때도 명령어 칠 생각에 두려워하지 않아도 된다.</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;그럴듯한-자동화&quot;&gt;&lt;a href=&quot;#그럴듯한-자동화&quot; class=&quot;headerlink&quot; title=&quot;그럴듯한 자동화&quot;&gt;&lt;/a&gt;그럴듯한 자동화&lt;/h2&gt;&lt;p&gt;프로젝트를 하다 보면, 깃에서 파일을 수정하고 Docker 이미지를 다시 만들고, </summary>
      
    
    
    
    <category term="cloud" scheme="https://zinirun.github.io/categories/cloud/"/>
    
    <category term="docker" scheme="https://zinirun.github.io/categories/cloud/docker/"/>
    
    
    <category term="docker" scheme="https://zinirun.github.io/tags/docker/"/>
    
    <category term="cloud" scheme="https://zinirun.github.io/tags/cloud/"/>
    
    <category term="linux" scheme="https://zinirun.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>BOJ - 18352 특정 거리의 도시 찾기 (BFS)</title>
    <link href="https://zinirun.github.io/2020/09/18/ps-bfs-boj-18352/"/>
    <id>https://zinirun.github.io/2020/09/18/ps-bfs-boj-18352/</id>
    <published>2020-09-18T07:18:50.000Z</published>
    <updated>2020-09-18T07:27:42.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="특정-거리의-도시-찾기"><a href="#특정-거리의-도시-찾기" class="headerlink" title="특정 거리의 도시 찾기"></a>특정 거리의 도시 찾기</h2><p><a href="https://www.acmicpc.net/problem/18352">문제 Acmicpc</a></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">n,m,k,x=map(int,input().split())</span><br><span class="line">node=[[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(m):</span><br><span class="line">    a,b=map(int,input().split())</span><br><span class="line">    node[a].append(b)</span><br><span class="line"></span><br><span class="line">dist=[<span class="number">-1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">dist[x]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">q=deque([x])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> q:</span><br><span class="line">    now=q.popleft()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node[now]:</span><br><span class="line">        <span class="keyword">if</span> dist[i] == <span class="number">-1</span>:</span><br><span class="line">            dist[i]=dist[now]+<span class="number">1</span></span><br><span class="line">            q.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx,d <span class="keyword">in</span> enumerate(dist):</span><br><span class="line">    <span class="keyword">if</span> d == k:</span><br><span class="line">        print(idx)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p><code>모든 도로의 거리는 1</code>에서 너비 우선 탐색을 사용하는게 쉽겠구나라고 생각할 수 있어야 한다.</p><p>너비 우선 탐색은 기본적으로 큐를 이용하므로 파이썬에서는 <code>deque</code>를 사용한다. 기본 스택으로 선언하고 <code>pop(0)</code>을 사용하면 분명히 시간초과가 난다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dist=[<span class="number">-1</span>]*(n+<span class="number">1</span>)</span><br><span class="line">dist[x]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">q=deque([x])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> q:</span><br><span class="line">    now=q.popleft()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node[now]:</span><br><span class="line">        <span class="keyword">if</span> dist[i] == <span class="number">-1</span>:</span><br><span class="line">            dist[i]=dist[now]+<span class="number">1</span></span><br><span class="line">            q.append(i)</span><br></pre></td></tr></table></figure><p>BFS를 구현한 부분이다. 방문했던 노드인지 확인하고 최단 거리를 저장하기 위해 <code>dist</code> 변수를 <code>-1</code>로 초기화하여 선언한다. 이후 덱에서 탐색할 노드를 <code>popleft()</code>하고, 노드의 각 경로를 <code>dist</code>를 검사하여 방문했던 노드인지 확인한 후, 미방문 노드이면 거리를 설정하고 다시 큐에 넣어준다.</p><p>BFS로 풀면 되겠다는 것을 바로 떠올리면 쉽게 풀 수 있지만, 아직 경로 관련 문제에서 이건 DFS, 저건 BFS라고 확신하기가 어렵다. 더 공부해야겠다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;특정-거리의-도시-찾기&quot;&gt;&lt;a href=&quot;#특정-거리의-도시-찾기&quot; class=&quot;headerlink&quot; title=&quot;특정 거리의 도시 찾기&quot;&gt;&lt;/a&gt;특정 거리의 도시 찾기&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n</summary>
      
    
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/tags/algorithm/"/>
    
    <category term="ps" scheme="https://zinirun.github.io/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 25 Event Capture, Propagation, Bubbling and Once</title>
    <link href="https://zinirun.github.io/2020/09/15/js-course30-25/"/>
    <id>https://zinirun.github.io/2020/09/15/js-course30-25/</id>
    <published>2020-09-15T12:25:35.000Z</published>
    <updated>2020-09-15T12:40:38.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-25-Event-Capture-Propagation-Bubbling-and-Once"><a href="#Day-25-Event-Capture-Propagation-Bubbling-and-Once" class="headerlink" title="Day 25 - Event Capture, Propagation, Bubbling and Once"></a>Day 25 - Event Capture, Propagation, Bubbling and Once</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/F1anRyL37lE" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 <code>addEventListner</code>로 DOM 객체에 이벤트를 추가할 때 줄 수 있는 옵션들에 대한 것이다.</p><h2 id="Bubbling"><a href="#Bubbling" class="headerlink" title="Bubbling"></a>Bubbling</h2><p>Bubbling에 대한 이해가 필요한데, 특정 DOM 객체에서 이벤트가 발생하면 기본적으로 Bubbling이 발생한다. Bubbling이란 특정 DOM 객체에서만 이벤트가 발생하지 않고 상위 DOM 객체까지도 이벤트가 올라가며 발생하는 것이다.</p><p>간단하게 예시를 들면,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;click&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>여기서 id가 <code>click</code>인 <code>div</code>에 클릭 이벤트를 추가해서 클릭 이벤트가 발생하면 상위 <code>div</code>, <code>body</code>, <code>html</code>까지 타고 올라가며 이벤트가 발생하는 것이다.</p><h2 id="addEventListener에-옵션-걸기"><a href="#addEventListener에-옵션-걸기" class="headerlink" title="addEventListener에 옵션 걸기"></a><code>addEventListener</code>에 옵션 걸기</h2><p><code>addEventListener</code>에서 추가적인 인자로 옵션을 주어 Bubbling 순서를 통제할 수 있다.</p><p>클릭 시 호출할 함수인 <code>logText</code>를 먼저 만들어보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logText</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.classList.value);</span><br><span class="line">  e.stopPropagation(); <span class="comment">// bubbling 금지</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 <code>div</code> 객체에 click 이벤트를 옵션과 함께 추가한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&quot;click&quot;</span>, logText, &#123;</span><br><span class="line">  <span class="comment">// capture: true ==&gt; down-&gt;up을 up-&gt;down으로</span></span><br><span class="line">  capture: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// unbinding: click 이벤트를 한번만 받음</span></span><br><span class="line">  once: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>capture</code> 속성으로 bubbling의 순서를 역으로 바꿀 수 있다. 기본 설정은 <code>false</code>이며, <code>true</code>로 주면 하위에서 상위 객체로 이벤트가 전달되는 것이 반대로 상위에서 하위 객체로 타고 내려간다.</p><p><code>once</code> 속성으로 <code>click</code> 이벤트를 단 한번만 받을 수 있다. 이 속성 <code>true</code>로 주면 해당 DOM 객체에서의 이벤트는 한 번밖에 실행되지 않는다.</p><h2 id="Bubbling-금지시키기"><a href="#Bubbling-금지시키기" class="headerlink" title="Bubbling 금지시키기"></a>Bubbling 금지시키기</h2><p>하위 객체로든, 상위 객체로든 Bubbling이 발생하지 않게 할 수도 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.stopPropagation();</span><br></pre></td></tr></table></figure><p>DOM 객체에 내장된 <code>stopPropagation()</code>을 호출하면 Bubbling이 발생하지 않는다. 앞에서 작성한 <code>logText</code> 함수로 예를 들면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logText</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.classList.value);</span><br><span class="line">  e.stopPropagation(); <span class="comment">// bubbling 금지</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 Bubbling을 통제할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-25-Event-Capture-Propagation-Bubbling-and-Once&quot;&gt;&lt;a href=&quot;#Day-25-Event-Capture-Propagation-Bubbling-and-Once&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 24 Sticky Nav</title>
    <link href="https://zinirun.github.io/2020/09/12/js-course30-24/"/>
    <id>https://zinirun.github.io/2020/09/12/js-course30-24/</id>
    <published>2020-09-12T13:33:57.000Z</published>
    <updated>2020-09-12T14:16:51.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-24-Sticky-Nav"><a href="#Day-24-Sticky-Nav" class="headerlink" title="Day 24 - Sticky Nav"></a>Day 24 - Sticky Nav</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/5FLOBCGH3_U" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 반응형 웹에서 많이 쓰이는 디자인으로, 스크롤할 때 내비게이션 바(메뉴)가 고정되어 내려가고, 로고가 보이는 효과이다.</p><p>이전 과제 중에 <code>scroll</code> 속성을 이용한 과제들이 많았는데, 이번에도 그렇고, 쉬운 편이다.</p><h2 id="CSS-속성-추가하기"><a href="#CSS-속성-추가하기" class="headerlink" title="CSS 속성 추가하기"></a>CSS 속성 추가하기</h2><p>우선 우리가 고정시켜야 하는 내비게이션 바는 <code>&lt;nav&gt;</code>로 감싸져 있다. 특정 시점에서 <code>.fixed-nav</code>라는 class 속성을 추가하면 css 스타일의 변화도 쉽게 끄고 켜는 개념으로 조정할 수 있다.</p><h3 id="상단에-메뉴-고정시키기"><a href="#상단에-메뉴-고정시키기" class="headerlink" title="상단에 메뉴 고정시키기"></a>상단에 메뉴 고정시키기</h3><p>원래의 <code>nav</code> 속성은</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 <code>relative</code> 속성이기 때문에 스크롤을 내리지 않은 상태에서는 그냥 중간에 위치한 메뉴바처럼 생겼다.</p><p>이제 <code>.fixed-nav</code> 속성이 <code>body</code>에 추가된 경우의 속성을 작성하자.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.fixed-nav</span> <span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이미 <code>nav</code>는 <code>top: 0</code>이고 <code>fixed</code> 위치 속성으로 바꿔줌으로써 상단에 고정시킬 수 있다.</p><h3 id="로고-보이게-하기"><a href="#로고-보이게-하기" class="headerlink" title="로고 보이게 하기"></a>로고 보이게 하기</h3><p>원래의 로고는</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>max-width</code>가 0으로 설정되어 보이지 않는다. 간단하게 <code>.fixed-nav</code> 속성이 body에 추가됐을 때 위에서 한 것과 똑같이 <code>li.logo</code>의 <code>max-width</code> 속성만 바꾸면 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fixed-nav</span> <span class="selector-tag">li</span><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>transition: all 0.5s;</code>로 설정되었기 때문에 모든 효과들이 보기 좋게 변한다. <em>(스르륵 변화한다)</em></p><h2 id="JS-작성하기"><a href="#JS-작성하기" class="headerlink" title="JS 작성하기"></a>JS 작성하기</h2><p>이번 자바스크립트 작성은 정말 쉽다. <code>window.scrollY</code>로 스크롤 한 Y 좌표 값(높이값)을 구해서 내비게이션 바의 <code>offsetTop</code>과 비교해주고 class 속성을 넣었다 뺐다 하면 끝난다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#main&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> topOfNav = nav.offsetTop;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixNav</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.scrollY &gt; topOfNav) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.paddingTop = nav.offsetHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.add(<span class="string">&quot;fixed-nav&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.paddingTop = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.remove(<span class="string">&quot;fixed-nav&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, fixNav);</span><br></pre></td></tr></table></figure><p><code>paddingTop</code>을 설정하는 이유는 <code>fixed</code>로 속성이 변경될 때 의도하지 않는 여백이 생겨버려 뚝뚝 끊겨버리기 때문이다.</p><p>이제 부드러운 상단 고정 메뉴바가 완성되었다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-24-Sticky-Nav&quot;&gt;&lt;a href=&quot;#Day-24-Sticky-Nav&quot; class=&quot;headerlink&quot; title=&quot;Day 24 - Sticky Nav&quot;&gt;&lt;/a&gt;Day 24 - Sticky Nav&lt;/h2&gt;&lt;div clas</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 23 Speech Synthesis</title>
    <link href="https://zinirun.github.io/2020/09/11/js-course30-23/"/>
    <id>https://zinirun.github.io/2020/09/11/js-course30-23/</id>
    <published>2020-09-11T14:37:29.000Z</published>
    <updated>2020-09-11T14:54:10.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-23-Speech-Synthesis"><a href="#Day-23-Speech-Synthesis" class="headerlink" title="Day 23 - Speech Synthesis"></a>Day 23 - Speech Synthesis</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/saCpKH_xdgs" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>지난 <a href="https://zinirun.github.io/2020/09/07/js-course30-20/">Day 20</a>의 주제가 <strong>STT</strong>(Speech To Text)였다면, 이번 과제의 주제는 **TTS(Text To Speech)**이다. 자바스크립트 자체에서 STT를 지원하듯이 TTS도 브라우저에 내장된 <code>SpeechSynthesis</code>를 사용하면 된다. 사용법은 간단하다.</p><p>먼저 TTS의 정보가 들어간 객체인 <code>msg</code> 를 선언한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="keyword">new</span> SpeechSynthesisUtterance();</span><br></pre></td></tr></table></figure><h2 id="음성의-목록을-나타내는-populateVoices-작성하기"><a href="#음성의-목록을-나타내는-populateVoices-작성하기" class="headerlink" title="음성의 목록을 나타내는 populateVoices() 작성하기"></a>음성의 목록을 나타내는 <code>populateVoices()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">populateVoices</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  voices = <span class="built_in">this</span>.getVoices();</span><br><span class="line">  voicesDropdown.innerHTML = voices</span><br><span class="line">    .filter(<span class="function">(<span class="params">voice</span>) =&gt;</span> voice.lang.includes(<span class="string">&quot;en&quot;</span>))</span><br><span class="line">    .map(</span><br><span class="line">      (voice) =&gt;</span><br><span class="line">        <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;voice.name&#125;</span>&quot;&gt;<span class="subst">$&#123;voice.name&#125;</span> (<span class="subst">$&#123;voice.lang&#125;</span>)&lt;/option&gt;`</span></span><br><span class="line">    )</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>speechSynthesis</code> 객체에서 <code>voicechanged</code> 이벤트가 일어났을 때 이 함수를 실행한다.</p><h2 id="목소리를-설정하는-setVoice-작성하기"><a href="#목소리를-설정하는-setVoice-작성하기" class="headerlink" title="목소리를 설정하는 setVoice() 작성하기"></a>목소리를 설정하는 <code>setVoice()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setVoice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.voice = voices.find(<span class="function">(<span class="params">voice</span>) =&gt;</span> voice.name === <span class="built_in">this</span>.value);</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>음성 목록에 <code>change</code> 이벤트를 목소리를 설정하는 이 함수로 걸어준다. TTS 정보를 관리하는 <code>msg</code> 객체의 <code>voice</code> 값을 바꿔준 후 직접 작성한 <code>toggle()</code> 함수로 목소리를 다시 재생한다.</p><h2 id="음성을-재생하는-toggle-작성하기"><a href="#음성을-재생하는-toggle-작성하기" class="headerlink" title="음성을 재생하는 toggle() 작성하기"></a>음성을 재생하는 <code>toggle()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggle</span>(<span class="params">startOver = true</span>) </span>&#123;</span><br><span class="line">  speechSynthesis.cancel();</span><br><span class="line">  <span class="keyword">if</span> (startOver) &#123;</span><br><span class="line">    speechSynthesis.speak(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>인자로 <code>startOver</code>를 넘기고, 기본 설정 인자인 <code>true</code>인 경우 이전 음성을 취소하고 새로운 음성을 재생하며, <code>false</code>를 인자로 주면 음성만 취소한다.</p><h2 id="다른-설정을-바꿀-수-있는-setOption-작성하기"><a href="#다른-설정을-바꿀-수-있는-setOption-작성하기" class="headerlink" title="다른 설정을 바꿀 수 있는 setOption() 작성하기"></a>다른 설정을 바꿀 수 있는 <code>setOption()</code> 작성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOption</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.value);</span><br><span class="line">  msg[<span class="built_in">this</span>.name] = <span class="built_in">this</span>.value;</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이전 과제에서 많이 보던 옵션 변경 함수인데, <code>input</code> 객체의 <code>name</code>을 변경할 속성의 이름과 일치시키면 <code>input</code> 객체의 <code>value</code>로 별도로 옵션을 구별하여 작성할 필요없이 한번에 사용할 수 있다.</p><p>이제 이 함수들을 이벤트로 걸어준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">speechSynthesis.addEventListener(<span class="string">&quot;voiceschanged&quot;</span>, populateVoices);</span><br><span class="line">voicesDropdown.addEventListener(<span class="string">&quot;change&quot;</span>, setVoice);</span><br><span class="line">options.forEach(<span class="function">(<span class="params">option</span>) =&gt;</span> option.addEventListener(<span class="string">&quot;change&quot;</span>, setOption));</span><br><span class="line">speakButton.addEventListener(<span class="string">&quot;click&quot;</span>, toggle);</span><br><span class="line">stopButton.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> toggle(<span class="literal">false</span>));</span><br><span class="line"><span class="comment">// same with toggle.bind(null, false);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-23-Speech-Synthesis&quot;&gt;&lt;a href=&quot;#Day-23-Speech-Synthesis&quot; class=&quot;headerlink&quot; title=&quot;Day 23 - Speech Synthesis&quot;&gt;&lt;/a&gt;Day 23 - Speech</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머스 Dev-Matching 2020 웹 프론트엔드 개발자(하반기) 합격</title>
    <link href="https://zinirun.github.io/2020/09/10/js-programmers-matching-2020-review-2/"/>
    <id>https://zinirun.github.io/2020/09/10/js-programmers-matching-2020-review-2/</id>
    <published>2020-09-10T05:08:24.000Z</published>
    <updated>2020-09-10T05:28:24.310Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zinirun.github.io/2020/08/23/js-programmers-matching-2020-review/">이전 후기 포스트</a></p><p><img src="/images/2020-09-10-14-20-21.png"></p><p>프로그래머스 Dev-Matching 2020 웹 프론트엔드 개발자 하반기(제목이 참 길다)에 합격했다. 물론 기업 1차에 붙은 것이라고 하기에도 뭐한게, 희망 기업에 “이력서를 전달할 기회”를 얻었다.</p><p>정말 좋다고 느낀 것은, 과제에 대해 하나하나 시니어 웹 개발자분들이 리뷰를 해준다는 것이다. 좋은 점, 아쉬운 점, 총평 3가지로 내 과제를 평가해준다. 아쉬운 코드라고 총평에는 나와있는데 상위 20%를 받은 것이 약간 아이러니하지만 뿌듯하긴 하다.</p><p>사실 취업에 발등이 떨어져서 이번 테스트를 신청한 것이 아니고, 코드 리뷰도 받고 내 역량도 체크할 겸 마음 편하게 봤는데 뜻밖의 좋은 소식을 받아서 기분이 좋다.</p><p>아쉬운 점 중 가장 반성하는 점 3개를 꼽자면</p><p><img src="/images/2020-09-10-14-25-15.png"></p><p>자바스크립트에서 클린 코드를 작성하려고 열심히 공부하고 있는데 이런 바보같은 짓을 해서 아직 정말 멀었다고 생각했다. 자바스크립트에서의 리팩토링과 디자인 패턴에 대해서 심도있는 공부가 필요할 것 같다.</p><p>아무튼 자신감 10% 정도 충전한 기분이다. 더 열심히 하자.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zinirun.github.io/2020/08/23/js-programmers-matching-2020-review/&quot;&gt;이전 후기 포스트&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-09-10-14-</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 22 Follow Along Link Highlighter</title>
    <link href="https://zinirun.github.io/2020/09/10/js-course30-22/"/>
    <id>https://zinirun.github.io/2020/09/10/js-course30-22/</id>
    <published>2020-09-10T04:34:27.000Z</published>
    <updated>2020-09-10T05:33:00.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-22-Follow-Along-Link-Highlighter"><a href="#Day-22-Follow-Along-Link-Highlighter" class="headerlink" title="Day 22 - Follow Along Link Highlighter"></a>Day 22 - Follow Along Link Highlighter</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/POP_qri7RA8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><img src="/images/2020-09-10-13-36-16.png"></p><p>디자인적으로 잘 갖춰진 웹을 돌아다니다 보면 메뉴의 요소들에 마우스를 이동할 때 <code>hover</code> 효과가 끊어지는 효과가 아닌 부드러운 배경의 이동을 사용하는 경우가 있다.</p><p>이번 과제는 상단 메뉴뿐만 아니라 페이지 전체에서 스크롤을 해도 모든 <code>&lt;a&gt;</code> 태그에 그런 효과를 주며 마우스를 이동할 때 마다 흰 배경이 따라다니게 구현하는 것을 목적으로 한다.</p><h2 id="CSS-이해하기"><a href="#CSS-이해하기" class="headerlink" title="CSS 이해하기"></a>CSS 이해하기</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* highlight는 span 객체 */</span></span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>미리 작성된 css를 보면 <code>absolute</code> 위치 속성과 <code>z-index: -1</code>을 적용했다. 객체의 절대적인 위치 값과 화면의 가로, 세로 값을 이용할 것이기 때문이다. <code>transition: all 0.2s;</code>는 객체에서 css의 변화가 일어날 때 모든 효과 변화에 대해 0.2초 간격의 부드러운 변환을 제공한다.</p><p>사실 이런 것들이 css에서 암기보다는 이해에 가깝다고 생각한다. 외우지 않아도 된다는 말을 많이 하지만, 적어도 이런 효과를 어떤 로직으로 주어야 할 지는 알아야 구글에 뭐라고 검색해야 할 지라도 알기 때문이다.</p><h2 id="Script-작성"><a href="#Script-작성" class="headerlink" title="Script 작성"></a>Script 작성</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> linkCoords = <span class="built_in">this</span>.getBoundingClientRect();</span><br><span class="line">  <span class="built_in">console</span>.log(linkCoords);</span><br><span class="line">  <span class="keyword">const</span> coords = &#123;</span><br><span class="line">    width: linkCoords.width,</span><br><span class="line">    height: linkCoords.height,</span><br><span class="line">    top: linkCoords.top + <span class="built_in">window</span>.scrollY,</span><br><span class="line">    left: linkCoords.left + <span class="built_in">window</span>.scrollX,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  highlight.style.width = <span class="string">`<span class="subst">$&#123;coords.width&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.height = <span class="string">`<span class="subst">$&#123;coords.height&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.transform = <span class="string">`translate(<span class="subst">$&#123;coords.left&#125;</span>px, <span class="subst">$&#123;coords.top&#125;</span>px)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getBoundingClientRect()</code>는 요소의 각종 좌표값이 들어있는 객체를 반환한다. 예를 들어 <code>getBoundingClientRect().top</code>은 Viewport의 시작지점을 기준으로 한 상대좌표 Y 값을 구할 수 있다.</p><p>그런데 이번 과제에서는 스크롤을 내려도 <code>highlight</code> 객체가 정확히 이동해야 하므로 <code>window.scrollX</code>, <code>window.scrollY</code>로 스크롤한 X, Y 값을 가져와서 더해주어야 정확한 요소의 위치에 객체가 이동한다.</p><p>이제 <code>a</code> 태그에 <code>mouseenter</code> 이벤트만 걸어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">triggers.forEach(<span class="function">(<span class="params">a</span>) =&gt;</span> a.addEventListener(<span class="string">&quot;mouseenter&quot;</span>, highlightLink));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-22-Follow-Along-Link-Highlighter&quot;&gt;&lt;a href=&quot;#Day-22-Follow-Along-Link-Highlighter&quot; class=&quot;headerlink&quot; title=&quot;Day 22 - Follow Alon</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 21 Geolocation</title>
    <link href="https://zinirun.github.io/2020/09/08/js-course30-21/"/>
    <id>https://zinirun.github.io/2020/09/08/js-course30-21/</id>
    <published>2020-09-08T07:50:43.000Z</published>
    <updated>2020-09-10T05:32:51.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-21-Geolocation"><a href="#Day-21-Geolocation" class="headerlink" title="Day 21 - Geolocation"></a>Day 21 - Geolocation</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/X7Cbtra0C6I" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 위치 정보를 다룰 수 있는 <code>navigator.geolocation</code>을 사용한다. 그런데 크롬 브라우저에서는 지원하지 않고 사파리에서 디버깅 모드로 속도, 위치를 바꿔가며 실습할 수 있다는데 맥 개발 환경이 없어서 코드만 보고 끝냈다. (내년에 맥북 사야할 이유가 한가지 늘었다)</p><h2 id="navigator-geolocation-watchPosition"><a href="#navigator-geolocation-watchPosition" class="headerlink" title="navigator.geolocation.watchPosition()"></a>navigator.geolocation.watchPosition()</h2><p>나침반인 <code>arrow</code>와 속도계인 <code>speed</code>가 모두 구현되어 있고, 위치 값을 이용하여 이를 조작하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">navigator.geolocation.watchPosition(</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    speed.textContent = data.coords.speed;</span><br><span class="line">    arrow.style.transform = <span class="string">`rotate(<span class="subst">$&#123;data.coords.heading&#125;</span>deg)`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>watchPosition()</code> 메소드를 활용하여 <code>coords.speed</code> 데이터와 <code>coords.heading</code> 데이터로 속도와 방향을 추출할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-21-Geolocation&quot;&gt;&lt;a href=&quot;#Day-21-Geolocation&quot; class=&quot;headerlink&quot; title=&quot;Day 21 - Geolocation&quot;&gt;&lt;/a&gt;Day 21 - Geolocation&lt;/h2&gt;&lt;div </summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 20 Speech Detection</title>
    <link href="https://zinirun.github.io/2020/09/07/js-course30-20/"/>
    <id>https://zinirun.github.io/2020/09/07/js-course30-20/</id>
    <published>2020-09-07T12:34:24.000Z</published>
    <updated>2020-09-07T12:56:12.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-20-Speech-Detection"><a href="#Day-20-Speech-Detection" class="headerlink" title="Day 20 - Speech Detection"></a>Day 20 - Speech Detection</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/0mJC0A72Fnw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 <a href="https://zinirun.github.io/2020/09/06/js-course30-19/">Day 19</a>의 웹캠 사용에 이어 연속으로 신기했는데, 바로 음성 인식이다.</p><p>사용해보니 유튜브 자동 자막처럼 완벽에 가까운 음성 인식은 아니지만 그래도 또박또박 말하면 90% 정도는 알아먹는 것 같다. 이 모듈은 로컬에서 <code>npm</code> 없이 테스트하면 계속 마이크 권한 창이 떠서 사용이 힘들고 Wesbos의 말대로 패키지 설치 후 <code>npm start</code>로 테스트해야 한다.</p><h2 id="window-SpeechRecognition"><a href="#window-SpeechRecognition" class="headerlink" title="window.SpeechRecognition"></a>window.SpeechRecognition</h2><p>음성인식 객체는 Window DOM의 최상단에 위치한다고 한다. 선언해서 사용하는 방법은 매우 간단하다.</p><p>먼저 선언하고, 변수에 음성인식 객체를 할당한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.SpeechRecognition =</span><br><span class="line">  <span class="built_in">window</span>.SpeechRecognition || <span class="built_in">window</span>.webkitSpeechRecognition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recognition = <span class="keyword">new</span> SpeechRecognition();</span><br></pre></td></tr></table></figure><p>그리고 대화가 끝날때까지 한 문장으로 입력받는 속성을 설정하고, 언어를 설정한다. 언어는 한국어 <code>ko-KR</code>을 지원하는 것을 봐서 거의 모든 언어를 지원하는 것 같다. (영어는 <code>en-US</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recognition.interimResults = <span class="literal">true</span>;</span><br><span class="line">recognition.lang = <span class="string">&quot;ko-KR&quot;</span>; <span class="comment">//en-US</span></span><br></pre></td></tr></table></figure><p><img src="/images/2020-09-07-21-43-48.png"></p><p>이제 음성인식된 스크립트를 <code>p</code> 객체를 <code>appendChild()</code>하여 <code>div</code> 객체에 넣어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> words = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.words&quot;</span>);</span><br><span class="line">words.appendChild(p);</span><br></pre></td></tr></table></figure><p><code>p</code> 객체를 먼저 만들어주고 <code>textContent</code>를 음성인식 스크립트로 넣어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>isFinal</code>을 검사하는 이유는 문장이 끝나면 새로운 <code>p</code> 객체를 만들어주어야 계속 <code>p</code>를 추가할 수 있기 때문이다.</p><p>이제 음성 인식을 실행해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recognition.start();</span><br></pre></td></tr></table></figure><p>그런데 위에서 짠 코드까지만 넣으면 한 문장만 입력되고 더 이상 입력되지 않는데, 음성인식이 종료되기 때문에 <code>recognition</code>에 <code>end</code> 이벤트를 걸어주고, 음성인식이 종료되면 다시 <code>recognition.start</code>를 실행하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;end&quot;</span>, recognition.start);</span><br></pre></td></tr></table></figure><h2 id="Full-Script"><a href="#Full-Script" class="headerlink" title="Full Script"></a>Full Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.SpeechRecognition =</span><br><span class="line">  <span class="built_in">window</span>.SpeechRecognition || <span class="built_in">window</span>.webkitSpeechRecognition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recognition = <span class="keyword">new</span> SpeechRecognition();</span><br><span class="line">recognition.interimResults = <span class="literal">true</span>;</span><br><span class="line">recognition.lang = <span class="string">&quot;ko-KR&quot;</span>; <span class="comment">//en-US</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> words = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.words&quot;</span>);</span><br><span class="line">words.appendChild(p);</span><br><span class="line"></span><br><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">recognition.addEventListener(<span class="string">&quot;end&quot;</span>, recognition.start);</span><br><span class="line"></span><br><span class="line">recognition.start();</span><br></pre></td></tr></table></figure><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2><p>음성 인식을 활용해서 특정 단어가 포함되었을 때 로직을 추가할 수도 있다. 나는 <code>날씨</code>라는 말이 포함되었을 때 구글 날씨를 띄워봤는데, 작동해보니 매우 잘된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">recognition.addEventListener(<span class="string">&quot;result&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = [...e.results]</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function">(<span class="params">result</span>) =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 날씨 추가한 부분</span></span><br><span class="line">  <span class="keyword">if</span> (transcript.includes(<span class="string">&quot;날씨&quot;</span>)) &#123;</span><br><span class="line">    <span class="built_in">window</span>.open(</span><br><span class="line">      <span class="string">&quot;https://www.google.com/search?q=%EB%82%A0%EC%94%A8&amp;oq=%EB%82%A0%EC%94%A8&amp;aqs=chrome..69i57j35i39l2j0j69i61j69i65j69i61l2.1234j0j7&amp;sourceid=chrome&amp;ie=UTF-8&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p.textContent = transcript;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">    p = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-20-Speech-Detection&quot;&gt;&lt;a href=&quot;#Day-20-Speech-Detection&quot; class=&quot;headerlink&quot; title=&quot;Day 20 - Speech Detection&quot;&gt;&lt;/a&gt;Day 20 - Speech</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>단국대학교 이러닝 강의 다운로더 제작기 (Chrome Extension)</title>
    <link href="https://zinirun.github.io/2020/09/07/project-dku-lms-downloader/"/>
    <id>https://zinirun.github.io/2020/09/07/project-dku-lms-downloader/</id>
    <published>2020-09-07T05:58:02.000Z</published>
    <updated>2020-09-07T07:20:32.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LMSDownloader-제작기"><a href="#LMSDownloader-제작기" class="headerlink" title="LMSDownloader 제작기"></a>LMSDownloader 제작기</h2><p>우리 학교에서 새로운 이러닝 시스템을 도입했는데, 리액트 구버전을 사용했으나 조잡한 느낌이 없지 않아 있다고 생각했다. 옛날 이러닝은 기존에 쓰던 비디오 다운로더 크롬 확장 프로그램을 통해 강의를 다운받을 수 있었는데, 새로운 이러닝은 강의를 기괴한(?) 방식으로 보여주고 있어서 다른 다운로드 프로그램들이 잡아내지를 못했다.</p><p><img src="/images/2020-09-07-16-10-04.png" alt="capture_program"></p><div style="text-align:center">완성한 프로그램의 디자인.</div><div style="text-align:center">아이콘은 단국대학교 공식 UI에서 가져왔다.</div><blockquote><p>블로그에서는 일부 중요한 코드만 언급하고, 모든 코드는 <a href="https://github.com/zinirun/LMSDownloader">Github</a>에 공개되어 있고, 기여할 수 있다.</p></blockquote><h2 id="로직-구성하기"><a href="#로직-구성하기" class="headerlink" title="로직 구성하기"></a>로직 구성하기</h2><p>사이트 소스를 보니 그럴만도 했다. <code>iframe</code>이 4중으로 되어 있고, 마지막 강의가 들어있는 프레임은 <code>contentDocument()</code> 메소드가 차단되어 있어 가져오지를 못했다.</p><p>조금 더 생각을 바꾸고, 세번째 프레임까지 들어간 다음, 네번째 프레임을 띄워주고 거기서 <code>video</code> 객체의 <code>src</code> 경로를 가져올 수 있겠다 싶었다.</p><h2 id="영상의-경로를-가져올-때-까지"><a href="#영상의-경로를-가져올-때-까지" class="headerlink" title="영상의 경로를 가져올 때 까지"></a>영상의 경로를 가져올 때 까지</h2><p>우선 세번째 프레임까지는 <code>contentDocument</code>를 통해 들어갈 수 있어서 안의 컨텐츠 내용을 가져올 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 첫번째 강의의 경우</span></span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>].src;</span><br><span class="line"><span class="comment">// 두번째 강의의 경우</span></span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">  .contentDocument.getElementsByTagName(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>].src;</span><br></pre></td></tr></table></figure><p>코드가 바보같을 수도 있지만 우리 학교 이러닝에만 잘 사용되면 되므로 이 코드가 최적이라고 생각했다.</p><p>프로그램이 거의 완성되고 나서 알게된 건데, 2개 강의를 하루에 올려서 한 페이지에 영상이 2개가 로드되는 경우도 있었다. 그래서 스캔 버튼을 2개로 나누기로 하고 2번째 강의까지 성공적으로 <code>src</code>를 가져올 수 있었다.</p><h2 id="다운로드만-하면-된다"><a href="#다운로드만-하면-된다" class="headerlink" title="다운로드만 하면 된다"></a>다운로드만 하면 된다</h2><p>기본적으로 클라이언트 사이드에서는 로컬이 아닌 주소의 다운로드 요청이 차단되어서 서버 사이드에서의 작업이 요구된다. 하지만 크롬 프로그램이기 때문에 <code>chrome.downloads.download()</code>를 사용할 수 있다는 정보를 찾았고 <code>background.js</code>와 <code>popup.js</code> 두개로 나눠서 작업했다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.sendMessage(&#123;</span><br><span class="line">  action: <span class="string">&quot;download&quot;</span>,</span><br><span class="line">  source: vidUrl[<span class="number">0</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>popup.js</code>에서 위와 같은 메시지를 요청하면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.onMessage.addListener(<span class="function">(<span class="params">request</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.action === <span class="string">&quot;download&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.source.includes(<span class="string">&quot;dankook.commonscdn&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        chrome.downloads.download(&#123;</span><br><span class="line">          url: request.source,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        alert(<span class="string">`오류: <span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">&quot;다운받을 수 있는 강의컨텐츠가 아닙니다😭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>background.js</code>에서는 위와 같이 <code>download</code> 요청인지 검사 후 단국대에서 들어오는 요청인지 검사 후 다운로드를 시작한다. 다양한 경우가 있을 수 있으므로 에러 핸들링에 신경을 썼다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>일주일 중 하루는 내가 원하는 것을 하는 날로 살기로 했는데 5시간동안의 몰두 끝에 그럴듯하게 완성하니 하루를 잘 보낸 것 같다. (5시간 중 2시간은 구글링을 한 것 같다) 학교 사람들이 써준다면 정말 뿌듯할 것 같고, 안 쓰신다 해도 지인들이나 나는 유용하게 쓸 것 같다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LMSDownloader-제작기&quot;&gt;&lt;a href=&quot;#LMSDownloader-제작기&quot; class=&quot;headerlink&quot; title=&quot;LMSDownloader 제작기&quot;&gt;&lt;/a&gt;LMSDownloader 제작기&lt;/h2&gt;&lt;p&gt;우리 학교에서 새로</summary>
      
    
    
    
    <category term="Etc" scheme="https://zinirun.github.io/categories/Etc/"/>
    
    
    <category term="chrome" scheme="https://zinirun.github.io/tags/chrome/"/>
    
    <category term="project" scheme="https://zinirun.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 19 Webcam Fun</title>
    <link href="https://zinirun.github.io/2020/09/06/js-course30-19/"/>
    <id>https://zinirun.github.io/2020/09/06/js-course30-19/</id>
    <published>2020-09-06T05:54:21.000Z</published>
    <updated>2020-09-06T06:19:15.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-19-Webcam-Fun"><a href="#Day-19-Webcam-Fun" class="headerlink" title="Day 19 - Webcam Fun"></a>Day 19 - Webcam Fun</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/ElWFcBlVk-o" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 웹캠을 브라우저에서 사용한다. 프로그래머스에서 온라인 코딩테스트를 볼 때 크롬에서 실시간 웹캠 사용이 되는 것이 신기했는데, 아마 이런 방식을 사용한게 아닐까 싶다.</p><p>웹캠의 사용이 클라이언트만 있어서 되는게 아니고, 서버 관련 모듈을 설치하고 환경을 세팅해야 한다. 하지만 npm 환경을 사용해서 내장된 <code>package.json</code>만으로 <code>npm install</code>을 통해 모든 환경을 한번에 세팅할 수 있었다.</p><h2 id="비디오-가져오기"><a href="#비디오-가져오기" class="headerlink" title="비디오 가져오기"></a>비디오 가져오기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  navigator.mediaDevices</span><br><span class="line">    .getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">localMediaStream</span>) =&gt;</span> &#123;</span><br><span class="line">      video.srcObject = localMediaStream;</span><br><span class="line">      video.play();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`Oh NO!!`</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>캠의 비디오를 가져오는 방법은 <code>navigator.mediaDevices.getUserMedia()</code> 메소드를 사용하면 되므로 간편하다. 그 후 적절한 에러핸들링과 함께 미리 선언해놓은 <code>video</code> 돔 객체의 <code>src</code> 경로에 스트리밍되는 캠 데이터를 넣고 <code>play()</code> 시켜주면 된다.</p><blockquote><p>원래는 <code>video.src = window.URL.createObjectURL(localMediaStream)</code>을 사용했었는데 현재의 브라우저에서는 <code>video.srcObject=localMediaStream</code>으로 사용한다고 한다. 관련 Deprecated 정보는 <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL">Mozilla</a>에서 확인할 수 있다.</p></blockquote><h2 id="캔버스에-비디오-넣기"><a href="#캔버스에-비디오-넣기" class="headerlink" title="캔버스에 비디오 넣기"></a>캔버스에 비디오 넣기</h2><p>캔버스에 비디오를 넣는 이유는 R, G, B 픽셀 값을 조정하는 바(bar)로 비디오에 장난(?)을 치기 위해서인데 굳이 비디오에 효과를 안 줘도 되면 그냥 대충 보고 넘어갔다가 필요할 때 쓰면 될 것 같다. (내가 그렇다)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintToCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = video.videoWidth;</span><br><span class="line">  <span class="keyword">const</span> height = video.videoHeight;</span><br><span class="line">  canvas.width = width;</span><br><span class="line">  canvas.height = height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ctx.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드가 데이터의 픽셀에 대한 접근없이, 순수하게 비디오를 캔버스에 그려넣는 과정이다. 캠마다 너비와 높이가 다르므로 전체화면에서 적절하게 조정하기 위해, 비디오의 너비와 높이를 캔버스에 넣어준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintToCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> width = video.videoWidth;</span><br><span class="line">  <span class="keyword">const</span> height = video.videoHeight;</span><br><span class="line">  canvas.width = width;</span><br><span class="line">  canvas.height = height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ctx.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="comment">// take the pixels out</span></span><br><span class="line">    <span class="keyword">let</span> pixels = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    <span class="comment">// mess with them</span></span><br><span class="line">    pixels = redEffect(pixels);</span><br><span class="line"></span><br><span class="line">    pixels = rgbSplit(pixels);</span><br><span class="line">    ctx.globalAlpha = <span class="number">0.8</span>;</span><br><span class="line"></span><br><span class="line">    pixels = greenScreen(pixels);</span><br><span class="line">    <span class="comment">// put them back</span></span><br><span class="line">    ctx.putImageData(pixels, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드가 캔버스의 픽셀을 rgb를 조정하는 함수를 작성하여 다시 그려내는 과정이다. 픽셀을 조정하는 함수는 밑에서 설명하겠다. 이제 이 함수를 <code>video</code> 객체에 이벤트로 걸어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">video.addEventListener(<span class="string">&quot;canplay&quot;</span>, paintToCanvas);</span><br></pre></td></tr></table></figure><p><code>canplay</code> 라는 이벤트 속성이 있는지 몰랐다, 꽤 유용하게 사용할 것 같다.</p><h2 id="비디오-캡쳐하기"><a href="#비디오-캡쳐하기" class="headerlink" title="비디오 캡쳐하기"></a>비디오 캡쳐하기</h2><p>버튼을 누르면 비디오가 캡쳐되고, 미리보기 스냅샷이 화면 아래에 삽입된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">takePhoto</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 찰칵 소리 내기</span></span><br><span class="line">  snap.currentTime = <span class="number">0</span>;</span><br><span class="line">  snap.play();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 캔버스의 데이터를 내보내기</span></span><br><span class="line">  <span class="keyword">const</span> data = canvas.toDataURL(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  link.href = data;</span><br><span class="line">  link.setAttribute(<span class="string">&quot;download&quot;</span>, <span class="string">&quot;handsome&quot;</span>);</span><br><span class="line">  link.innerHTML = <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;data&#125;</span>&quot; alt=&quot;Handsome Man&quot; /&gt;`</span>;</span><br><span class="line">  strip.insertBefore(link, strip.firstChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>버튼을 누른 후 화면 밑을 보면</p><p><img src="/images/2020-09-06-15-13-58.png"></p><p>이렇게 스냅샷이 보여지고 클릭하면 다운로드된다. <code>createElement</code>를 써도 되고 <code>innerHTML</code>을 <code>+=</code>로 늘여나가도 상관없을 것 같다.</p><h2 id="픽셀로-장난-치기"><a href="#픽셀로-장난-치기" class="headerlink" title="픽셀로 장난(?)치기"></a>픽셀로 장난(?)치기</h2><p>밑에서부터 나오는 코드들은 솔직히 제대로 보지는 않았다. 내가 이미지 처리에 관심도 없을 뿐더러 비디오 처리시에 필터 효과가 필요하다면 그때 검색해서 쓰면 되기 때문에 굳이 하나하나 파헤치지는 않았다.</p><p>그 전에, 한가지 괜찮다고 생각한 코드는</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.rgb input&quot;</span>).forEach(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">  levels[input.name] = input.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 코드인데, 난 range bar에 이벤트가 걸려있지 않은데 어떻게 값을 실시간으로 바꿀까 생각하다가 코드를 보니 이렇게 비디오가 플레이되고 있을 때 실행되는 함수 내에서 이렇게 값을 받아오고 있었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redEffect</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pixels.data.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">    pixels.data[i + <span class="number">0</span>] = pixels.data[i + <span class="number">0</span>] + <span class="number">200</span>; <span class="comment">// RED</span></span><br><span class="line">    pixels.data[i + <span class="number">1</span>] = pixels.data[i + <span class="number">1</span>] - <span class="number">50</span>; <span class="comment">// GREEN</span></span><br><span class="line">    pixels.data[i + <span class="number">2</span>] = pixels.data[i + <span class="number">2</span>] * <span class="number">0.5</span>; <span class="comment">// Blue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbSplit</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pixels.data.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">    pixels.data[i - <span class="number">150</span>] = pixels.data[i + <span class="number">0</span>]; <span class="comment">// RED</span></span><br><span class="line">    pixels.data[i + <span class="number">500</span>] = pixels.data[i + <span class="number">1</span>]; <span class="comment">// GREEN</span></span><br><span class="line">    pixels.data[i - <span class="number">550</span>] = pixels.data[i + <span class="number">2</span>]; <span class="comment">// Blue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greenScreen</span>(<span class="params">pixels</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> levels = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.rgb input&quot;</span>).forEach(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    levels[input.name] = input.value;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pixels.data.length; i = i + <span class="number">4</span>) &#123;</span><br><span class="line">    red = pixels.data[i + <span class="number">0</span>];</span><br><span class="line">    green = pixels.data[i + <span class="number">1</span>];</span><br><span class="line">    blue = pixels.data[i + <span class="number">2</span>];</span><br><span class="line">    alpha = pixels.data[i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      red &gt;= levels.rmin &amp;&amp;</span><br><span class="line">      green &gt;= levels.gmin &amp;&amp;</span><br><span class="line">      blue &gt;= levels.bmin &amp;&amp;</span><br><span class="line">      red &lt;= levels.rmax &amp;&amp;</span><br><span class="line">      green &lt;= levels.gmax &amp;&amp;</span><br><span class="line">      blue &lt;= levels.bmax</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// take it out!</span></span><br><span class="line">      pixels.data[i + <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pixels;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-19-Webcam-Fun&quot;&gt;&lt;a href=&quot;#Day-19-Webcam-Fun&quot; class=&quot;headerlink&quot; title=&quot;Day 19 - Webcam Fun&quot;&gt;&lt;/a&gt;Day 19 - Webcam Fun&lt;/h2&gt;&lt;div clas</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>SQLD 38회 후기 (국가공인 SQL 개발자 자격증)</title>
    <link href="https://zinirun.github.io/2020/09/05/sqld-38-review/"/>
    <id>https://zinirun.github.io/2020/09/05/sqld-38-review/</id>
    <published>2020-09-05T07:07:22.000Z</published>
    <updated>2020-09-05T07:55:03.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-개발자-자격시험"><a href="#SQL-개발자-자격시험" class="headerlink" title="SQL 개발자 자격시험"></a>SQL 개발자 자격시험</h2><p>한국데이터산업진흥원에서 주관하는 국가공인 SQL 개발자 시험이다. 1년에 4번 실시되고, 커트라인은 100점 만점에 60점인데, 크게 파트 2개로 나뉜다.</p><ul><li>데이터 모델링의 이해 (10문항)</li><li>SQL 기본 및 활용 (40문항 - 주관식 8문항 포함)</li></ul><p>각 파트마다 40%을 넘겨야 합격 처리된다. 생각보다 10문항짜리 첫 파트에서 실수가 많아지면 안되기에 마냥 쉽다고는 할 수 없다.</p><p>나는 일주일에 1시간 정도를 할애해서 전반적으로 개념을 짚었고, 시험 직전 이틀을 5시간 정도를 문제 풀이와 개념 외우기에 집중했다. 그래서 순공시간은 17시간? 정도 될 것 같다. 기존 프로젝트를 하면서 SQL Query 사용은 많이 해봤고 데이터베이스 기초 전공 과목을 수강했기에 공부가 크게 어렵지는 않았다.</p><h2 id="38회-후기"><a href="#38회-후기" class="headerlink" title="38회 후기"></a>38회 후기</h2><p>오늘 본 SQLD는 38회인데, 학교가 경기도에 위치해 있어서 강변 근처에 밥도 먹으러 갈 김에 서울 성수중학교에서 시험을 봤다. 코로나의 여파 때문인지 좌석간의 거리도 넓고 날씨도 많이 풀려서 전반적으로 쾌적했다.</p><h3 id="인쇄-오류"><a href="#인쇄-오류" class="headerlink" title="인쇄 오류"></a>인쇄 오류</h3><p>이번 시험에는 큰 인쇄 오류가 있었다. 고사장의 절반 가까이 되는 시험지가 마지막 주관식 2문제(7, 8번)가 제대로 인쇄되어 있지 않아 엄청난 혼동을 일으켰는데, 결국 주관식 7번과 8번은 풀이하지 말라는 공지가 방송되었다. (배점은 어떻게 바뀔지 모르겠다. 4점을 그냥 줄지 없는 문제로 칠지는 나중에 알 것 같다.)</p><h3 id="파트별-후기"><a href="#파트별-후기" class="headerlink" title="파트별 후기"></a>파트별 후기</h3><p>문제를 풀기 시작하고 생각보다 첫번째 파트 <code>데이터 모델링의 이해</code>가 까다로웠다. 기본적인 개념을 묻는 퍼주기식 문제는 거의 없었고 엔터티간의 상관관계를 그림으로 주고 묻는 문제가 생각보다 많이 나왔다. 사실 그 부분을 완벽하게 공부하지 않아서 거의 감으로 풀었다. 엔터티를 분류하는 속성이 <code>키 속성</code>인지 <code>기본키 속성</code>인지 너무 헷갈렸고, <code>기본키 속성</code>으로 찍었다가 결국 틀린 것을 알게 되었다.</p><p>두번째 파트인 <code>SQL 기본 및 활용</code>은 SQL문을 주고 결과를 쓰거나, 결과를 주고 SQL문을 찾는 문제가 과반수였고, 간단해서 눈으로 바로 풀 수 있는 문제 절반, 생각을 좀 해야하는 문제 절반이었다. 퍼주는 개념 문제도 5개 정도는 있었던 것 같다. 문제와 보기에 말장난이 정말 많아서 잘 봐야한다.</p><h3 id="전반적인-느낌"><a href="#전반적인-느낌" class="headerlink" title="전반적인 느낌"></a>전반적인 느낌</h3><p>시험 시간은 10시부터 11시 30분이었는데 40분 정도에 모두 풀고, 붙잡고 있어봤자 답이 안나오는 걸 알아서 성수중학교 1등으로 나왔다. 50문제에 1시간 30분을 주므로 시간은 충분하다 못해 넘치는 것 같다. 하지만 비전공자가 보기엔 당연히 어려운 시험이고, 도전하기 위해서는 꽤 많은 노력이 필요할 것 같다.</p><p>보통 책을 사서 공부할텐데, 정말 책에 오타가 너무 많고 문제와 답이 다른 경우도 있고 개념 설명도 너무 부실해서 빨리 경쟁 업체에서 다른 책을 출시해야 할 것 같다. 거의 독점하다시피 책을 내는데 왜 이 모양으로 책을 내는지 모르겠다. 요즘 책에 오탈자를 찾으면 상품권을 주는데 아마 이 책에서 오탈자나 잘못된 정보로 상품권을 줬다면 냉장고 한 대는 뽑았을 것 같다.</p><p>그렇다고 전공자가 인강을 보는 일은 없었으면 좋겠다. 100점을 맞는다고 좋은 것도 아니고 60점만 넘기면 되므로 좀 짜증나는 책을 가지고도 60점 정도는 넘길 수 있다고 생각한다. SQLP는 모르겠는데, SQLD는 절대 인강까지 볼 만큼 까다로운 시험이 아니다.</p><blockquote><p>38회 시험의 결과는 10월 6일에 나온다. 이 글을 보신 분들 중 오늘 시험을 치르신 분들이 있다면 꼭 합격하시길 빕니다!</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL-개발자-자격시험&quot;&gt;&lt;a href=&quot;#SQL-개발자-자격시험&quot; class=&quot;headerlink&quot; title=&quot;SQL 개발자 자격시험&quot;&gt;&lt;/a&gt;SQL 개발자 자격시험&lt;/h2&gt;&lt;p&gt;한국데이터산업진흥원에서 주관하는 국가공인 SQL 개발자</summary>
      
    
    
    
    <category term="Etc" scheme="https://zinirun.github.io/categories/Etc/"/>
    
    
    <category term="sqld" scheme="https://zinirun.github.io/tags/sqld/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 18 Adding Up Times with Reduce</title>
    <link href="https://zinirun.github.io/2020/09/03/js-course30-18/"/>
    <id>https://zinirun.github.io/2020/09/03/js-course30-18/</id>
    <published>2020-09-02T15:19:16.000Z</published>
    <updated>2020-09-02T17:00:15.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-18-Adding-Up-Times-with-Reduce"><a href="#Day-18-Adding-Up-Times-with-Reduce" class="headerlink" title="Day 18 - Adding Up Times with Reduce"></a>Day 18 - Adding Up Times with Reduce</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/SadWPo2KZWg" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 map, reduce에 대한 방법만 알고 있다면 간단하게 해결할 수 있다.</p><h2 id="Full-Script"><a href="#Full-Script" class="headerlink" title="Full Script"></a>Full Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeNodes = [...document.querySelectorAll(<span class="string">&quot;[data-time]&quot;</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seconds = timeNodes</span><br><span class="line">  .map(<span class="function">(<span class="params">node</span>) =&gt;</span> node.dataset.time)</span><br><span class="line">  .map(<span class="function">(<span class="params">timeCode</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [mins, secs] = timeCode.split(<span class="string">&quot;:&quot;</span>).map(<span class="built_in">parseFloat</span>);</span><br><span class="line">    <span class="keyword">return</span> mins * <span class="number">60</span> + secs;</span><br><span class="line">  &#125;)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">total, eachSeconds</span>) =&gt;</span> total + eachSeconds);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> secondsLeft = seconds;</span><br><span class="line"><span class="keyword">const</span> hours = <span class="built_in">Math</span>.floor(secondsLeft / <span class="number">3600</span>);</span><br><span class="line">secondsLeft %= <span class="number">3600</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mins = <span class="built_in">Math</span>.floor(secondsLeft / <span class="number">60</span>);</span><br><span class="line">secondsLeft %= <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hours, mins, secondsLeft);</span><br></pre></td></tr></table></figure><p><code>querySelectorAll</code>로 가져온 데이터는 Node List의 형태이므로 spread 문법을 이용하여 풀어서 배열화시켜 저장한다. <code>Array.from()</code>을 사용해도 상관없다.</p><p>우선 시간에 대한 데이터는 각각 <code>&lt;li data-time=&quot;4:04&quot;&gt;Video 58&lt;/li&gt;</code> 형식의 태그 안에 dataset으로 들어있는데, 이를 <code>map</code>으로 시간을 추출하기 위해 먼저 매핑한다.</p><p>그 후 시간의 형식이 <code>mm:ss</code> 형식이므로 <code>:</code>를 기준으로 <code>split()</code>을 사용하여 나눈 후 <code>parseFloat</code>을 이용하여 실수형 형변환을 시킨다.</p><p>그 값을 <code>reduce</code>를 사용하여 더해주면 되는데, 첫번째 인자인 <code>total</code>은 총 누적 값이고, 두번째 인자인 <code>eachSeconds</code>는 누적 값이다.</p><p>두번의 매핑 후 한번의 리듀스를 거치면 결국 초 단위로 바꾼 총 누적 값이 되고, 이 값을 시간, 분, 초로 잘라서 콘솔에 출력하면 된다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-18-Adding-Up-Times-with-Reduce&quot;&gt;&lt;a href=&quot;#Day-18-Adding-Up-Times-with-Reduce&quot; class=&quot;headerlink&quot; title=&quot;Day 18 - Adding Up Times</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search - 정렬된 배열에서 수의 개수 구하기 (이분탐색)</title>
    <link href="https://zinirun.github.io/2020/09/02/ps-binarysearch-get-count-of-sorted-array/"/>
    <id>https://zinirun.github.io/2020/09/02/ps-binarysearch-get-count-of-sorted-array/</id>
    <published>2020-09-01T16:22:37.000Z</published>
    <updated>2020-09-18T07:27:39.406Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>정렬된 숫자의 배열에서 특정 수의 개수를 구한다.<br>시간복잡도가 <code>O(logN)</code> 이하여야 시간초과 판정을 받지 않는다.<br>수가 배열에 존재하지 않는 경우 <code>-1</code>을 출력한다.</p><p>입력<br><code>n</code>: 배열의 길이(1~1000000), <code>x</code>: 찾을 수</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line">n,x=map(int,input().split())</span><br><span class="line">num = sorted(list(map(int, input().split())))</span><br><span class="line">count=bisect.bisect_right(num,x)-bisect.bisect_left(num,x)</span><br><span class="line"><span class="keyword">if</span> count&lt;<span class="number">0</span>: print(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>: print(count)</span><br></pre></td></tr></table></figure><p>특정 수의 개수는 <code>count()</code> 메소드로 찾을 수 있지만, 정렬된 배열의 조건, 배열의 길이를 봐서 일반적인 loop로 완전탐색으로 돌다가는 당연히 시간초과가 날 것을 알고 <strong>이분 탐색</strong>이라는 포인트를 잡을 수 있어야 한다.</p><p><code>bisect</code> 라이브러리에서 <code>bisect_right()</code> 메소드와 <code>bisect_left()</code> 메소드를 사용하면 첫번째 인자의 배열에 두번째 요소를 집어넣을 때 각각 오른쪽에서 넣을 경우, 왼쪽에서 넣을 경우에서 몇 번째 인덱스에 넣어야 하는지를 반환한다.</p><p>예를 들어, 배열이 <code>1 1 2 2 2 2 3</code>으로 구성되었다고 가정해보자.<br>2의 개수를 찾는 경우 2를 오른쪽부터 넣을 때의 인덱스는 6이고, 왼쪽부터 넣을 때의 인덱스는 2이다. 이 두 값을 빼면 바로 개수가 된다. 2가 없을 경우 두 값이 모두 같을 것이고, 자연스레 count는 0이 된다.</p><blockquote><p>이분탐색 방식으로 코드를 직접 구현해도 되지만 외부 라이브러리 제한조건이 없는 경우 번거로운 수고를 덜수도 있다. 하지만 라이브러리는 기초를 알고 쓰자.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;정렬된 숫자의 배열에서 특정 수의 개수를 구한다.&lt;br&gt;시간복잡도가 &lt;code&gt;O(logN)&lt;/code&gt; 이하여야 시간초과 판정을 받지 않는다.&lt;br&gt;수가 배열에 존재하지 않는 경우 &lt;code&gt;-1&lt;/code&gt;을 출력한다.</summary>
      
    
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://zinirun.github.io/tags/algorithm/"/>
    
    <category term="ps" scheme="https://zinirun.github.io/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 17 Sort Without Articles</title>
    <link href="https://zinirun.github.io/2020/09/01/js-course30-17/"/>
    <id>https://zinirun.github.io/2020/09/01/js-course30-17/</id>
    <published>2020-09-01T06:51:24.000Z</published>
    <updated>2020-09-01T07:13:43.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-17-Sort-Without-Articles"><a href="#Day-17-Sort-Without-Articles" class="headerlink" title="Day 17 - Sort Without Articles"></a>Day 17 - Sort Without Articles</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/PEEo-2mRQ7A" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>이번 과제는 문자열로 구성된 배열을 정렬하는 과제이다. 문제는 그냥 정렬이 아니라 앞에 관사를 제외하고 정렬하여 <code>&lt;li&gt;</code> 객체를 넣어주어야 한다.</p><h2 id="strip-함수-만들기"><a href="#strip-함수-만들기" class="headerlink" title="strip() 함수 만들기"></a>strip() 함수 만들기</h2><p><code>strip()</code> 메소드는 자바스크립트에서 지원하는 기능이 아니다. 직접 정의하는 이 함수는 regex를 사용하여 관사 <code>a</code> <code>an</code> <code>the</code>를 제거하고, 문자열에 사용할 수 있는 기본 메소드인 <code>trim()</code>을 사용하여 앞, 뒤 공백을 제거한 후 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">band</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//regex - ^:starts with, i:insensitive(full matched)</span></span><br><span class="line">  <span class="keyword">return</span> band.replace(<span class="regexp">/^(a |the |an )/i</span>, <span class="string">&quot;&quot;</span>).trim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 이 함수로 <code>bands</code> 배열을 정렬한 새로운 <code>sortedBands</code> 배열을 만들 것이다.</p><h2 id="sort-사용하기"><a href="#sort-사용하기" class="headerlink" title="sort() 사용하기"></a>sort() 사용하기</h2><p>기본 내장된 <code>sort()</code> 메소드를 사용한다. 위에서 작성한 <code>strip()</code> 메소드에 정렬할 인자를 각각 넣어서 정렬한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedBands = bands.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (strip(a) &gt; strip(b) ? <span class="number">1</span> : <span class="number">-1</span>));</span><br></pre></td></tr></table></figure><h2 id="map-join-사용하기"><a href="#map-join-사용하기" class="headerlink" title="map, join 사용하기"></a>map, join 사용하기</h2><p>이제 적절한 위치에 정렬한 <code>sortedBand</code> 요소를 각각 <code>&lt;li&gt;</code> 객체로 매핑하여 <code>innerHTML</code>에 넣어주면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bandsList.innerHTML = sortedBands.map(<span class="function">(<span class="params">band</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;band&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>join(&#39;&#39;)</code>을 마지막에 사용하지 않으면 <code>,</code>가 들어간 이상한 리스트가 출력될 것이다. <code>innerHTML</code>에 태그들을 매핑하여 넣을 때는 외우다싶이 마지막에 <code>join()</code> 메소드를 사용하자.</p><h2 id="Full-Script"><a href="#Full-Script" class="headerlink" title="Full Script"></a>Full Script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bands = [</span><br><span class="line">  <span class="string">&quot;The Plot in You&quot;</span>,</span><br><span class="line">  <span class="string">&quot;The Devil Wears Prada&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Pierce the Veil&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Norma Jean&quot;</span>,</span><br><span class="line">  <span class="string">&quot;The Bled&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Say Anything&quot;</span>,</span><br><span class="line">  <span class="string">&quot;The Midway State&quot;</span>,</span><br><span class="line">  <span class="string">&quot;We Came as Romans&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Counterparts&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Oh, Sleeper&quot;</span>,</span><br><span class="line">  <span class="string">&quot;A Skylit Drive&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Anywhere But Here&quot;</span>,</span><br><span class="line">  <span class="string">&quot;An Old Dog&quot;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">bandsList = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#bands&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">band</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//regex - ^:starts with, i:insensitive(full matched)</span></span><br><span class="line">  <span class="keyword">return</span> band.replace(<span class="regexp">/^(a |the |an )/i</span>, <span class="string">&quot;&quot;</span>).trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortedBands = bands.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (strip(a) &gt; strip(b) ? <span class="number">1</span> : <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">bandsList.innerHTML = sortedBands.map(<span class="function">(<span class="params">band</span>) =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;band&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>regex 사용은 여전히 어려운 것 같다. 외우려고 하기 보다는 필요할 때 찾아서 쓰고, 기본적인 틀 정도만 상기시켜야겠다. 이제 13개밖에 남지 않았다!</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-17-Sort-Without-Articles&quot;&gt;&lt;a href=&quot;#Day-17-Sort-Without-Articles&quot; class=&quot;headerlink&quot; title=&quot;Day 17 - Sort Without Articles&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 제대로 쓰기 - Code This, NOT That!</title>
    <link href="https://zinirun.github.io/2020/09/01/js-way-to-better-code/"/>
    <id>https://zinirun.github.io/2020/09/01/js-way-to-better-code/</id>
    <published>2020-09-01T05:23:20.000Z</published>
    <updated>2020-09-01T06:15:04.403Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="https://www.youtube.com/embed/Mus_vwhTCq0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>본 글은 유튜브를 보다가 우연히 찾은 Javascript Pro Tips - Code This, NOT That 영상인데, 자바스크립트 ES6에서 지향하는 클린 코드를 잘 정리해주셔서 리마인드할 겸 다시 정리한다.</p><h2 id="console-log-console-table"><a href="#console-log-console-table" class="headerlink" title="console.log, console.table"></a>console.log, console.table</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123; <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">nervous</span>: <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> bar = &#123; <span class="attr">name</span>: <span class="string">&quot;dick&quot;</span>, <span class="attr">age</span>: <span class="number">40</span>, <span class="attr">nervous</span>: <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> baz = &#123; <span class="attr">name</span>: <span class="string">&quot;harry&quot;</span>, <span class="attr">age</span>: <span class="number">50</span>, <span class="attr">nervous</span>: <span class="literal">true</span> &#125;;</span><br></pre></td></tr></table></figure><p>위의 3가지 객체들을 콘솔에 나타낼 때 <code>console.log(foo); console.log(bar) ...</code>처럼 작성하면 쓸데없는 코드가 늘어나게 되고, 한 눈에 봐도 비효율적으로 보인다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123; foo, bar, baz &#125;);</span><br></pre></td></tr></table></figure><p>이렇게 한번에 나타낼 수 있다. <code>&#123;&#125;</code> 표현은 정말 많이 쓰인다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table([foo, bar, baz]);</span><br></pre></td></tr></table></figure><p><code>console.table</code>에 배열 객체로 넘겨주면 정리된 표 형식으로 볼 수도 있다.</p><h2 id="console-time"><a href="#console-time" class="headerlink" title="console.time"></a>console.time</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;looper&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">1000000</span>) &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&quot;looper&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>console.time</code>부터 <code>console.timeEnd</code>까지의 시간을 측정하여 출력해준다. 함수의 인자로 들어가는 이름이 일치해야 그룹으로 묶인다.</p><h2 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace"></a>console.trace</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deleteMe = <span class="function">() =&gt;</span> <span class="built_in">console</span>.trace(<span class="string">&quot;bye bye database&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>console.trace</code>를 사용하면 함수가 호출될 때의 stack trace를 확인할 수 있다.</p><h2 id="destructuring"><a href="#destructuring" class="headerlink" title="destructuring"></a>destructuring</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> turtle = &#123;</span><br><span class="line">  name: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">  legs: <span class="number">4</span>,</span><br><span class="line">  shell: <span class="literal">true</span>,</span><br><span class="line">  type: <span class="string">&quot;amphibious&quot;</span>,</span><br><span class="line">  meal: <span class="number">10</span>,</span><br><span class="line">  diet: <span class="string">&quot;berries&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 turtle 객체를 함수의 인자로 넘겨서 객체 안의 값에 접근해보자. <code>feed</code>라는 함수를 예로 들면,</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;animal.name&#125;</span> <span class="subst">$&#123;animal.meal&#125;</span> kilos of <span class="subst">$&#123;animal.diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이는 명백히 비효율적이고 잘못된 코드이다. 클린 코딩의 방법은 2가지인데,</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">&#123; name, meal, diet &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;meal&#125;</span> kilos of <span class="subst">$&#123;diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 인자 자체를 객체를 풀어주는 방법이 있고,</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, meal, diet &#125; = animal;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;meal&#125;</span> kilos of <span class="subst">$&#123;diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 함수 내에서 별도로 객체를 풀어주는 방법이 있다.</p><h2 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> horse = &#123;</span><br><span class="line">  name: <span class="string">&quot;Topher&quot;</span>,</span><br><span class="line">  size: <span class="string">&quot;large&quot;</span>,</span><br><span class="line">  skills: [<span class="string">&quot;jousting&quot;</span>, <span class="string">&quot;racing&quot;</span>],</span><br><span class="line">  age: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위 객체의 값을 활용해서 새로운 값을 선언해보자.</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bio =</span><br><span class="line">  horse.name +</span><br><span class="line">  <span class="string">&quot; is a &quot;</span> +</span><br><span class="line">  horse.size +</span><br><span class="line">  <span class="string">&quot; horse skilled in &quot;</span> +</span><br><span class="line">  horse.skills.join(<span class="string">&quot; &amp; &quot;</span>);</span><br></pre></td></tr></table></figure><p>backticks을 이용하면 위처럼 <code>+</code>를 사용하여 하나하나 붙여줄 필요가 없다.</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, size, skills &#125; = horse;</span><br><span class="line"><span class="keyword">let</span> bio = <span class="string">`<span class="subst">$&#123;name&#125;</span> is a <span class="subst">$&#123;size&#125;</span> skilled in <span class="subst">$&#123;skills.join(<span class="string">&quot; &amp; &quot;</span>)&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>위에서 언급한 destructuring으로 horse 객체를 풀어주고 backticks를 사용하면 정말 간단하고 가독성도 좋게 변수를 선언할 수 있다.</p><h2 id="Spread-Syntax"><a href="#Spread-Syntax" class="headerlink" title="Spread Syntax"></a>Spread Syntax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pikachu = &#123; <span class="attr">name</span>: <span class="string">&quot;Pikachu&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> stats = &#123; <span class="attr">hp</span>: <span class="number">40</span>, <span class="attr">attack</span>: <span class="number">60</span>, <span class="attr">defense</span>: <span class="number">45</span> &#125;;</span><br></pre></td></tr></table></figure><p>위의 두 객체를 하나로 합치고 싶다면 어떻게 해야할까.</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pikachu[<span class="string">&quot;hp&quot;</span>] = stats.hp;</span><br><span class="line">pikachu[<span class="string">&quot;attack&quot;</span>] = stats.attack;</span><br><span class="line">pikachu[<span class="string">&quot;defense&quot;</span>] = stats.defense;</span><br></pre></td></tr></table></figure><p>위처럼 하나하나 할당하거나, <code>push</code>를 사용해서 하나하나 넣어준다면 stat 객체에 100가지 요소가 들어있다면 말도 안되는 코드가 되어버릴 것이다.</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lvl0 = &#123; ...pikachu, ...stats &#125;;</span><br></pre></td></tr></table></figure><p>Spread 방식을 사용하면 위처럼 간단하게 합친 새로운 객체를 만들어낼 수 있다.</p><h2 id="loops"><a href="#loops" class="headerlink" title="loops"></a>loops</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> orders = [<span class="number">500</span>, <span class="number">30</span>, <span class="number">99</span>, <span class="number">15</span>, <span class="number">133</span>];</span><br></pre></td></tr></table></figure><p><code>orders</code> 배열을 loop 방식으로 계산해야 할때</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> withTax = [];</span><br><span class="line"><span class="keyword">const</span> highValue = [];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; orders.length; i++) &#123;</span><br><span class="line">  <span class="comment">//reduce</span></span><br><span class="line">  total += orders[i];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//map</span></span><br><span class="line">  withTax.push(orders[i] * <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//filter</span></span><br><span class="line">  <span class="keyword">if</span> (orders[i] &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    highValue.push(orders[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전통적인 <code>for loop</code> 방식으로 코드를 작성하는 방법도 있지만, 자바스크립트에서는 기본적으로 reduce, map, filter 메소드를 지원한다.</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> total = orders.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur);</span><br><span class="line"><span class="keyword">const</span> withTax = orders.map(<span class="function">(<span class="params">v</span>) =&gt;</span> v * <span class="number">1.1</span>);</span><br><span class="line"><span class="keyword">const</span> highValue = orders.filter(<span class="function">(<span class="params">v</span>) =&gt;</span> v &gt; <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> random = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>랜덤 숫자를 콜백 형식으로 지정된 순서로 생성하여 더하는 함수를 만들 때</p><p><code>잘못된 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sumRandomAsyncNums = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> first;</span><br><span class="line">  <span class="keyword">let</span> second;</span><br><span class="line">  <span class="keyword">let</span> third;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> random()</span><br><span class="line">    .then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      first = v;</span><br><span class="line">      <span class="keyword">return</span> random();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      second = v;</span><br><span class="line">      <span class="keyword">return</span> random();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      third = v;</span><br><span class="line">      <span class="keyword">return</span> first + second + third;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>.then</code>을 체인처럼 엮어서 작성하는 경우가 많다.</p><p><code>올바른 코드</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sumRandomAsyncNums = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> first = <span class="keyword">await</span> random();</span><br><span class="line">  <span class="keyword">const</span> second = <span class="keyword">await</span> random();</span><br><span class="line">  <span class="keyword">const</span> third = <span class="keyword">await</span> random();</span><br><span class="line">  <span class="keyword">return</span> first + second + third;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>async</code>와 <code>await</code>을 적절히 활용하면 순서를 보장하는 코드를 간단하게 작성할 수 있다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>ES6 문법으로 정말 혁신적으로 코드의 길이를 줄이고 효율적인 코드를 작성하는 방법이 많다. 영상에 있는 내용도 일부에 불과하다. 나도 <code>push</code>를 사용해서 값을 집어넣거나 <code>.then</code>을 칭칭 엮어서 코드를 짠 기억이 있다. 지금부터라도 ES6 문법에 맞게 클린 코딩을 지향해야겠다.</p><blockquote><p>ES6 문법에 관한 <a href="https://github.com/lukehoban/es6features">총 정리</a>를 해놓은 고마운 분이 계시니 차근차근 읽어보면 좋을 것 같다.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/Mus_vwhTCq0&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; allowfullscreen&gt;&lt;/iframe</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Netlify Custom Domain 설정하기 (with Namecheap)</title>
    <link href="https://zinirun.github.io/2020/08/31/netlify-custom-domain/"/>
    <id>https://zinirun.github.io/2020/08/31/netlify-custom-domain/</id>
    <published>2020-08-31T06:48:27.000Z</published>
    <updated>2020-08-31T07:17:20.397Z</updated>
    
    <content type="html"><![CDATA[<p>어제 내 프로필 사이트를 하나 만들었다. Github Pages를 사용해서 배포했는데 아무리 봐도 주소 <code>zinirun.github.io/zini-profile</code>은 너무나도 길었고 <code>zinirun.github.io</code>는 현재 블로그의 레파지토리로 쓰고 있어서 프로젝트 페이지를 커스텀 도메인으로 설정할 수 있나 찾아봤는데 내가 못 찾는건지, 방법이 없었다.</p><p>그래서 네트리파이로 배포하고 커스텀 도메인을 설정했다.</p><h3 id="Netlify-설정"><a href="#Netlify-설정" class="headerlink" title="Netlify 설정"></a>Netlify 설정</h3><p><img src="/images/2020-08-31-15-52-11.png"></p><p>네트리파이에 배포한 본인의 앱 설정에는 <strong>Domain management</strong>가 있다. 들어가면</p><p><img src="/images/2020-08-31-15-53-16.png"></p><p>이렇게 <strong>Custom Domains</strong>를 설정하는 영역이 있는데 소유한 주소를 입력한다.</p><h3 id="Domain-Nameserver-설정"><a href="#Domain-Nameserver-설정" class="headerlink" title="Domain Nameserver 설정"></a>Domain Nameserver 설정</h3><p>그러면 1단계를 넘어가고 2단계에서 Name Server를 등록하라고 한다. 나는 <a href="https://namecheap.com/">Namecheap</a> 주소를 대여받고 있어서 도메인 설정에 들어갔는데, 다른 주소 대여 서비스도 Custom DNS를 지원할 것이니 잘 찾아보면 Name Server 설정하는 영역이 있을 것이다.</p><p><img src="/images/2020-08-31-15-56-07.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dns1.p05.nsone.net</span><br><span class="line">dns2.p05.nsone.net</span><br><span class="line">dns3.p05.nsone.net</span><br><span class="line">dns4.p05.nsone.net</span><br></pre></td></tr></table></figure><p>이 4개를 모두 등록해주면 된다. 하지만 본인의 도메인에 DNS가 정상적으로 등록되려면 하루정도의 시간이 걸린다. DNS를 정상적으로 등록했다면 네트리파이에서 검증 단계를 모두 마친 후 커스텀 도메인을 사용할 수 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;어제 내 프로필 사이트를 하나 만들었다. Github Pages를 사용해서 배포했는데 아무리 봐도 주소 &lt;code&gt;zinirun.github.io/zini-profile&lt;/code&gt;은 너무나도 길었고 &lt;code&gt;zinirun.github.io&lt;/</summary>
      
    
    
    
    <category term="Etc" scheme="https://zinirun.github.io/categories/Etc/"/>
    
    
    <category term="netlify" scheme="https://zinirun.github.io/tags/netlify/"/>
    
  </entry>
  
</feed>
