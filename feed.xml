<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zinirun</title>
  
  <subtitle>tech blog by Zini</subtitle>
  <link href="https://zinirun.github.io/feed.xml" rel="self"/>
  
  <link href="https://zinirun.github.io/"/>
  <updated>2020-08-15T14:38:27.111Z</updated>
  <id>https://zinirun.github.io/</id>
  
  <author>
    <name>zini</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker(도커) 시작하기, 설치부터 배포까지</title>
    <link href="https://zinirun.github.io/2020/08/15/how-to-use-docker/"/>
    <id>https://zinirun.github.io/2020/08/15/how-to-use-docker/</id>
    <published>2020-08-15T13:42:12.000Z</published>
    <updated>2020-08-15T14:38:27.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Guide"><a href="#Docker-Guide" class="headerlink" title="Docker Guide"></a>Docker Guide</h1><img src="https://subicura.com/assets/article_images/2017-01-19-docker-guide-for-beginners-1/docker-logo.png" width=300 title='Docker' alt='Docker logo'><p>우측의 목차 <code>tocbot</code>을 이용하면 편리합니다!</p><h2 id="1-도커를-왜-쓸까-뭐길래"><a href="#1-도커를-왜-쓸까-뭐길래" class="headerlink" title="1. 도커를 왜 쓸까? 뭐길래?"></a>1. 도커를 왜 쓸까? 뭐길래?</h2><h3 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h3><p>서버 스터디를 하면서 ‘클라우드에 도커를 올려라’라는 말을 듣고, 듣긴 들은 것 같은데 대체 도커가 뭔지를 몰랐다. 단어 하나만 듣고 서버 <code>NHN TOAST 클라우드</code>에 여자저차 올리긴 했지만 완벽한 개념을 숙지하지 못하고 마구잡이로 올린 탓에 의미가 없었다.</p><p>다들 도커를 접하는 많은 이유가 있겠지만, 도커, 이미지, 컨테이너 등 기본적인 개념을 알고 ‘왜’ 쓰는지 알아야 할 것 같아서 정리해보았다.</p><h3 id="도커의-등장-전"><a href="#도커의-등장-전" class="headerlink" title="도커의 등장 전,"></a>도커의 등장 전,</h3><p>기존에 서버를 관리하는 것은 매우 어려웠고 복잡한 영역이어서, 새 서버를 세팅하려면 그때마다 config등의 구축환경을 다시 세팅하고, 그 후에도 리눅스 버전이나 환경의 변화가 생기면 충돌이 일어나기 쉽상이었다.</p><p>한 서버에 다수의 프로그램을 설치하면 라이브러리, 포트 충돌을 고려한 설치가 굉장히 어려웠고, 마이크로서비스 아키텍쳐, DevOps 등의 등장으로 서버 관리는 더 어려워졌다.</p><h3 id="도커의-등장"><a href="#도커의-등장" class="headerlink" title="도커의 등장,"></a>도커의 등장,</h3><p>이후 도커의 등장으로 서버 관리의 방식은 완전히 바뀌었다.</p><p>도커는 컨테이너 기반의 오픈소스 가상화 플랫폼이다. 컨테이너 안에는 다양한 프로그램, 실행 환경을 ‘컨테이너’라는 개념으로 추상화하고 클라우드, PC 등 어디서든 실행할 수 있다. 구글에서는 모든 서비스들이 20억개의 컨테이너로 동작한다고 한다.</p><h3 id="VM-vs-Docker"><a href="#VM-vs-Docker" class="headerlink" title="VM vs Docker"></a>VM vs Docker</h3><p>컨테이너는 격리된 공간에서 프로세스가 동작하는 기술이다. 기존의 가상화 방식은 OS를 가상화하는 것이었다. VMware 등의 가상머신은 Host OS 위에 Guest OS 전체를 가상화한다. 이 방식은 사용법도 간단하고 여러가지 운영체제를 가상화할 수 있지만 무겁고 느리기 때문에 운영환경의 사용에는 적합하지 않았다.</p><p><img src="https://miro.medium.com/max/862/1*wOBkzBpi1Hl9Nr__Jszplg.png" alt="d11"></p><p>이후 CPU의 가상화 기술을 이용한 반가상화 방식이 등장한다. Guest OS가 필요하지만 전체 OS를 가상화하는 방식이 아니어서 성능은 향상되었다. 이 기술은 OpenStack, AWS 등의 클라우드 서비스의 가상 컴퓨터 기술의 기반이 되었다.</p><p>전가상화, 반가상화 모두 성능 문제가 있었다. 이를 개선한 프로세스 격리 방식이 등장한다. 리눅스에서 리눅스 컨테이너라고 하며 단순하게 프로세스를 격리시키는 방식이기 때문에 가볍고 빠르게 동작한다. CPU나 메모리 등의 자원을 프로세스가 필요한 만큼만 할당하고 더 필요하면 그때마다 추가적으로 할당하기 때문에 성능적인 손실이 거의 없었다.</p><p>하나의 서버에 다수의 컨테이너를 실행하면 서로 영향을 주지 않고 독립적으로 실행된다. 실행 중인 컨테이너에 접속하며 명령어 입력, 패키지 설치, 사용자 추가 등 모든 작업을 할 수 있다. 컨테이너를 만드는 시간은 길어야 2초로 가상머신보다 훨씬 빠르다.</p><p>이 전에도 프로세스 격리 방식의 가상화 기술(LXC, Jail 등)이 있었지만 성공하지는 못했다. 도커는 LXC를 기반으로 시작해서 이 후 자체적인 libcontainer 기술을 사용했고 runC 기술에 합쳐졌다. 도커가 성공한 이유는 존재하는 좋은 기술들을 잘 포장해서 오픈 소스로 배포했기 때문이 아닐까.</p><h3 id="Image-Container-…"><a href="#Image-Container-…" class="headerlink" title="Image, Container, …"></a>Image, Container, …</h3><p>도커에서 가장 중요한 개념은 컨테이너, 이미지이다. 이미지는 컨테이너 실행에 필요한 파일, 설정값을 모두 포함하고 있는 것이고 변하지 않는다. 이미지를 실행한 것이 컨테이너이고 여기서 추가, 변화되는 값은 컨테이너에 저장된다. 같은 이미지로 다수의 컨테이너를 생성할 수 있고 컨테이너의 변화가 생겨도 이미지에는 영향을 주지 않는다.</p><p>예를 들어 CentOS 이미지는 CentOS를 실행하기 위한 모든 파일, 설정값을 가지고 있고, Tensorflow 이미지 안에는 Tensorflow, Python, Jupyter 등 딥 러닝에 필요한 환경이 모두 들어가 있다. 이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 개발 환경 등의 구축을 위해서 이것저것 설치하고 설정할 필요가 없다. 새로운 서버가 추가되면 만들어 놓은 이미지를 다운받고 컨테이너만 생성하면 된다.</p><p>도커 이미지는 Dockerhub에서 업로드, 다운로드 할 수도 있다. 현재 공개된 이미지는 50만개가 넘고 누구나 쉽게 명령어를 이용하여 이미지를 만들고 배포하고(push) 다운로드(pull)받을 수 있다.</p><h3 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h3><p>도커 이미지는 컨테이너 실행에 대한 모든 정보를 담고 있기 때문에 용량이 매우 크다. 따라서 기존의 이미지에 파일 하나를 추가했다고 수백메가가 넘어가는 이미지를 다시 다운로드한다면 매우 비효율적일 수 밖에 없다.</p><p>도커는 레이어; Layer라는 개념을 사용한다. 유니온 파일 시스템을 이용하여 다수의 레이어를 하나의 파일시스템으로 사용할 수 있게 해준다. 이미지는 여러 개의 읽기 전용 레이어(Read-only Layer)로 구성되고 파일에 변화(추가, 수정)가 생기면 새로운 레이어가 생성된다.</p><p>예를 들어 CentOS 이미지가 C1 + C2 레이어의 집합이라면 이 이미지에서 nginx가 구동되는 환경의 이미지 레이어는 C1 + C2 + nginx 가 된다. 이런 식으로 기존의 이미지 레이어 위에 레이어가 추가되는 방식으로 최소한의 용량을 사용할 수 있게 된다. 여러대의 서버에 배포하는 것을 감안하면 엄청나게 영리한 설계이다.</p><h3 id="도입을-마치며"><a href="#도입을-마치며" class="headerlink" title="도입을 마치며"></a>도입을 마치며</h3><p>도커를 기반으로 한 오픈소스 프로젝트는 수십만개가 넘어가고 굉장히 활발히 진행되고 있다. 훌륭한 생테계를 기반으로 클라우드 컨테이너 세계에서 de facto(사실상 표준)가 되었다. 이번에는 도커에 대한 전반적인 역사와 개념을 매우 얕게 정리해보았는데 다음부터는 본격적으로 도커의 설치, 컨테이너 관리와 활용 등을 정리해보도록 하겠다.</p><h2 id="2-도커-설치하기"><a href="#2-도커-설치하기" class="headerlink" title="2. 도커 설치하기"></a>2. 도커 설치하기</h2><p>도커는 소스를 컴파일해서 설치하는 방법, 자동 설치 스크립트를 사용하는 방법, 리눅스 배포판의 패키지로 설치하는 방법이 있다. 소스를 컴파일해서 설치하는 방법은 복잡하니 직접 찾아보자.</p><h3 id="1-자동-설치-스크립트"><a href="#1-자동-설치-스크립트" class="headerlink" title="1. 자동 설치 스크립트"></a>1. 자동 설치 스크립트</h3><p>리눅스 버전을 자동으로 인식하여 도커 패키지를 설치해주는 스크립트이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -qO- https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure><p>이 스크립트로 도커를 설치하면 hello-world 이미지도 같이 설치되는데, 사용하지 않으므로 삭제하도록 하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm &#39;sudo docker ps -aq&#39;</span><br><span class="line">sudo docker rmi hello-world</span><br></pre></td></tr></table></figure><h3 id="2-패키지-직접-설치"><a href="#2-패키지-직접-설치" class="headerlink" title="2. 패키지 직접 설치"></a>2. 패키지 직접 설치</h3><ul><li>Ubuntu<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get nistall docker.io</span><br><span class="line">sudo ln -sf &#x2F;usr&#x2F;bin&#x2F;docker.io &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker</span><br></pre></td></tr></table></figure></li></ul><p><code>/usr/bin/docker.io</code> 실행파일을 <code>/usr/local/bin/docker</code> 로 링크해서 사용</p><ul><li>CentOS7<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker</span><br><span class="line">sudo service docker start #Docker 서비스 실행</span><br><span class="line">sudo chkconfig docker on #부팅시 자동 실행</span><br></pre></td></tr></table></figure></li></ul><ul><li>Mac, Windows의 경우는 <a href="https://docker.com/">도커 공식홈</a>에서 받고 설치하면 되므로 다른 글을 참조하자.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><p>도커 버전 명령어를 통해 설치가 잘 되었는지 확인해보자.</p><p>이로써 Docker 설치가 끝났다!</p><h2 id="3-이미지-받아서-실행하기-ft-컨테이너-명령어-sudo-입력-안하기"><a href="#3-이미지-받아서-실행하기-ft-컨테이너-명령어-sudo-입력-안하기" class="headerlink" title="3. 이미지 받아서 실행하기 (ft. 컨테이너 명령어, sudo 입력 안하기)"></a>3. 이미지 받아서 실행하기 (ft. 컨테이너 명령어, sudo 입력 안하기)</h2><h3 id="tip-sudo-입력하지-않기"><a href="#tip-sudo-입력하지-않기" class="headerlink" title="tip. sudo 입력하지 않기"></a>tip. sudo 입력하지 않기</h3><p>docker를 쓰다보면 <code>sudo</code>를 항상 붙여줘야 하는데 이는 docker 명령을 root 권한으로 실행해야 하기 때문에 일반 계정에서는 <code>sudo</code>가 항상 붙는 것이다. 매번 입력하기 귀찮고 빠뜨릴 때도 많다. <code>sudo</code>를 입력하지 않는 방법은 2가지이다.</p><ol><li>처음부터 root 계정으로 로그인하거나 root 계정으로 전환</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su #root 계정으로 전환</span><br></pre></td></tr></table></figure><ol start="2"><li>현재 계정을 docker 그룹에 포함</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $&#123;USER&#125;</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><h3 id="도커-이미지-다운로드-받아서-실행하기"><a href="#도커-이미지-다운로드-받아서-실행하기" class="headerlink" title="도커 이미지 다운로드 받아서 실행하기"></a>도커 이미지 다운로드 받아서 실행하기</h3><p>도커는 이미지를 만들거나 받아서 호스트에 저장한 후 컨테이너로 run해서 프로세스로 만든다. 무언가 실행하려면 이미지가 필요한 셈이다.</p><p>이미지를 직접 만드는 방법도 있고, docker hub를 이용해서 공식 이미지나 다른 사용자들이 만들어놓은 이미지를 다운로드받는 방법도 있다.</p><p>우선 Docker Hub에서 이미지를 받는 방법이다. 우분투 리눅스 이미지를 받아보겠다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure><p><code>docker pull &lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식이다. <code>latest</code>를 설정하면 최신 버전을 받는다. <code>latest</code> 대신 <code>16.04</code>, <code>18.04</code>를 입력해서 태그를 지정해 줄 수도 있다.<br>이미지 이름에서 <code>username/imagename:tagname</code> 형식을 사용하면 공식 이미지가 아닌 사용자 이미지를 받는다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker run -it --name hello ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>이제 docker images 명령어를 통해 이미지를 출력하여 도커 이미지가 잘 받아졌는지 확인하고 ubuntu 이미지를 컨테이너로 실행해보자.</p><p><code>docker run &lt;옵션&gt; &lt;이미지 이름&gt; &lt;실행할 파일&gt;</code> 형식이다.<br>위의 코드는 ubuntu 이미지를 컨테이너로 생성 후 이미지 안의 <code>/bin/bash</code>를 실행한다. 이미지 이름 대신 이미지 ID를 사용해도 좋다.</p><p><code>-it</code> 옵션을 사용하면 실행된 Bash 쉘에 입출력을 할 수 있다.<br><code>--name</code> 옵션을 사용하면 컨테이너 이름을 지정해줄 수 있고, 지정하지 않으면 자동으로 이름을 부여한다.</p><p>이제 <code>Host OS</code>와 완전 격리된 공간이 생성되었다. <code>cd</code>,<code>ls</code> 명령으로 확인해보면 완전 분리된 공간임을 알 수 있다. <code>exit</code>를 입력하면 Bash 쉘에서 빠져나온다. (도커 -&gt; HostOS)</p><p>저기서 만든 컨테이너에서 <code>exit</code>를 입력하면 <code>/bin/bash</code>파일을 직접 실행했기 때문에 컨테이너가 정지상태로 바뀐다.</p><p>여기서 컨테이너의 상태가 나왔는데, <strong>컨테이너의 상태나 시작, 종료</strong> 등은 어떻게 해야할까?</p><h3 id="컨테이너-관련-명령어"><a href="#컨테이너-관련-명령어" class="headerlink" title="컨테이너 관련 명령어"></a>컨테이너 관련 명령어</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a #모든 컨테이너 출력(정지 컨테이너 포함)</span><br><span class="line">docker ps #실행 중인 컨테이너만 출력</span><br><span class="line">docker start hello #hello 이름의 컨테이너 시작</span><br><span class="line">docker restart hello #hello 이름의 컨테이너 재시작(재부팅)</span><br><span class="line">docker attach hello #컨테이너에 접속(bash 쉘 접속)</span><br><span class="line">docker stop hello #hello 이름의 컨테이너 종료</span><br><span class="line">docker rm hello #hello 이름의 컨테이너 삭제</span><br><span class="line">docker rm -f hello #hello 이름의 컨테이너 강제삭제</span><br></pre></td></tr></table></figure><p>여기서 컨테이너를 삭제하는 명령어는 <code>rm</code>이고, 이미지를 삭제하는 명령어는 <code>rmi</code>를 쓰면 된다.</p><p>우분투 공식 이미지를 받아서 컨테이너화 시키고 그 컨테이너를 시작, 종료하는 명령어도 알게 되었다. 다음에는 나만의 Docker 이미지를 생성해보도록 하겠다.</p><h2 id="4-나만의-이미지-생성하기-ft-Dockerfile"><a href="#4-나만의-이미지-생성하기-ft-Dockerfile" class="headerlink" title="4. 나만의 이미지 생성하기(ft. Dockerfile)"></a>4. 나만의 이미지 생성하기(ft. Dockerfile)</h2><p>이전에 <code>Docker Hub</code>에서 만들어놓은 이미지를 다운로드 받아서 구동하는 것을 다뤘는데, 이번에는 <code>Dockerfile</code>을 직접 짜서 나만의 이미지를 만들어보려고 한다.</p><h3 id="들어가기-전에"><a href="#들어가기-전에" class="headerlink" title="들어가기 전에,"></a>들어가기 전에,</h3><p>사실 이 부분에 대해서 이해가 많이 어려웠다. <code>Container</code>에서 필요한 프로그램들을 다운로드 받고 <code>commit</code> 명령어를 사용해서 이미지를 만들어도 될텐데, 왜 굳이 <code>Dockerfile</code>을 bash 명령어를 써가며 이미지를 빌드해야 되는지 몰랐다.</p><p>그렇게 찾아본 결과 <code>commit</code> 명령어를 사용해서 이미지를 생성하는 방법은 실무에서 거의 쓰이지 않는다고 한다. 패키지 업데이트도 힘들고, 버전 관리도 까다로워서 <code>Dockerfile</code>을 파일화해서 관리하는 것이 <strong>버전 관리나 패키지 업데이트</strong> 등의 면에서도 우월하다는 것이다.</p><h3 id="이제-Dockerfile을-만들어보자"><a href="#이제-Dockerfile을-만들어보자" class="headerlink" title="이제 Dockerfile을 만들어보자."></a>이제 <code>Dockerfile</code>을 만들어보자.</h3><p>Dockerfile은 Docker 이미지 설정 파일이다. 이 파일에 설정된 내용대로 이미지를 생성한다. 먼저 example 디렉토리를 생성한 뒤 해당 디렉토리로 이동한다. 모든 빌드와 관련된 파일들이 한 폴더(example)에서 이루어진다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir example</span><br><span class="line">cd example</span><br></pre></td></tr></table></figure><p>이번에 다루는 이미지 빌드는 모든 과정을 Dockerfile과 쉘 스크립트 파일로 통합하는 방법이다.<br>그러면 <code>build-run.sh</code> 파일을 만들고 인자를 전달해서 실행하면 이미지를 만들고 컨테이너로 run까지 <em>one-click</em>으로 할 수 있게 된다.</p><h3 id="Dockerfile-관련-명령어"><a href="#Dockerfile-관련-명령어" class="headerlink" title="Dockerfile 관련 명령어"></a>Dockerfile 관련 명령어</h3><p><code>Dockerfile</code>을 만들기 전에 필요한 명령어들을 몇 개 알아보자.</p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>어떤 이미지를 기반으로 할지 설정한다. Docker 이미지는 기존에 만들어진 이미지를 기반으로 생성한다. 만약 완전히 새로운 이미지를 생성하고 싶으면(“맨 땅에서 시작한다”) <code>FROM scratch</code>를 쓰면 된다.</p><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><p>메인테이너(제작자) 정보이다. Author(저자)라고 생각하면 된다.</p><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>쉘 스크립트/명령을 실행한다.<br>이미지 생성 중에는 사용자 입력을 받을 수 없다. 그래서 <code>apt-get install</code> 명령어를 사용할 경우 <code>-y</code> 옵션을 붙여야 한다.</p><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>호스트와 공유할 디렉터리 목록이다. <code>docker run</code> 명령어에서 <code>-v</code> 옵션으로 설정할 수도 있다.</p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>빌드시에 주어진 컨텍스트에서 첫번째 인자로 주어진 파일, 폴더를 두번째 인자로 주어진 컨테이너 경로에 추가한다.</p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>컨테이너가 시작되었을 때 실행할 실행 파일/쉘 스크립트이다.</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>호스트와 연결할 포트 번호이다. 외부와 통신을 가능하게 노출시켜 준다. 기본적으로 컨테이너 실행시 <code>docker run -p</code> 옵션을 주게 되면 암묵적으로 <code>EXPOSE</code>가 된다.</p><p>이 명령어들을 바탕으로 <code>ubuntu 18.04</code> 기반의 <code>xrdp</code>, <code>vim</code> 등의 필수 패키지들이 설치된 나만의 우분투 이미지 <code>Dockerfile</code>을 만들어 보았다.</p><p><code>Dockerfile</code></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="comment">#set root password</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;root:ubuntu&quot;</span> | chpasswd</span></span><br><span class="line"><span class="comment"># install packages</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install --yes --force-yes --no-install-recommends \</span></span><br><span class="line"><span class="bash">        sudo \</span></span><br><span class="line"><span class="bash">        software-properties-common \</span></span><br><span class="line"><span class="bash">        xorg \</span></span><br><span class="line"><span class="bash">        xserver-xorg \</span></span><br><span class="line"><span class="bash">        xfce4 \</span></span><br><span class="line"><span class="bash">        gnome-themes-standard \</span></span><br><span class="line"><span class="bash">        gtk2-engines-pixbuf \</span></span><br><span class="line"><span class="bash">        file-roller \</span></span><br><span class="line"><span class="bash">        evince \</span></span><br><span class="line"><span class="bash">        gpicview \</span></span><br><span class="line"><span class="bash">        leafpad \</span></span><br><span class="line"><span class="bash">        xfce4-whiskermenu-plugin \</span></span><br><span class="line"><span class="bash">        ttf-ubuntu-font-family \</span></span><br><span class="line"><span class="bash">        dbus-x11 \</span></span><br><span class="line"><span class="bash">        vnc4server \</span></span><br><span class="line"><span class="bash">        vim \</span></span><br><span class="line"><span class="bash">        xfce4-terminal \</span></span><br><span class="line"><span class="bash">        xrdp \</span></span><br><span class="line"><span class="bash">        xorgxrdp</span></span><br><span class="line"><span class="comment"># add the user and designate sudo authority</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> adduser ubuntu</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;ubuntu:ubuntu&quot;</span> | chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;ubuntu ALL=(ALL:ALL) ALL&quot;</span> &gt;&gt; /etc/sudoers</span></span><br><span class="line"><span class="comment">#set the port number of xrdp</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/3389/port_number/&#x27;</span> /etc/xrdp/xrdp.ini</span></span><br><span class="line"><span class="comment">#install xubuntu-desktop</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install --yes --force-yes --no-install-recommends \</span></span><br><span class="line"><span class="bash">        xubuntu-desktop \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get clean \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span></span><br><span class="line"><span class="comment"># insert entrypoint.sh and set ENTRYPOINT</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> entrypoint.sh /entrypoint.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /entrypoint.sh</span></span><br></pre></td></tr></table></figure><p>여기서</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN sed -i &#39;s&#x2F;3389&#x2F;port_number&#x2F;&#39; &#x2F;etc&#x2F;xrdp&#x2F;xrdp.ini</span><br><span class="line">cs</span><br></pre></td></tr></table></figure><p><code>sed</code> 명령어는 파일에 있는 특정 단어를 찾아서 다른 단어로 바꾸는 역할을 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT &#x2F;entrypoint.sh</span><br></pre></td></tr></table></figure><p><code>ENTRYPOINT</code> 명령어는 컨테이너가 처음 실행될 때(run/start 시) 한번 수행되는 스크립트를 지정한다. 따라서 이미지를 빌드하고 컨테이너로 run하면 <code>entrypoint.sh</code> 쉘 스크립트가 실행된다.</p><p><code>entrypoint.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># create a dbus system daemon</span><br><span class="line">service dbus start</span><br><span class="line"># create the sock dir properly</span><br><span class="line">&#x2F;bin&#x2F;sh &#x2F;usr&#x2F;share&#x2F;xrdp&#x2F;socksetup</span><br><span class="line"># run xrdp and xrdp-sesman in the foreground so the logs show in docker</span><br><span class="line">xrdp-sesman -ns &amp;</span><br><span class="line">xrdp -ns &amp;</span><br><span class="line"># run shell for interface</span><br><span class="line">&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p><code>dbus</code>, <code>xrdp</code> 서비스를 위한 <code>entrypoint</code> 설정이다.</p><p>이제 이미지 빌드에 필요한 Dockerfile, entrypoint.sh를 만들었으니 docker run에 필요한 최종 파일인 <code>build-run.sh</code> 파일을 만들어보자.</p><p><code>build-run.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#edit the port number in Dockerfile</span><br><span class="line">sed -i &#39;s&#x2F;port_number&#x2F;&#39;$1&#39;&#x2F;&#39; .&#x2F;Dockerfile</span><br><span class="line">#start building image from Dockerfile</span><br><span class="line">docker build -t $2 .</span><br><span class="line">#run container from built image</span><br><span class="line">docker container run -d -it --name $3 -p $1:$1 $2</span><br><span class="line">docker container start $3</span><br><span class="line">#return Dockerfile into first state</span><br><span class="line">sed -i &#39;s&#x2F;&#39;$1&#39;&#x2F;port_number&#x2F;&#39; .&#x2F;Dockerfile</span><br></pre></td></tr></table></figure><p><code>$1, $2, $3</code>은 <code>build-run.sh</code>의 인자 번호이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;build-run.sh [포트번호] [이미지 이름] [컨테이너 이름]</span><br></pre></td></tr></table></figure><p>위 명령어를 실행하게 되면 해당 포트 번호, 이미지 이름, 컨테이너 이름으로 이미지 빌드, 실행(run)까지 완료하게 된다.</p><p>이미지 빌드에는 시간이 다소 걸린다. 잘 참고 기다리면 나만의 이미지가 생성된다. 이 이미지를 도커 허브에 올려보고 다른 os 기반에서 다운로드 받아서 컨테이너에 올려보자.</p><h2 id="5-도커-살펴보기-이미지-컨테이너-관련-명령어"><a href="#5-도커-살펴보기-이미지-컨테이너-관련-명령어" class="headerlink" title="5. 도커 살펴보기 (이미지, 컨테이너 관련 명령어)"></a>5. 도커 살펴보기 (이미지, 컨테이너 관련 명령어)</h2><p>지금까지 기본적인 명령어와 이미지 생성 방법을 알아보았다. 이제 이미지, 컨테이너 정보를 조회하는 방법, 컨테이너에서 파일 꺼내기, 변경된 파일을 확인하기, 변경 사항을 이미지로 저장하는 방법을 알아보자.</p><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history hello:0.1</span><br></pre></td></tr></table></figure><p><code>docker history &lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식이다. 이미지 이름 대신 ID를 사용할 수도 있다.</p><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp hello:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf .&#x2F;</span><br></pre></td></tr></table></figure><p><code>docker cp &lt;컨테이너 이름&gt;:&lt;경로&gt; &lt;호스트 경로&gt;</code> 형식이다. 호스트 경로에 컨테이너 내부 파일 <code>nginx.conf</code> 파일이 복사된다.</p><h4 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;zini &lt;zinirun.blogspot.com&gt;&quot; -m &quot;add hello.txt&quot; hello hello:0.2</span><br></pre></td></tr></table></figure><p><code>docker commit &lt;옵션&gt; &lt;컨테이너 이름&gt; &lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식이다. 컨테이너의 변경 사항을 이미지 파일로 생성한다. -a 옵션은 커밋한 사용자 정보, -m 옵션은 로그 메시지를 설정한다. 그렇게 hello 컨테이너를 <code>hello:0.2</code> 이미지로 생성하게 된다.</p><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff hello</span><br></pre></td></tr></table></figure><p><code>docker diff &lt;컨테이너 이름&gt;</code> 형식이다. <code>컨테이너 ID</code>를 사용해도 된다. 출력하게 되면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@zini-01:&#x2F;home&#x2F;zini&#x2F;doc_ex$ docker diff hello</span><br><span class="line">C &#x2F;run</span><br><span class="line">A &#x2F;run&#x2F;xrdp</span><br><span class="line">A &#x2F;run&#x2F;xrdp&#x2F;sockdir</span><br><span class="line">A &#x2F;run&#x2F;dbus</span><br><span class="line">A &#x2F;run&#x2F;dbus&#x2F;pid</span><br><span class="line">A &#x2F;run&#x2F;dbus&#x2F;system_bus_socket</span><br><span class="line">C &#x2F;tmp</span><br><span class="line">A &#x2F;tmp&#x2F;.X11-unix</span><br><span class="line">C &#x2F;var</span><br><span class="line">C &#x2F;var&#x2F;log</span><br><span class="line">C &#x2F;var&#x2F;log&#x2F;xrdp.log</span><br><span class="line">C &#x2F;var&#x2F;log&#x2F;xrdp-sesman.log</span><br></pre></td></tr></table></figure><p>변경된 파일 목록을 출력하는데 <code>A</code>는 추가된 파일, <code>C</code>는 변경된 파일, <code>D</code>는 삭제된 파일이다.</p><h4 id="inspect"><a href="#inspect" class="headerlink" title="inspect"></a>inspect</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect hello</span><br></pre></td></tr></table></figure><p><code>docker inspect &lt;이미지 or 컨테이너 이름&gt;</code> 형식이다. ID를 사용해도 된다. 이미지나 컨테이너의 세부 정보를 출력한다.</p><h2 id="6-DockerHub-사용하기"><a href="#6-DockerHub-사용하기" class="headerlink" title="6. DockerHub 사용하기"></a>6. DockerHub 사용하기</h2><p>이번에는 Docker를 좀 더 다양하게 활용하는 방법, <code>Docker Hub</code> 사용법을 알아보겠다.</p><h3 id="Docker-Login"><a href="#Docker-Login" class="headerlink" title="Docker Login"></a>Docker Login</h3><p>우선 <a href="https://dockerhub.com/">Docker Hub</a>에 로그인 후 회원가입하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><p>명령어를 입력하여 docker 계정으로 로그인하자.</p><h3 id="로컬에-이미지-저장하기"><a href="#로컬에-이미지-저장하기" class="headerlink" title="로컬에 이미지 저장하기"></a>로컬에 이미지 저장하기</h3><p>Docker 레지스트리 서버도 Docker Hub에 이미지로 제공된다. 먼저 레지스트리 이미지를 받는다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry:latest</span><br></pre></td></tr></table></figure><p><code>registry:latest</code> 이미지를 컨테이너로 실행한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 hello-registry \</span><br><span class="line">    -v &#x2F;tmp&#x2F;registry:&#x2F;tmp&#x2F;registry \</span><br><span class="line">    registry:latest</span><br></pre></td></tr></table></figure><p>이 명령어를 실행하면 이미지 파일이 호스트의 <code>/tmp/registry</code> 디렉터리에 저장된다.</p><h3 id="push-명령으로-이미지-올리기"><a href="#push-명령으로-이미지-올리기" class="headerlink" title="push 명령으로 이미지 올리기"></a>push 명령으로 이미지 올리기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag hello:0.1 zini&#x2F;hello:0.1</span><br><span class="line">docker push zini&#x2F;hello:0.1</span><br></pre></td></tr></table></figure><p><code>docker tag &lt;이미지 이름&gt;:&lt;태그&gt; &lt;Docker 사용자명/레지스트리 URL&gt;/&lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식이다.</p><p><code>docker hub</code>에 업로드할 때는 이미지 이름의 형식을 맞춰줘야 한다. 도커허브의 아이디가 <code>zini</code>라면 <code>zini/이미지이름:태그</code> 형식으로 <code>tag</code> 명령어를 이용하여 이미지 이름을 바꿔주고 <code>push</code>하면 업로드 된다.</p><h3 id="pull-명령으로-이미지-받기"><a href="#pull-명령으로-이미지-받기" class="headerlink" title="pull 명령으로 이미지 받기"></a>pull 명령으로 이미지 받기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull zini&#x2F;hello:0.1</span><br></pre></td></tr></table></figure><p>이전에서도 우분투 공식 이미지를 받을 때</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure><p>명령어를 사용했을 것이다. 우분투는 공식 이미지이기 때문에 URL/ID 필요없이 <code>&lt;이미지이름&gt;:&lt;태그&gt;</code> 형식을 사용하면 된다. 방금 <code>push</code>로 올린 이미지를 <code>pull</code>로 받아보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@zini-01:&#x2F;home&#x2F;zini&#x2F;doc_ex$ docker images</span><br><span class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zini&#x2F;hello           0.1                 e100ad1021f7        22 hours ago        1.17GB</span><br></pre></td></tr></table></figure><p><code>docker images</code> 명령어로 확인하면 이미지가 받아진 것을 확인할 수 있다.</p><p>이제 이 이미지를 <strong>삭제</strong>해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi zini&#x2F;hello:0.1</span><br></pre></td></tr></table></figure><p><code>rmi</code> 명령어를 사용하면 이미지를 삭제할 수 있다. 강제로 삭제할 경우 <code>-f</code> 옵션을 추가하면 된다.</p><h2 id="7-도커-컨테이너-연결하기-nginX-mongoDB"><a href="#7-도커-컨테이너-연결하기-nginX-mongoDB" class="headerlink" title="7. 도커 컨테이너 연결하기 (nginX, mongoDB)"></a>7. 도커 컨테이너 연결하기 (nginX, mongoDB)</h2><p>도커로 이미지를 생성할 때 필요한 프로그램, 예를 들면 웹 서버, DB 등의 프로그램들을 모두 설치할 수도 있지만 보통은 프로그램별로 이미지를 생성 후 컨테이너화해서 연결한다.</p><p>이번에는 nginx 웹 서버와 <code>MongoDB</code>의 이미지를 생성 후 연결해보도록 하겠다.</p><p>우선 <code>MongoDB</code> 이미지를 생성한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name db -d mongo</span><br></pre></td></tr></table></figure><p>필자의 경우 80 포트는 이미 우분투 host os에서 nginx 서버로 돌아가고 있기 때문에 8888 포트를 열어주어서 도커의 80 포트와 연결하였다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name web -d -p 8888:80 --link db:db nginx</span><br></pre></td></tr></table></figure><p><code>-p 8888:80</code> 에 주목하자. <code>-p</code> 옵션은 호스트의 포트와 도커의 가상 포트를 연결한다. 형식은 <code>-p &lt;Host Port&gt;:&lt;Docker Port&gt;</code>이다. 필자는 이 부분을 모르고 <code>8888:8888</code>로 연결했다가 같이 스터디하는 친구에게 혼났다. 도커에 대한 개념을 확실하게 알고 했어야 했는데..</p><p>이 명령어를 실행하면 <code>nginx</code> 최신 이미지를 받고 앞서 실행한 db 컨테이너 <code>mongoDB</code>와 연결하여 <code>web</code> 이라는 이름의 <code>nginx</code> 서버를 컨테이너로 실행한다.</p><p>일반적으로 IP를 통해서 브라우저로 접속할 경우 포트를 입력하지 않으면 80 포트로 자동 접속한다. nginx 서버를 그렇게 연결하고 싶다면 <code>-p 80:80</code> 옵션으로 실행하면 된다.</p><p><img src="https://1.bp.blogspot.com/-pK1I_-ZRbvA/XiWMMlctOCI/AAAAAAAAAQo/7LMipZuSFp8KAuAnnGazBvdzBFedfQ8UwCLcBGAsYHQ/s640/%25EA%25B5%25AC%25EB%258F%2599%25ED%2599%2595%25EC%259D%25B8.png" alt="d71"></p><p>브라우저로 <code>&lt;IP&gt;:&lt;호스트 연결 포트&gt;</code>로 접속하면 nginx 기본 페이지가 출력됨을 확인할 수 있다!</p><p>이 <code>nginx</code> 컨테이너는 <code>mongoDB</code> 컨테이너와 연결되어 있어서 <code>web</code> 컨테이너 안에서 <code>db:27017</code> 주소로 <code>db</code> 컨테이너의 <code>mongoDB</code>에 접속할 수 있다.</p><h2 id="8-Git-Docker로-앱-배포하기"><a href="#8-Git-Docker로-앱-배포하기" class="headerlink" title="8. Git, Docker로 앱 배포하기"></a>8. Git, Docker로 앱 배포하기</h2><p>서버를 운영하고 애플리케이션을 배포하는 방법은 서비스 환경, 구축하는 사람에 따라 다양한 방법이 나올 수 있다. 이번에는 분산형 버전 관리 시스템 Git과 Docker를 이용한 애플리케이션 배포 방법을 알아보겠다.</p><p><em>참고 도서: 가장 빨리 만나는 Docker (이재홍)</em></p><h3 id="서버-한-대에-애플리케이션-배포하기"><a href="#서버-한-대에-애플리케이션-배포하기" class="headerlink" title="서버 한 대에 애플리케이션 배포하기"></a>서버 한 대에 애플리케이션 배포하기</h3><p>대략적인 순서는 다음과 같다.</p><ol><li>개발자 PC에서 애플리케이션 개발</li><li>git push 명령으로 소스를 서버에 업로드</li><li>서버에서 저장소에 git push 명령이 발생하며 git hook을 실행</li><li>git hook에서 도커 이미지를 생성, 이미지를 컨테이너로 실행</li></ol><p>이제 본격적으로 배포하는 과정을 알아보자.</p><ol><li>개발자 PC에서 <a href="http://git-scm.com/">Git 설치</a>, 저장소 생성<br>개발자 PC에 <code>Git</code>을 설치한다.</li></ol><p><em>우분투, CentOS에서 install git 명령어를 사용해도 상관없다. 필자는 윈도우의 Git Bash로 실습하겠다.</em></p><p><code>Git Bash</code>를 실행하고 명령어로 Git 저장소를 생성하고, 저장소 디렉토리로 이동한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init exampleapp</span><br><span class="line">cd exampleapp</span><br></pre></td></tr></table></figure><p><code>git config</code> 명령으로 이메일, 이름을 설정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email zini@example.com</span><br><span class="line">git config --global user.name &quot;zini&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>개발자 PC에서 <code>Node.js</code>로 웹 서버 작성 및 도커파일(Dockerfile) 작성<br>개발자 PC에서 간단히 <code>Node.js</code>로 웹서버를 작성한다. 그 내용을 <code>app.js</code>로 저장한다.</li></ol><p><code>app.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">var app &#x3D; express();</span><br><span class="line"> </span><br><span class="line">app.get([&#39;&#x2F;&#39;, &#39;&#x2F;index.html&#39;], function (req, res) &#123;</span><br><span class="line">  res.send(&#39;Hello Docker&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(80);</span><br></pre></td></tr></table></figure><p><code>npm</code> 패키지 사용을 위해 다음과 같이 작성하고 <code>package.json</code>로 저장한다.</p><p><code>package.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;exampleapp&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Hello Docker&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;4.4.x&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 <code>Dockerfile</code>을 작성하자. 서버에서 도커 이미지를 생성할 수 있도록 개발자 PC에서 <code>Dockerfile</code>을 작성한다. 다음 내용을 <code>Dockerfile</code>로 저장한다.</p><p><code>Dockerfile</code></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y nodejs npm</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> app.js /var/www/app.js</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> package.json /var/www/package.json</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /var/www</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> nodejs app.js</span></span><br></pre></td></tr></table></figure><p>모든 파일(js, json, Dockefile)은 git 디렉토리의 <code>exampleapp</code>에 위치시킨다.</p><p><code>git add</code>, <code>git commit</code> 명령으로 개발자 PC의 <code>exampleapp</code> 저장소에 파일을 커밋한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add app.js package.json</span><br><span class="line">git commit -m &quot;add source&quot;</span><br><span class="line">git add Dockerfile</span><br><span class="line">git commit -m &quot;add Dockerfile&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>개발자 PC에서 SSH 키 생성<br>개발자 PC에서 <code>ssh-keygen</code> 명령을 실행하여 SSH키를 생성한다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>명령어 실행시 나오는 문장에서는 모두 Enter로 넘어간다.<br>이제 <code>/home/(사용자 계정)/.ssh</code> 디렉토리에 <code>id_rsa.pub</code>, <code>id_rsa.pub</code> 파일이 생성되었다.</p><ol start="4"><li>서버에 Git 설치 및 저장소 생성<br>이제 서버를 설정하자. Docker가 리눅스 전용이므로 리눅스 서버에서 작업하자.<br>필자는 우분투를 사용하겠다. 서버에 <code>Git</code>을 설치하는 것부터 시작하자.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>현재 리눅스 계정의 홈 디렉토리(<code>/home/&lt;사용자 계정&gt;</code>)에 <code>exampleapp</code> 저장소를 생성한다. 그리고 개발자 PC에서 push한 소스를 받을 수 있도록 <code>receive.denycurrentbranch</code>를 <code>ignore</code>로 설정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init exampleapp</span><br><span class="line">git config receive.denycurrentbranch ignore</span><br></pre></td></tr></table></figure><ol start="5"><li>서버에 Docker 설치 및 SSH 키 설정<br>이제 서버에 Docker를 설치한다. 설치되어 있다면 넘어가자.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker.io</span><br><span class="line">sudo ln -sf &#x2F;usr&#x2F;bin&#x2F;docker.io &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker</span><br></pre></td></tr></table></figure><p>서버의 <code>/home/&lt;서버 사용자 계정&gt;</code> 디렉토리에 <code>.ssh</code> 디렉토리를 생성 후 권한을 설정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir .ssh</span><br><span class="line">chmod 700 .ssh</span><br></pre></td></tr></table></figure><p><em>필자는 .ssh 폴더가 왜인지 모르게 이미 존재해서 따로 설정하지 않았다.</em></p><p><code>.ssh</code> 디렉토리에 <code>authorized_keys</code> 파일을 생성한다(vi 명령어로). 개발자 PC에서 생성한 <code>id_rsa.pub</code> 파일의 내용을 (메모장으로 열어) 복사해서 <code>authorized_keys</code> 파일에 붙여넣는다.</p><p><code>ssh-rsa ~</code> 형식의 내용일 것이다. <code>authorized_keys</code> 파일도 권한을 설정한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure><p>이제 개발자 PC에서 비밀번호 없이 <code>git push</code> 명령을 사용할 수 있다.</p><ol start="6"><li>서버에 Git Hook 설정<br>개발자 PC에서 git push 명령으로 소스를 올리면 Docker 이미지, 컨테이너를 생성하도록 <code>Git Hook</code>을 설정한다.</li></ol><p>다음 내용을 <code>/home/&lt;서버 사용자 계정&gt;/exampleapp/.git/hooks</code> 디렉토리에 <code>post-receive</code>로 저장한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"> </span><br><span class="line">APP_NAME&#x3D;exampleapp</span><br><span class="line">APP_DIR&#x3D;$HOME&#x2F;$APP_NAME</span><br><span class="line">REVISION&#x3D;$(expr substr $(git rev-parse --verify HEAD) 1 7)</span><br><span class="line"> </span><br><span class="line">GIT_WORK_TREE&#x3D;$APP_DIR git checkout -f</span><br><span class="line"> </span><br><span class="line">cd $APP_DIR</span><br><span class="line">docker build --tag $APP_NAME:$REVISION .</span><br><span class="line">docker stop $APP_NAME</span><br><span class="line">docker rm $APP_NAME</span><br><span class="line">docker run -d --name $APP_NAME -p 80:80 $APP_NAME:$REVISION</span><br></pre></td></tr></table></figure><p>이제 <code>post-receive</code> 파일에 실행권한을 부여한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><p><code>Git Hook</code> 설정이 끝났다.</p><ol start="7"><li>개발자 PC에서 소스 Push<br>이제 개발자 PC로 돌아와서 <code>exampleapp</code> 저장소 디렉토리로 이동한 뒤 <code>git remote add</code> 명령어로 <code>origin</code> 주소를 설정한다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 서버사용자계정@IP주소&#x2F;도메인:exampleapp</span><br></pre></td></tr></table></figure><p><code>git push</code> 명령으로 소스를 서버에 업로드한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>명령 출력 결과에서 Docker 이미지와 컨테이너가 생성되는 모습을 볼 수 있다. <code>git push</code> 명령어가 완전히 끝나면 웹 브라우저를 실행하여 IP 주소를 입력해보자. <code>Hello Docker</code>가 표시된다. 소스를 수정한 뒤 서버에 <code>Push</code> 하면 새 Docker 컨테이너가 생성된다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>기본적인 도커의 설치, 사용부터 배포까지 알아보았다. 반년 전에 공부했던 포스팅 내용을 한번에 정리했는데 이게 나은 것 같다. 도커는 정말 무궁무진하다. 여러가지 토이 플젝이던, 큰 플젝이던 거의 90%의 웹 서비스에는 도커를 사용했다. 한번 쓸 줄 알면 다음 쓰는 건 쉽다. 한번씩 자동화 스크립트를 만들어서 배포해보면 (물론 기업에서 사용하는 스크립트와는 비교불가겠지만) 경이로움을 금치 못한다. 도커는 충분히 공부할 가치가 있는 플랫폼이라고 생각한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-Guide&quot;&gt;&lt;a href=&quot;#Docker-Guide&quot; class=&quot;headerlink&quot; title=&quot;Docker Guide&quot;&gt;&lt;/a&gt;Docker Guide&lt;/h1&gt;&lt;img src=&quot;https://subicura.com/as</summary>
      
    
    
    
    <category term="cloud" scheme="https://zinirun.github.io/categories/cloud/"/>
    
    <category term="docker" scheme="https://zinirun.github.io/categories/cloud/docker/"/>
    
    
    <category term="docker" scheme="https://zinirun.github.io/tags/docker/"/>
    
    <category term="cloud" scheme="https://zinirun.github.io/tags/cloud/"/>
    
    <category term="linux" scheme="https://zinirun.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>NHN Toast Cloud 설명서 (구축에서 활용까지)</title>
    <link href="https://zinirun.github.io/2020/08/15/toast-a-to-z/"/>
    <id>https://zinirun.github.io/2020/08/15/toast-a-to-z/</id>
    <published>2020-08-15T12:34:53.000Z</published>
    <updated>2020-08-15T13:22:59.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NHN-Toast-Cloud-가이드"><a href="#NHN-Toast-Cloud-가이드" class="headerlink" title="NHN Toast Cloud 가이드"></a>NHN Toast Cloud 가이드</h1><p><img src="https://www.bloter.net/wp-content/uploads/2020/07/NHN-TOAST_CI-765x353.png" alt="toast-logo"></p><p>본 글은 단국대학교의 2020년 서버 스터디에서 Toast 서버를 지원받아서 구축부터 개발, 배포환경을 구축해본 경험을 토대로 작성하였다. 원래는 <a href="http://zinirun.blogspot.com/2020/01/nhn-toast-1-instance.html">이전 블로그</a>에 시리즈(?)처럼 연재를 했었는데, 이번에 블로그 이사하는 김에 한 포스트에 기본적인 설명서의 느낌으로 다시 게시한다.</p><p>클라우드 서비스 시장의 생태계는 압도적으로 <a href="https://aws.amazon.com/">Amazon AWS</a>가 점유하고 있다. EC2, Lambda 등의 정말 세부적이고 <code>devOps</code>에 최적화된 선두주자이기에 대부분의 서버 인프라를 <code>aws</code>로 구축하는 경우가 많다. <code>Toast Cloud</code>는 내 클라우드 공부의 첫 번째 재료(?)였는데, 생각보다 편하고 꽤 많은 서비스 <strong>(KB금융그룹, EBS, CJ ENM, GS SHOP, 요기요 등 국내 위주)</strong> 에서 사용중인 클라우드였다.</p><p>이제 본격적인 NHN Toast Cloud 가이드를 시작한다.<br><strong>기본적으로 <code>Instance</code>에는 <code>Ubuntu</code>를 사용하였다.</strong></p><h2 id="1-Instance-생성"><a href="#1-Instance-생성" class="headerlink" title="1. Instance 생성"></a>1. Instance 생성</h2><p><img src="https://1.bp.blogspot.com/-PodZj7F8YdI/XhG56u3rfzI/AAAAAAAAALo/Hldjc9B6quMYCayXFWwi4qx8FfljtEkJACLcBGAsYHQ/s320/1%25EC%2584%259C%25EB%25B9%2584%25EC%258A%25A4%25EC%2583%259D%25EC%2584%25B1.JPG" alt="t11"></p><p>토스트 프로젝트를 생성한다.<br>필자의 경우는 학교측에서 1인당 프로젝트 1개를 지원해주었다.</p><p><img src="https://1.bp.blogspot.com/-dcePQqooGVk/XhG56iqAaxI/AAAAAAAAALk/PRkEpKG_qosBiBxQJIk0uM1hosEAEo56wCLcBGAsYHQ/s640/2%25EC%259D%25B8%25EC%258A%25A4%25ED%2584%25B4%25EC%258A%25A4%25ED%2581%25B4%25EB%25A6%25AD.JPG" alt="t12"></p><p>메뉴에서 우측의 Compute - Instance를 선택한다.</p><p><img src="https://1.bp.blogspot.com/-8HYUI-fSVjE/XhG57eSiUpI/AAAAAAAAALs/1ut2dRuCyXAeNyNifmpcwywwgbTCvlDIgCLcBGAsYHQ/s320/3%25EC%2584%259C%25EB%25B9%2584%25EC%258A%25A4%25ED%2599%259C%25EC%2584%25B1%25ED%2599%2594.JPG" alt="t13"></p><p>서비스 활성화 확인.</p><p><img src="https://1.bp.blogspot.com/-1TbVJNr-h0M/XhG57S71JLI/AAAAAAAAALw/hT8V7V0JJnUYp4WJHL_DH6E8SwEHyTl7QCLcBGAsYHQ/s1600/4%25EC%259D%25B8%25EC%258A%25A4%25ED%2584%25B4%25EC%258A%25A4%25EC%2583%259D%25EC%2584%25B1.JPG" alt="t14"></p><p>Instance - 관리에 들어가서 인스턴스를 생성한다.</p><p><img src="https://1.bp.blogspot.com/-iZjCENyJZQA/XhG57qM6iOI/AAAAAAAAAL0/hQb4zpF4O10GYIWz34HlOHSgA9sRQJgZgCLcBGAsYHQ/s640/5%25EC%259D%25B4%25EB%25AF%25B8%25EC%25A7%2580%25EC%2584%25A0%25ED%2583%259D.JPG" alt="t15"></p><p> 원하는 운영체제가 설치된 이미지를 선택한다.<br>사용할 이미지에 따라 인스턴스 타입(flavor)이 달라지므로 가장 먼저 이미지를 선택한다.<br>필자의 경우 교수님이 정해준 Ubuntu 선택.</p><p><img src="https://1.bp.blogspot.com/-xngTO7YFjEM/XhG58AfweHI/AAAAAAAAAL4/lmxhjYguIQ4tAVNkeJUMPTZGU6lTXPg-wCLcBGAsYHQ/s640/6%25EC%259D%25B8%25EC%258A%25A4%25ED%2584%25B4%25EC%258A%25A4%25EC%25A0%2595%25EB%25B3%25B4.JPG" alt="t16"></p><p>인스턴스 정보를 입력한다.<br>인스턴스 타입은 과금이 결정되니 사용 목적과 OS를 잘 고려해서 선택한다.<br>필자의 경우 Standard 1를 선택했으나 CPU, 메모리가 턱없이 부족해서 m2.c2m4로 변경..<br>(메모리가 2GB 이하인 경우 가상머신 사용을 포기해야할 정도로 느리다..)</p><p><img src="https://1.bp.blogspot.com/-fFj4_tRAvnE/XhG58XQyEZI/AAAAAAAAAL8/ca0BSs3k1vo42z7fVysPhBdTtz35X_3TACLcBGAsYHQ/s400/7%25EB%25B3%25B4%25EC%2595%2588%25EA%25B7%25B8%25EB%25A3%25B9%25EC%2583%259D%25EC%2584%25B1.JPG" alt="t17"></p><p>인스턴스가 속할 보안 그룹을 지정한다.<br>인스턴스 1개는 여러 보안 그룹에 속할 수 있다.</p><p><img src="https://1.bp.blogspot.com/-7VD5EK1gXZw/XhG58iVEITI/AAAAAAAAAMA/st_OI9-_bhACiusKeYi1B0vuxbIXEtOFQCLcBGAsYHQ/s640/8%25EB%25B3%25B4%25EC%2595%2588%25EC%25A0%2595%25EC%25B1%2585%25EC%25B6%2594%25EA%25B0%2580.JPG" alt="t18"></p><p>SSH(포트 22)는 Putty의 접속을 위해,<br>RDP(포트 3389)는 Windows 원격 접속(가상머신) 사용을 위해서 입력했다.</p><p><img src="https://1.bp.blogspot.com/-4aHE0tuNWE4/XhG58x-rNTI/AAAAAAAAAME/hpIAie8NaxoW6nLq9bGDXMmEHRJzeOiGgCLcBGAsYHQ/s400/9%25EC%259D%25B8%25EC%258A%25A4%25ED%2584%25B4%25EC%258A%25A4%25EC%2583%259D%25EC%2584%25B1.JPG" alt="t19"></p><p>예약 스크립트는 인스턴스의 첫번째 부팅이 완료된 후 네트워크 설정 등 초기화 과정이 끝나면 실행된다. 예약 스크립트는 root 권한으로 실행된다.</p><p><img src="https://1.bp.blogspot.com/-rPN9K-i5YlY/XhG56pZAeQI/AAAAAAAAALg/cd1byF-djlExyL_IQkGGmdqqSn4PTH5NACLcBGAsYHQ/s640/10%25EC%25B5%259C%25EC%25A2%2585%25EC%2583%259D%25EC%2584%25B1.JPG" alt="t110"></p><p>인스턴스 생성을 누르는 순간 입력한 정보에 따라서 과금이 시작되니 최종 확인 후 생성하도록 한다.</p><h2 id="2-Floating-IP-생성-및-인스턴스-연결"><a href="#2-Floating-IP-생성-및-인스턴스-연결" class="headerlink" title="2. Floating IP 생성 및 인스턴스 연결"></a>2. Floating IP 생성 및 인스턴스 연결</h2><p><code>Floating IP</code>는 클라우드 플랫폼의 등장으로 생긴 개념이다.<br>클라우드 내에서 가상머신이 인터넷, 외부망에 접근하기 위해 배정받는 IP이다.</p><p><code>Floating IP</code>를 통해 사용자가 외부망에서 클라우드 플랫폼의 가상머신에 접근할 수도 있고,<br>반대로 가상머신에서 외부망으로 접근할 수 있다.<br><code>Fixed IP</code>(가상머신 생성될 때 자동 배정)와 달리 자유롭게 재할당도 가능하다.</p><p><img src="https://1.bp.blogspot.com/-2vlCz_ULjsU/XhHAADqn9RI/AAAAAAAAAMo/VZohELIgD4AsEMr_t0-sR7GNNipnQOCCQCLcBGAsYHQ/s320/1.%25EC%2583%259D%25EC%2584%25B1.JPG" alt="t21"></p><p>Instance - 플로팅 IP에서 플로팅 IP를 생성한다.</p><p><img src="https://1.bp.blogspot.com/-h2Ii90Rm7HE/XhHAAIVRHcI/AAAAAAAAAMg/toAdaCRZ2G8d0T0LEsS_a-G2PgDPmRG-ACLcBGAsYHQ/s400/2.%25EC%2583%259D%25EC%2584%25B1%25EB%25B2%2584%25ED%258A%25BC.JPG" alt="t22"></p><p>인스턴스와 같이 플로팅 IP를 생성하면 과금된다. (인스턴스 연결하지 않아도 과금)</p><p><img src="https://1.bp.blogspot.com/-4bXQTeB7llA/XhHAACWURsI/AAAAAAAAAMk/XGaXCfvwV04CTyiYqW494dUO07m6VgX9wCLcBGAsYHQ/s400/3.%25EC%2597%25B0%25EA%25B2%25B0.JPG" alt="t23"><br>인스턴스와 플로팅 IP를 연결한다.</p><p><img src="https://1.bp.blogspot.com/-h3CN9-bKyWE/XhHCv4y7yHI/AAAAAAAAANA/D_m4F6ChDmkuQODsdtmJS2pzaeE2QSmmACLcBGAsYHQ/s640/4.%25EC%259D%25B8%25EC%258A%25A4%25ED%2584%25B4%25EC%258A%25A4%25EC%2597%25B0%25EA%25B2%25B0.JPG" alt="t24"></p><p>연결할 인스턴스를 선택하고 플로팅 IP와 인스턴스를 연결한다.</p><p>이제 해당 Floating IP로 Putty, VM 등에서 플랫폼에 접근할 수 있다.</p><h2 id="3-Putty-연결"><a href="#3-Putty-연결" class="headerlink" title="3. Putty 연결"></a>3. Putty 연결</h2><p><img src="https://1.bp.blogspot.com/-PRpxL_IhrF8/XhHN-e87nSI/AAAAAAAAANQ/Ce0NTkcutEgzE91MZYlApluHY2RcQdy9gCLcBGAsYHQ/s400/1.%25EC%25A0%25A0-%25EB%25A1%259C%25EB%2593%259C.JPG" alt="t31"><br>PuTTY Key Generator (Putty 설치 시 같이 설치됨)를 실행한다.<br>연결할 인스턴스의 키페어(.PEM File)을 Load한다.<br>파일 선택 시 파일 타입을 모든 파일로 선택해야 .PEM 파일이 보인다.<br><img src="https://1.bp.blogspot.com/-K7yKYFR8hZc/XhHN-agtpYI/AAAAAAAAANU/JZOwSb0X8TwkMhGYGeKHkTT1yDPCbu7jwCLcBGAsYHQ/s400/2.%25EC%25A0%25A0-%25EC%25A0%2580%25EC%259E%25A5.JPG" alt="t32"><br>Save private key로 .ppk 파일 변환<br><img src="https://1.bp.blogspot.com/-AqnhiA-tdYk/XhHN-WMWMyI/AAAAAAAAANY/NRoUHUEClLo5LogvxpXt08-aVxsPwhhkgCLcBGAsYHQ/s400/3.%25ED%2591%25B8%25ED%258B%25B0-%25EC%2584%25B8%25EC%2585%2598.JPG" alt="t33"><br>Session에 Host name을 입력한다.<br><strong>여기서 Error가 발생했다.</strong><br>Host Name에 IP 주소만 입력하면 오류가 발생한다.<br>에러 내용과 해결은 마지막에 언급하겠다!<br><img src="https://1.bp.blogspot.com/-54daPDqy-2w/XhHN_Db_6NI/AAAAAAAAANc/q-W1S3YzY9seHfCGyYvfyI0VZbwukjXjwCLcBGAsYHQ/s400/4.%25ED%2591%25B8%25ED%258B%25B0-%25EC%25BB%25A4%25EB%2584%25A5%25EC%2585%2598-%25EB%258D%25B0%25EC%259D%25B4%25ED%2584%25B0.JPG" alt="t34"><br>Connection - Data 에서 Auto-login username을 root/ubuntu/main 으로 설정<br><img src="https://1.bp.blogspot.com/-d79Cmsl7mL0/XhHN_asqn0I/AAAAAAAAANg/eB1zsSsNg6suQLdpnBnKzYG5R-IyTndIgCLcBGAsYHQ/s400/5.%25ED%2591%25B8%25ED%258B%25B0-SSH-Auth.JPG" alt="t35"><br>Connection - SSH - Auth 에서 변환한 .ppk 파일을 로드</p><p>PuTTY 연결 정보는 Session에서 Saved Sessions에 저장해놓으면 다음부터 쉽게 연결할 수 있다. (더블클릭하면 연결)</p><p><strong>—– Error —–</strong></p><p><img src="https://1.bp.blogspot.com/-ehPvicrQiig/XhHOADpM7OI/AAAAAAAAANo/I3TEFdZEU2gwhFUFo-i0Mmj4WuOmqfhsgCLcBGAsYHQ/s400/A%25EC%2597%2590%25EB%259F%25AC.JPG" alt="t36"><br>Host Name을 IP로만 설정하고 접속 시<br>PuTTY Fatal Error : No supported authentication methods available (server sent: publickey)<br>오류가 발생한다.<br><img src="https://1.bp.blogspot.com/-EUBTon9gcoc/XhHN_Q_s-II/AAAAAAAAANk/fCiQiitb-OsofJ4rAmqkVlH_xIVut8_SwCLcBGAsYHQ/s400/A1%25EC%2597%2590%25EB%259F%25AC%25ED%2595%25B4%25EA%25B2%25B0.JPG" alt="t37"><br>이는 ubuntu의 host로 접속한다는 정보를 명시하지 않았기 때문인데<br>Host Name을 ubuntu@serverIP 형식으로 입력 후 접속하면 문제가 해결된다.</p><p>이를 해결하기 위해서 keygen의 문제인지, PuTTY가 문제인지, 키페어가 문제인지 아무리 구글링하고 찾아도 답이 나오지 않았는데 TOAST Handbook 내용을 보니 Host Name에 저런 형식으로 입력하라는 내용이 뻔히 적혀있어서 어이없는 내 실수임을 자책했다 :(</p><h2 id="4-Ubuntu-Desktop-설치-Windows에서-연결"><a href="#4-Ubuntu-Desktop-설치-Windows에서-연결" class="headerlink" title="4. Ubuntu Desktop 설치, Windows에서 연결"></a>4. Ubuntu Desktop 설치, Windows에서 연결</h2><h3 id="Ubuntu-Desktop-설치"><a href="#Ubuntu-Desktop-설치" class="headerlink" title="Ubuntu Desktop 설치"></a>Ubuntu Desktop 설치</h3><p>Ubuntu Desktop 설치 방법이다.</p><p>PuTTY의 Terminal로 인스턴스에 접속한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래 명령어를 이용해서 apt-get업데이트</span></span><br><span class="line">sudo apt-getupdate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 명령어를 이용해서 xubuntu-desktop설치</span></span><br><span class="line">sudo apt-getinstallxubuntu-desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 명령어를 이용해서 xrdp 설치</span></span><br><span class="line">sudo apt-getinstallxrdp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 명령어를 이용해서 xorgxrdp 설치</span></span><br><span class="line">sudo apt-getinstallxorgxrdp</span><br><span class="line"></span><br><span class="line"><span class="comment"># MaxSessions 값 변경 및 항목 주석 처리</span></span><br><span class="line">sudo vi/etc/xrdp/sesman.ini</span><br><span class="line"><span class="comment">#[Security]항목의 TerminalServerUsers=tsusers, TerminalServerAdmins=tsadmins 주석 처리 MaxSessions 값을 50에서 100으로 변경</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xrdp 서비스가 자동으로 실행되도록 설정</span></span><br><span class="line">sudo systemctl enablexrdp</span><br></pre></td></tr></table></figure><p>이제 <code>sudoer</code> 등록(사용자 등록)만 남았다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래 명령어를 이용해서 사용자 추가</span></span><br><span class="line">sudo adduser“사용자ID”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 명령어를 이용해서 sudoers 등록</span></span><br><span class="line">sudo visudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파일이 열리면 rootALL=(ALL:ALL)ALL부분 다음 라인에 위에서 추가한 사용자를 동일하게 추가</span></span><br><span class="line">“사용자ID”ALL=(ALL:ALL)ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ctrl+O 후 파일명을 sudoers로 변경 후 저장</span></span><br><span class="line">(overwrite하겠냐고 물어보면 Y입력)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 저장 후 Ctrl+X로 빠져나옴</span></span><br></pre></td></tr></table></figure><p>이로서 <code>Ubuntu Desktop</code> 설치와 사용자 등록이 끝난다.</p><h3 id="Windows-원격-데스크톱에서-Ubuntu-Server-연결"><a href="#Windows-원격-데스크톱에서-Ubuntu-Server-연결" class="headerlink" title="Windows 원격 데스크톱에서 Ubuntu Server 연결"></a>Windows 원격 데스크톱에서 Ubuntu Server 연결</h3><p><img src="https://1.bp.blogspot.com/-wejJJKHWCgo/XhHbkP-mZAI/AAAAAAAAAOA/pDrhbh_3YyQySrEcsB8TR7LOJEapkIKMACLcBGAsYHQ/s400/1.png" alt="41"><br>원격 데스크톱 연결 프로그램을 실행한다.<br><img src="https://1.bp.blogspot.com/-CYrGhJ4GIwM/XhHbkZm2ZfI/AAAAAAAAAOE/VqAiX0F-pUkfZNL8nfi7knxyDAjbhl-FACLcBGAsYHQ/s400/2.JPG" alt="42"><br>컴퓨터 항목에 인스턴스에 연결된 Floating IP를 입력하고 연결한다.<br><img src="https://1.bp.blogspot.com/-XIAlnLLN4zE/XhHbkRMvTUI/AAAAAAAAAOI/AG9dKa92GHAopv6V32If4Y_DoWk38yQCwCLcBGAsYHQ/s400/3.JPG" alt="43"><br>추가한 사용자 ID와 password를 입력 후 연결하면 Ubuntu로 접속된다.</p><p>macOS 사용자의 경우 <code>CoRD</code>와 같은 클라이언트를 사용해 접속한다.</p><h2 id="5-GCC-설치"><a href="#5-GCC-설치" class="headerlink" title="5. GCC 설치"></a>5. GCC 설치</h2><p><code>Ubuntu desktop</code> 또는 <code>Putty</code>에서 터미널을 열어 <code>GCC</code> 최신 버전을 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br><span class="line"><span class="comment"># 현재 gcc 버전을 확인한다.</span></span><br><span class="line"></span><br><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/<span class="built_in">test</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># GCC 상위 버전이 저장되어 있는 저장소를 추가하고 업데이트한다.</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install gcc-9</span><br><span class="line"><span class="comment"># GCC 9를 설치한다.</span></span><br><span class="line"></span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 20</span><br><span class="line">sudo update-alternatives --config gcc</span><br><span class="line"><span class="comment"># GCC 9 기본 컴파일러 설정</span></span><br><span class="line"></span><br><span class="line">gcc --version</span><br><span class="line"><span class="comment"># 최종 GCC 버전 확인</span></span><br></pre></td></tr></table></figure><p>이렇게 <code>gcc</code> 설치 후 vi 에디터로 간단한 코드를 구현하였는데 <strong>컴파일 과정에서 에러가 발생했다.</strong><br><img src="https://1.bp.blogspot.com/-4MwAe-1jU_k/XhMNYV3s9FI/AAAAAAAAAOg/OfoTp5oOr1cOJVHbveaqSGS0trlw4vB0ACLcBGAsYHQ/s640/A.%25EC%25BB%25B4%25ED%258C%258C%25EC%259D%25BC%25EC%2597%2590%25EB%259F%25AC-%25EB%259D%25BC%25EC%259D%25B4%25EB%25B8%258C%25EB%259F%25AC%25EB%25A6%25ACx.JPG" alt="51"><br><strong>fatal error : stdio.h: No such file or directory</strong><br><code>stdio.h</code>에 대한 라이브러리가 설치되지 않아서 인식하지 못한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><p><code>gcc build</code> 관련 필수 라이브러리를 설치하면 해결된다.</p><h2 id="6-개발환경-OpenJDK-Eclipse-VS-Code-구축"><a href="#6-개발환경-OpenJDK-Eclipse-VS-Code-구축" class="headerlink" title="6. 개발환경(OpenJDK, Eclipse, VS Code) 구축"></a>6. 개발환경(OpenJDK, Eclipse, VS Code) 구축</h2><h3 id="OpenJDK-설치-Oracle-라이선스-변경으로-OpenJDK-대체"><a href="#OpenJDK-설치-Oracle-라이선스-변경으로-OpenJDK-대체" class="headerlink" title="OpenJDK 설치 (Oracle 라이선스 변경으로 OpenJDK 대체)"></a>OpenJDK 설치 (Oracle 라이선스 변경으로 OpenJDK 대체)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래 명령어로 JDK8 인스톨</span></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 인스톨 완료 후 아래 명령어로 Java version확인</span></span><br><span class="line">java-version</span><br><span class="line"></span><br><span class="line"><span class="comment"># Java버전이 여러 개 설치된 경우 아래 명령어를 통해 default버전 선택</span></span><br><span class="line">sudo update-alternatives --config java</span><br><span class="line"></span><br><span class="line"><span class="comment"># Java환경 변수 설정 / .profile파일을 vi로 열어 다음 내용 추가</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=“/usr”</span><br><span class="line"><span class="built_in">export</span> PATH=“<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span>”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 저장 후 아래 명령어 수행하여 .profile파일 갱신</span></span><br><span class="line">source.profile</span><br></pre></td></tr></table></figure><h3 id="Eclipse-설치"><a href="#Eclipse-설치" class="headerlink" title="Eclipse 설치"></a>Eclipse 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 터미널에서 아래 명령어로 firefox 인스톨</span></span><br><span class="line">sudo apt-get install firefox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 브라우저에서 http://www.eclipse.org/ 로 접속한 후 [다운로드] 메뉴 클릭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 최신 버전인 Eclipse IDE YYYY-MM항목에서 Download Packages 링크 클릭</span></span><br><span class="line">Java EE또는 Java Developers중 선택하여 64 bit 링크 클릭하여 다운로드</span><br><span class="line"></span><br><span class="line"><span class="comment"># 터미널에서 Downloads 폴더 이동 후 다음 명령어를 이용하여 압축 해제</span></span><br><span class="line">(폴더 이동 명령어: <span class="built_in">cd</span>)</span><br><span class="line">tar xvfz ”다운받은 이클립스 파일명”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 다음 명령어를 이용하여 /opt(추가 패키지를 설치할 때 사용하는 공간) 디렉토리로 이동 sudo mv eclipse /opt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 다음 명령어를 이용하여 X윈도우를 위한 바로가기 생성</span></span><br><span class="line">sudo vi /usr/share/applications/eclipse.desktop 후 다음 내용 추가 후 저장</span><br><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Eclipse</span><br><span class="line">Comment=Eclipse IDE</span><br><span class="line">Exec=/opt/eclipse/eclipse</span><br><span class="line">Icon=/opt/eclipse/icon.xpm</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development</span><br><span class="line">StartupNotif=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>이렇게 하면 <code>Eclipse</code> 설치 및 바로가기 생성까지 완료된다.</p><p>이후 샘플 코드를 작성하고 실행한다.</p><p>X윈도우에서 <code>Applications &gt; Development &gt; Eclipse</code> 실행 후<br>프로젝트를 추가해서 java 파일을 작성한다.<br><img src="https://1.bp.blogspot.com/-vWvSEf-ohQs/XhMP1z4xYoI/AAAAAAAAAPA/8-r8QPu7KnQ5s7EBwqBLW38uuNQFoG6EwCLcBGAsYHQ/s640/HelloZini%25EC%25B6%259C%25EB%25A0%25A5.JPG" alt="61"><br>정상적으로 작동된다.</p><h3 id="VS-Code-Visual-Studio-Code-설치"><a href="#VS-Code-Visual-Studio-Code-설치" class="headerlink" title="VS Code (Visual Studio Code) 설치"></a>VS Code (Visual Studio Code) 설치</h3><ul><li><p>브라우저에서 <a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a> 로 접속한 후 <code>Debian, Ubuntu</code><br>항목 클릭</p></li><li><p>최신 버전의 deb파일 다운로드<br>code*.deb파일을 다운로드 하여 저장</p></li><li><p>터미널에서 Downloads 폴더 이동 후 다음 명령어를 이용하여 설치<br><code>sudo dpkg -i ”다운받은 Visual Studio Code 설치파일”</code></p></li><li><p>만약 missing dependencies 문제가 발생하면 다음 명령어 실행<br><code>sudo apt-finstall</code></p></li><li><p>/usr/lib/x86_64-linux-gnu 폴더로 이동하여 다음 명령어 실행하여 2개의 파일 백업</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp libxcb.so.1 libxcb.so.1.bak</span><br><span class="line">sudo cp libxcb.so.1.1.0 libxcb.so.1.1.0.bak</span><br></pre></td></tr></table></figure></li><li><p>파일 백업 후 다음 명령어 실행</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &#39;s&#x2F;BIG-REQUESTS&#x2F;_IG-REQUESTS&#x2F;&#39;&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb.so.1</span><br><span class="line">sudo sed -i &#39;s&#x2F;BIG-REQUESTS&#x2F;_IG-REQUESTS&#x2F;&#39;&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb.so.1.1.0</span><br></pre></td></tr></table></figure></li><li><p>두 파일을 /usr/share/code 폴더에 복사</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp libxcb.so.1 libxcb.so.1.1.0 &#x2F;usr&#x2F;share&#x2F;code</span><br></pre></td></tr></table></figure></li><li><p><code>Applications Menu &gt; Development &gt; Visual Studio Code</code> 실행</p></li></ul><p>이로써 개발환경 구축을 위한 <strong>OpenJDK, Eclipse, VS Code</strong> 설치가 끝났다.</p><h2 id="7-이미지-생성"><a href="#7-이미지-생성" class="headerlink" title="7. 이미지 생성"></a>7. 이미지 생성</h2><p>이미지를 생성하면 새 인스턴스를 기존 인스턴스로 복제할 수 있다.<br>지금까지 인스턴스에 개발 환경 구축까지 완료했으니, 저장해놓은 이미지를 새 인스턴스 생성시의 세팅에서 적용하면 된다.</p><p>고스트로 윈도우 이미지를 만들어서 윈도우 복원에 사용하는 것과 비슷하다.</p><p>이제 이미지 생성 방법이다.</p><p>이미지를 생성하기 위해서는 대상 인스턴스가 Shutdown 상태여야 한다.</p><p><img src="https://1.bp.blogspot.com/-uLMEEswHXGo/XhQnoOy-piI/AAAAAAAAAPc/seM5i48ktX84CgJHeHlCmjRfB0q8BjE1gCLcBGAsYHQ/s640/1.%25EC%259D%25B8%25EC%258A%25A4%25ED%2584%25B4%25EC%258A%25A4%25EC%25A2%2585%25EB%25A3%258C.JPG" alt="t71"><br>인스턴스 관리에서 대상 인스턴스를 선택한 후 종료시킨다.</p><p><img src="https://1.bp.blogspot.com/-NqbUKzEL7R4/XhQnoNs9_YI/AAAAAAAAAPY/5uXGZ0nfX_A7_-gdv8CZYNI50wkFFJeBACLcBGAsYHQ/s400/2.%25EC%25A2%2585%25EB%25A3%258C.JPG" alt="t72"><br>종료 재질문에 확인해준다.</p><p><img src="https://1.bp.blogspot.com/-sVmZkgwMcpM/XhQnoKzCHaI/AAAAAAAAAPg/kgZesajgmuEpD-vAwXWtP5_XBMloQLbKACLcBGAsYHQ/s400/3.%25EC%259D%25B4%25EB%25AF%25B8%25EC%25A7%2580%25EC%2583%259D%25EC%2584%25B1%25EB%25B2%2584%25ED%258A%25BC.JPG" alt="t73"><br>셧다운이 확인되었다면 이미지 생성 버튼을 누른다.</p><p><img src="https://1.bp.blogspot.com/-98Km_EK6cxY/XhQnpMv72eI/AAAAAAAAAPk/aEQCNtEkkLIjviKTccWKItztkT0TsPRSQCLcBGAsYHQ/s400/4.%25EC%259D%25B4%25EB%25AF%25B8%25EC%25A7%2580%25EC%2583%259D%25EC%2584%25B1.JPG" alt="t74"><br>인스턴스를 확인하고 이미지 이름을 설정한 후 확인해준다.</p><p><img src="https://1.bp.blogspot.com/-03D8WqPhtTI/XhQnpCmd67I/AAAAAAAAAPo/OnhUpQTXw9wGVonYrOyZCglUogh4BhuxgCLcBGAsYHQ/s640/5%252C%25ED%2599%2595%25EC%259D%25B8.JPG" alt="t75"><br>인스턴스 &gt; 이미지에 들어가서 이미지가 생성되고 있는지 확인할 수 있다.<br>생성에는 다소 시간이 걸린다.</p><p>이로써 이미지 생성이 끝났다!</p><h2 id="8-Ubuntu-웹서버-nginX-구축"><a href="#8-Ubuntu-웹서버-nginX-구축" class="headerlink" title="8. Ubuntu 웹서버(nginX) 구축"></a>8. Ubuntu 웹서버(nginX) 구축</h2><p>웹 서버 종류에는 Apache, Nginx 등등이 있지만<br>아파치 점유율을 무섭게 따라잡고 있다는 엔진엑스를 설치해보기로 했다.</p><h3 id="보안정책-수정"><a href="#보안정책-수정" class="headerlink" title="보안정책 수정"></a>보안정책 수정</h3><p><img src="https://1.bp.blogspot.com/-xnUBn6cJlI0/XhWuuuvB-eI/AAAAAAAAAQQ/b2EI6aDWd-ghyQLi9TOBVM9PcdgYexQ8QCLcBGAsYHQ/s640/1.%25EB%25B3%25B4%25EC%2595%2588%25EC%25A0%2595%25EC%25B1%2585%25EB%25B3%2580%25EA%25B2%25BD.JPG" alt="t81"></p><p>우선 토스트에서 보안정책 수정이 필요하다.</p><p>클라이언트가 HTTP(인터넷 브라우저)로 서버에 접속하면 80포트로 접속하게 되는데,<br>수신에서 80포트 보안을 열어놓지 않으면 접속되지 않기 때문에 웹 서버가 무의미해진다.</p><h3 id="nginX-설치"><a href="#nginX-설치" class="headerlink" title="nginX 설치"></a>nginX 설치</h3><p>이제 <code>Ubuntu</code>에 <code>nginx</code>를 설치한다.<br><code>apt-get</code> 방식과 소스코드를 내려받아서 컴파일하는 2가지 방식이 있지만 편의를 위해 <code>apt-get</code> 설치를 이용하겠다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>위 명령어로 nginx를 설치 후</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>nginx 버전을 확인한다.<br>이로서 nginx 설치는 끝났다.</p><p>우선 nginx 사용 시의 알아둬야할 명령어이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 시작</span></span><br><span class="line">$ sudo service nginx start</span><br><span class="line"><span class="comment"># 재시작</span></span><br><span class="line">$ sudo service nginx restart</span><br><span class="line"><span class="comment"># 중지</span></span><br><span class="line">$ sudo service nginx stop</span><br><span class="line"><span class="comment"># 상태</span></span><br><span class="line">$ sudo service nginx status</span><br><span class="line"><span class="comment"># 설정 reload</span></span><br><span class="line">$ sudo service nginx reload</span><br></pre></td></tr></table></figure><p>nginX 서비스를 시작하고 플로팅IP를 통해 브라우저로 서버를 접속해보면<br><strong>Welcome to nginx!</strong> 페이지가 나올 것이다.</p><p>Nginx 기본 설정은 <a href="https://extrememanual.net/9976">익스트림 매뉴얼의 포스트</a>의 도움을 많이 받았는데, 정말 잘 설명되어 있어서 참고하면 좋겠다.</p><h2 id="9-Ubuntu-FTP-서버-설치와-사용"><a href="#9-Ubuntu-FTP-서버-설치와-사용" class="headerlink" title="9. Ubuntu FTP 서버 설치와 사용"></a>9. Ubuntu FTP 서버 설치와 사용</h2><p>우분투의 기본 FTP 서버인 <code>vsftpd</code>를 설치하고 이용해보자. vsftpd에서 <code>vs</code>는 <code>Very Secure</code>을 의미한다. 기존 FTP 서버의 보안 취약점을 보완했기 때문에 붙여졌다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><p>설치는 끝났다. 이제 vsftpd의 기본 설정값 중 몇 가지를 변경해야 한다. 설정파일 vsftpd.conf 을 편집하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/vsftpd.conf</span><br></pre></td></tr></table></figure><p>보안을 위해 익명 사용자는 사용할 수 없도록 해야한다.</p><p><code>anonymous_enable</code> 파라미터 값이 NO 인지 확인한다. 익명 사용자 접속을 허용하려면 YES로 바꿔주면 된다.</p><p>파일 읽기 뿐만 아니라 파일 쓰기도 가능하게 해야한다.</p><p><code>write_enable=YES</code> 라인을 찾아서 주석 표시 <code>#</code>을 제거하자.</p><p>기본 설정을 마쳤다. 변경사항을 적용하기 위해서 vsftpd 서비스를 재시작하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service vsftpd restart</span><br></pre></td></tr></table></figure><p>이제 <code>vsftpd</code>를 사용할 수 있는 사용자를 추가할 차례이다. <code>testuser</code> 사용자를 추가해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser testuser</span><br></pre></td></tr></table></figure><p>비밀번호 입력을 하고, <code>Full Name[]</code> 부터는 그냥 엔터 키를 치고 넘어가고 Y를 입력하면 된다.</p><p>FTP 서버 쪽에서 준비할 작업은 모두 끝났다. 이제 파일질라를 사용하거나 윈도우 탐색기의 ftp를 이용해서 접속할 수 있다. 이때 FTP의 사용자 ID와 패스워드는 <code>adduser</code>에서 추가한 사용자의 정보로 로그인하면 된다.</p><h2 id="가이드를-마치며"><a href="#가이드를-마치며" class="headerlink" title="가이드를 마치며"></a>가이드를 마치며</h2><p>Toast Handbook Guide를 베이스로 Ubuntu 관련 구글링을 참고하여 서버 스터디에서 선두주자를 맡았다. 현재도 학교에서 대여중인 토스트 서버를 사용하고 있는데, 아직까지 불편한 점을 느낀 적은 딱히 없고, 사용할 때마다 NHN의 기술력에 놀라곤 한다. NHN Toast 클라우드 센터가 국내에는 판교에 있다고 한다. <strong>가고싶다</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NHN-Toast-Cloud-가이드&quot;&gt;&lt;a href=&quot;#NHN-Toast-Cloud-가이드&quot; class=&quot;headerlink&quot; title=&quot;NHN Toast Cloud 가이드&quot;&gt;&lt;/a&gt;NHN Toast Cloud 가이드&lt;/h1&gt;&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="cloud" scheme="https://zinirun.github.io/categories/cloud/"/>
    
    <category term="toast" scheme="https://zinirun.github.io/categories/cloud/toast/"/>
    
    
    <category term="cloud" scheme="https://zinirun.github.io/tags/cloud/"/>
    
    <category term="linux" scheme="https://zinirun.github.io/tags/linux/"/>
    
    <category term="toast" scheme="https://zinirun.github.io/tags/toast/"/>
    
    <category term="ubuntu" scheme="https://zinirun.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 - Day 2 JS and CSS clock</title>
    <link href="https://zinirun.github.io/2020/08/15/js-course30-2/"/>
    <id>https://zinirun.github.io/2020/08/15/js-course30-2/</id>
    <published>2020-08-15T11:59:22.000Z</published>
    <updated>2020-08-15T12:33:31.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-2-JS-and-CSS-clock"><a href="#Day-2-JS-and-CSS-clock" class="headerlink" title="Day 2 - JS and CSS clock"></a>Day 2 - JS and CSS clock</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/xu87YWbr4X0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="START"><a href="#START" class="headerlink" title="START"></a>START</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS + CSS Clock<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clock&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clock-face&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand hour-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand min-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand second-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html &#123;</span><br><span class="line">        background: #018ded url(https://unsplash.it/1500/1000?image=881&amp;blur=5);</span><br><span class="line">        background-size: cover;</span><br><span class="line">        font-family: &quot;helvetica neue&quot;;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 10px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        font-size: 2rem;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex: 1;</span><br><span class="line">        min-height: 100vh;</span><br><span class="line">        align-items: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.clock</span> &#123;</span></span><br><span class="line">        width: 30rem;</span><br><span class="line">        height: 30rem;</span><br><span class="line">        border: 20px solid white;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        margin: 50px auto;</span><br><span class="line">        position: relative;</span><br><span class="line">        padding: 2rem;</span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 0 0 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.1</span>), <span class="selector-tag">inset</span> 0 0 0 3<span class="selector-tag">px</span> <span class="selector-id">#efefef</span>,</span></span><br><span class="line"><span class="css">          <span class="selector-tag">inset</span> 0 0 10<span class="selector-tag">px</span> <span class="selector-tag">black</span>, 0 0 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.clock-face</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        transform: translateY(</span><br><span class="line">          -3px</span><br><span class="line"><span class="css">        ); <span class="comment">/* account for the height of the clock hands */</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.hand</span> &#123;</span></span><br><span class="line">        width: 50%;</span><br><span class="line">        height: 6px;</span><br><span class="line">        background: black;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 50%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FINISHED"><a href="#FINISHED" class="headerlink" title="FINISHED"></a>FINISHED</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS + CSS Clock<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clock&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clock-face&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand hour-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand min-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand second-hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html &#123;</span><br><span class="line">        background: #018ded url(https://unsplash.it/1500/1000?image=881&amp;blur=5);</span><br><span class="line">        background-size: cover;</span><br><span class="line">        font-family: &quot;helvetica neue&quot;;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 10px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        font-size: 2rem;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex: 1;</span><br><span class="line">        min-height: 100vh;</span><br><span class="line">        align-items: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.clock</span> &#123;</span></span><br><span class="line">        width: 30rem;</span><br><span class="line">        height: 30rem;</span><br><span class="line">        border: 20px solid white;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        margin: 50px auto;</span><br><span class="line">        position: relative;</span><br><span class="line">        padding: 2rem;</span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 0 0 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.1</span>), <span class="selector-tag">inset</span> 0 0 0 3<span class="selector-tag">px</span> <span class="selector-id">#efefef</span>,</span></span><br><span class="line"><span class="css">          <span class="selector-tag">inset</span> 0 0 10<span class="selector-tag">px</span> <span class="selector-tag">black</span>, 0 0 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.clock-face</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        transform: translateY(</span><br><span class="line">          -3px</span><br><span class="line"><span class="css">        ); <span class="comment">/* account for the height of the clock hands */</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.hand</span> &#123;</span></span><br><span class="line">        width: 50%;</span><br><span class="line">        height: 6px;</span><br><span class="line">        background: black;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 50%;</span><br><span class="line">        transform-origin: 100%;</span><br><span class="line">        transform: rotate(90deg);</span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.05s</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(0<span class="selector-class">.1</span>, 2<span class="selector-class">.7</span>, 0<span class="selector-class">.58</span>, 1);</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> secHand = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.second-hand&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> minHand = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.min-hand&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> hourHand = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.hour-hand&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">setClock</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> sec = now.getSeconds();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> secDeg = (sec / <span class="number">60</span>) * <span class="number">360</span> + <span class="number">90</span>;</span></span><br><span class="line"><span class="javascript">        secHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;secDeg&#125;</span>deg)`</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> min = now.getMinutes();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> minDeg = (min / <span class="number">60</span>) * <span class="number">360</span> + (sec / <span class="number">60</span>) * <span class="number">6</span> + <span class="number">90</span>;</span></span><br><span class="line"><span class="javascript">        minHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;minDeg&#125;</span>deg)`</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> hour = now.getHours();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> hourDeg = (hour / <span class="number">12</span>) * <span class="number">360</span> + (min / <span class="number">60</span>) * <span class="number">30</span> + <span class="number">90</span>;</span></span><br><span class="line"><span class="javascript">        hourHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;hourDeg&#125;</span>deg)`</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">setInterval</span>(setClock, <span class="number">1000</span>);</span></span><br><span class="line">      setClock();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>rotate</code> css 속성을 자주 접하지 않아 난해했다. 아무리 돌려도 중간을 중심으로 침이 돌아가지 않아서 솔루션을 봤는데, css를 수정했어야 했다.</p><p><code>.hand</code> css 속성에</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform-origin</span>: 100%;</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(90<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.05s</span>;</span><br><span class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(0<span class="selector-class">.1</span>, 2<span class="selector-class">.7</span>, 0<span class="selector-class">.58</span>, 1);</span><br></pre></td></tr></table></figure><p>위의 항목을 추가한다. 이 작업만 하면 초마다, 분마다, 시간마다 침이 몇 도(<code>degree</code>) 움직여야 하는지만 알면 <code>Date()</code>를 사용하여 현재 초, 분, 시간을 받아올 수 있다. 시계는 1초마다 움직이므로 <code>setInterval(function, 1000)</code>으로 시계를 움직이는 함수를 작성해서 실행한다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day-2-JS-and-CSS-clock&quot;&gt;&lt;a href=&quot;#Day-2-JS-and-CSS-clock&quot; class=&quot;headerlink&quot; title=&quot;Day 2 - JS and CSS clock&quot;&gt;&lt;/a&gt;Day 2 - JS and CSS</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 30 시작 - Day 1 Drum Kit</title>
    <link href="https://zinirun.github.io/2020/08/15/js-course30-1/"/>
    <id>https://zinirun.github.io/2020/08/15/js-course30-1/</id>
    <published>2020-08-15T11:23:36.000Z</published>
    <updated>2020-08-15T11:59:53.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript30과-VanillaJS"><a href="#Javascript30과-VanillaJS" class="headerlink" title="Javascript30과 VanillaJS"></a>Javascript30과 VanillaJS</h2><p><a href="https://javascript30.com/">Javascript 30</a>은 Wes Bos가 강의하는 Vanilla JS만을 이용하여 30개의 프로젝트를 만드는 프로그램이다. 프레임워크, 컴파일러, 라이브러리 등이 없는 순수한 자바스크립트인 Vanilla JS로 완벽한 결과물을 만들 수 있다. 그래도 JS를 접한지 1년이 넘어가고, 나름 만들어본 프로젝트도 많았지만 Day 1을 시작하며 한참을 반성했다.</p><h2 id="Javscript30-시작하기"><a href="#Javscript30-시작하기" class="headerlink" title="Javscript30 시작하기"></a>Javscript30 시작하기</h2><p><a href="https://javascript30.com/">Javascript 30</a> 사이트에서 강의를 제공하고, 유튜브에서도 똑같은 강의가 올라와 있어서, 굳이 가입할 필요가 없다.</p><p>제작자가 올린 Github의 <a href="https://github.com/wesbos/JavaScript30">JavaScript30 프로젝트</a>를 fork하여 시작해도 되고, 코드만 다운받아도 된다.</p><p>Course를 공부하는 방법은 간단하다. 각 프로젝트마다 <code>index-START.html</code> 파일과 <code>index-FINISHED.html</code> 파일이 있는데, START로 문제를 해결하고, FINISHED로 모범답안을 참고하면 된다.</p><h2 id="Day-1-Javascript-Drum-Kit"><a href="#Day-1-Javascript-Drum-Kit" class="headerlink" title="Day 1 - Javascript Drum Kit"></a>Day 1 - Javascript Drum Kit</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/VuN8qwZoego" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="START"><a href="#START" class="headerlink" title="START"></a>START</h3><p>이제 <code>index-START.html</code>를 드럼 킷으로 만들어보자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Drum Kit<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keys&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;65&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>A<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>clap<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;83&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>S<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>hihat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;68&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>D<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>kick<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;70&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>F<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>openhat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;71&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>G<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>boom<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;72&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>H<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>ride<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;74&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>J<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>snare<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;75&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>K<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;76&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>L<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>tink<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;65&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;83&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;68&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/kick.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;70&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/openhat.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;71&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/boom.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;72&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/ride.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;74&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/snare.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;75&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/tom.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;76&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/tink.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FINISHED"><a href="#FINISHED" class="headerlink" title="FINISHED"></a>FINISHED</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Drum Kit<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keys&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;65&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>A<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>clap<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;83&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>S<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>hihat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;68&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>D<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>kick<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;70&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>F<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>openhat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;71&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>G<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>boom<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;72&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>H<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>ride<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;74&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>J<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>snare<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;75&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>K<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;76&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>L<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sound&quot;</span>&gt;</span>tink<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;65&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;83&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;68&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/kick.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;70&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/openhat.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;71&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/boom.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;72&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/ride.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;74&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/snare.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;75&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/tom.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;76&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/tink.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">removeTransition</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.propertyName !== <span class="string">&quot;transform&quot;</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        e.target.classList.remove(<span class="string">&quot;playing&quot;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">playSound</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">`audio[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> key = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!audio) <span class="keyword">return</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        key.classList.add(<span class="string">&quot;playing&quot;</span>);</span></span><br><span class="line">        audio.currentTime = 0;</span><br><span class="line">        audio.play();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> keys = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.key&quot;</span>));</span></span><br><span class="line"><span class="javascript">      keys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span></span></span><br><span class="line"><span class="javascript">        key.addEventListener(<span class="string">&quot;transitionend&quot;</span>, removeTransition)</span></span><br><span class="line">      );</span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">&quot;keydown&quot;</span>, playSound);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Day 1이라서 무심코 봤다가 큰 코 다쳤다. 우선 audio 태그를 다뤄본 적이 거의 없어 js에서 플레이시키는 방법도 몰랐다.</p><p>또한 <code>getElementsbyClassName</code>, <code>getElementById</code>에 익숙해져서 <code>querySelector</code>에서 <code>data-key</code> 속성으로 <code>DOM</code> 객체를 다루는 것도 쉽지 않았다.</p><p>이번에 완전히 새로 배운 것은 <code>classList</code>이다. <code>DOM</code> 객체에 <code>class</code>를 부여하고(<code>add</code>), 삭제(<code>remove</code>)할 수도 있다. 예를 들어 <code>key</code>에 <code>playing</code>이라는 <code>class</code>를 부여하면, <code>css</code>에 작성된 <code>.playing</code> 효과가 나타나고, 원할 때 <code>remove</code>로 삭제할 수 있다.</p><p>그리고 <code>transitionend</code>라는 <code>event</code>가 있는 것도 처음 알았다. 변형이 끝났을 때의 이벤트를 어떻게 처리할까 하다가 저런 사소한 이벤트의 제어도 순수하게 가능한게 신기했다.</p><p><strong>그렇게 Day 1이 끝났다.</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Javascript30과-VanillaJS&quot;&gt;&lt;a href=&quot;#Javascript30과-VanillaJS&quot; class=&quot;headerlink&quot; title=&quot;Javascript30과 VanillaJS&quot;&gt;&lt;/a&gt;Javascript30과 Van</summary>
      
    
    
    
    <category term="javascript" scheme="https://zinirun.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://zinirun.github.io/tags/javascript/"/>
    
    <category term="javascript30" scheme="https://zinirun.github.io/tags/javascript30/"/>
    
    <category term="VanillaJS" scheme="https://zinirun.github.io/tags/VanillaJS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo에 Disqus 설치하기</title>
    <link href="https://zinirun.github.io/2020/08/14/how-to-install-disqus-to-hexo/"/>
    <id>https://zinirun.github.io/2020/08/14/how-to-install-disqus-to-hexo/</id>
    <published>2020-08-14T14:40:48.000Z</published>
    <updated>2020-08-14T14:57:11.197Z</updated>
    
    <content type="html"><![CDATA[<p>기본적으로 Hexo에는 댓글 기능이 없다. 개발자가 만들어서 쓰던지, 설치형 댓글 서비스를 이용하던지 해야한다. 이미 유명한 <strong>Disqus</strong>라는 댓글 서비스가 있기 때문에 이를 이용하면 효율적인 댓글 시스템을 구축할 수 있다.</p><p>사용하는 블로그 테마에 따라 comment를 지원하는 경우가 있을 수 있으니 해당 테마의 설명에서 확인해보자.</p><p>내가 사용하는 <a href="https://github.com/Siricee/hexo-theme-Chic">Chic 테마</a>는 disqus comment 기능이 내장되어 있지 않기 때문에 직접 코드를 넣어주어야 했다.</p><h2 id="Disqus-가입-설정하기"><a href="#Disqus-가입-설정하기" class="headerlink" title="Disqus 가입, 설정하기"></a>Disqus 가입, 설정하기</h2><ul><li><a href="https://disqus.com/">Disqus</a>에 회원가입 후 프로필, 계정을 설정하고 <strong>GET STARTED</strong> 버튼을 클릭한다.</li><li><strong>I want to install Disqus on my site</strong>를 클릭한다.</li><li>사이트명, 카테고리를 선택하고 <strong>Create Site</strong>를 클릭한다.</li><li>plan을 선택해야 하는데 무료 사용으로도 댓글 기능을 사용할 수 있기에 <code>Basic</code>을 선택한다.</li></ul><p>이제 <strong>Platform</strong>을 선택하는데, Jekyll, WordPress 등의 블로그 플랫폼은 지원하지만 Hexo는 목록에 없다. 밑에 **I don’t see my platform~**을 선택한다.</p><h2 id="테마에-Disqus-위젯-넣기"><a href="#테마에-Disqus-위젯-넣기" class="headerlink" title="테마에 Disqus 위젯 넣기"></a>테마에 Disqus 위젯 넣기</h2><p>테마에서 post와 관련된 ejs 파일을 찾아 밑의 코드 <strong>또는 Disqus 사이트에서 넣으라고 준 코드</strong> 를 원하는 부분에 끼워넣으면 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;disqus_thread&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.</span><br><span class="line"><span class="javascript">    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https:<span class="comment">//disqus.com/admin/universalcode/#configuration-variables*/</span></span></span><br><span class="line">    /*</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> disqus_config = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.page.url = PAGE_URL;  <span class="comment">// Replace PAGE_URL with your page&#x27;s canonical URL variable</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.page.identifier = PAGE_IDENTIFIER; <span class="comment">// Replace PAGE_IDENTIFIER with your page&#x27;s unique identifier variable</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// DON&#x27;T EDIT BELOW THIS LINE</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> d = <span class="built_in">document</span>, s = d.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    s.src = <span class="string">&#x27;https://사용자이름.disqus.com/embed.js&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    s.setAttribute(<span class="string">&#x27;data-timestamp&#x27;</span>, +<span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line">    (d.head || d.body).appendChild(s);</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://disqus.com/?ref_noscript&quot;</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-서버-재실행하기"><a href="#Hexo-서버-재실행하기" class="headerlink" title="Hexo 서버 재실행하기"></a>Hexo 서버 재실행하기</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>모든 설정이 끝났으니 Hexo 서버를 deploy한다.</p><p>이제 블로그를 가보면, 게시물마다 Disqus 댓글 시스템이 구축된 것을 볼 수 있다!<br>무슨 블로그 플랫폼에 댓글이 셀프냐고 할 수도 있겠지만, 익숙한 것에 대한 고마움을 느낀다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;기본적으로 Hexo에는 댓글 기능이 없다. 개발자가 만들어서 쓰던지, 설치형 댓글 서비스를 이용하던지 해야한다. 이미 유명한 &lt;strong&gt;Disqus&lt;/strong&gt;라는 댓글 서비스가 있기 때문에 이를 이용하면 효율적인 댓글 시스템을 구축할 수</summary>
      
    
    
    
    <category term="blog" scheme="https://zinirun.github.io/categories/blog/"/>
    
    
    <category term="hexo" scheme="https://zinirun.github.io/tags/hexo/"/>
    
    <category term="disqus" scheme="https://zinirun.github.io/tags/disqus/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 기술블로그 시작하기, 내가 Hexo를 선택한 이유</title>
    <link href="https://zinirun.github.io/2020/08/14/how-to-install-hexo/"/>
    <id>https://zinirun.github.io/2020/08/14/how-to-install-hexo/</id>
    <published>2020-08-14T12:53:29.000Z</published>
    <updated>2020-08-14T13:56:13.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="멀쩡한-블로그를-이사한-이유"><a href="#멀쩡한-블로그를-이사한-이유" class="headerlink" title="멀쩡한 블로그를 이사한 이유"></a>멀쩡한 블로그를 이사한 이유</h2><p>기존에 나는 <a href="https://zinirun.blogspot.com/">blogspot 블로그</a>을 사용했다. 처음엔 명색이 개발자의 기술 블로그인데 <code>github pages</code>나 <code>netlify</code>에 <code>jekyll</code>을 사용한 블로그를 만들어보고 싶었지만, 굳이 블로그 플랫폼에 큰 신경을 쓸 필요가 있을까 싶어 <code>blogspot</code>을 계속 사용했다. 사용할 수록 불편함이 드러났다. 우선 코드 삽입을 지원하지 않아서 따로 Colorscripter를 사용하는 것, 테마 자체가 불안정하고 커스텀도 완벽하지 않아서 “내가 쓰고 싶은 블로그”를 완성하지 못했다. 이사를 결심했다.</p><h3 id="Jekyll이냐-Hexo냐"><a href="#Jekyll이냐-Hexo냐" class="headerlink" title="Jekyll이냐 Hexo냐"></a>Jekyll이냐 Hexo냐</h3><p>가장 많이 사용하는 <code>Jekyll</code>, 열심히 따라오고 있는 <code>Hexo</code>중 고민을 많이 했다. Jekyll이 <code>Ruby</code> 기반, Hexo가 <code>Node.js</code> 기반이라고 한다. 그래서 Hexo보다 Jekyll이 속도면에서 뒤쳐진다. 그리고 일단 나는 <code>Ruby</code>를 몰라서 문제 해결이나 번들 충돌을 해결할 자신이 없었다. <code>Node</code>는 플젝도 몇번 해보고 어느정도 안다고 생각해서 보다 <em>나에게 친숙한</em> Hexo를 선택하게 되었다.</p><h2 id="Hexo-설치하기"><a href="#Hexo-설치하기" class="headerlink" title="Hexo 설치하기"></a>Hexo 설치하기</h2><p><a href="https://nodejs.org/ko/">Node.js</a>와 <a href="https://git-scm.com/">Git</a>을 먼저 설치하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>-g 옵션은 global로, 특정 폴더(프로젝트)가 아닌 글로벌 폴더에 저장하여 어디서든 사용할 수 있게 해준다.</p><h2 id="Hexo-시작하기"><a href="#Hexo-시작하기" class="headerlink" title="Hexo 시작하기"></a>Hexo 시작하기</h2><p>블로그 폴더를 하나 만들 것이다. 이름은 blog가 아니라도 상관없다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm i</span><br></pre></td></tr></table></figure><p>이 상태에서 로컬 서버로 블로그를 확인할 수 있다!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><code>localhost:4000</code>에 접속하여 확인해보자.</p><h2 id="Github-Pages로-배포하기"><a href="#Github-Pages로-배포하기" class="headerlink" title="Github Pages로 배포하기"></a>Github Pages로 배포하기</h2><p><code>Github Pages</code>, <code>Netlify</code>, <code>Heroku</code> 등의 많은 서비스가 있지만 대부분의 개발자가 사용하는 깃헙으로 블로그를 배포하기로 했다.</p><h3 id="Github-Repository-만들기"><a href="#Github-Repository-만들기" class="headerlink" title="Github Repository 만들기"></a>Github Repository 만들기</h3><p><code>사용자이름.github.io</code>라는 이름으로 프로젝트를 생성한다. 이렇게 짓는 이유는 블로그를 프로젝트 페이지가 아닌 사용자 페이지로 만들 것이기 때문이다. <code>.gitignore</code>, <code>licence</code>등 기타 설정을 안 건드려도 된다.</p><p>Github에 Deploy하기 위해서는 플러그인 설치가 필요하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>이제 거의 끝났다. 블로그의 전반적인 설정만 하면 된다.<br>블로그의 소스 폴더에서 <code>_config.yml</code> 파일을 열어보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 지니의 기술 블로그</span><br><span class="line">subtitle: Hexo 기반의 기술 블로그</span><br><span class="line">description: 기술 블로그입니다.</span><br><span class="line">author: zini # 저자 이름</span><br><span class="line">timezone: Asia&#x2F;Seoul</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">url: https:&#x2F;&#x2F;사용자이름.github.io&#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F; # 새로운 글에 붙을 고정 URL 포맷</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;사용자이름&#x2F;사용자이름.github.io.git</span><br></pre></td></tr></table></figure><h3 id="배포해보자"><a href="#배포해보자" class="headerlink" title="배포해보자"></a>배포해보자</h3><p>Github, 블로그 설정이 모두 끝났다. 이제 정말 간단하게 배포하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>g: generate, d: deploy - 빌드/배포를 한번에 할 수 있다. (물론 따로도 할 수 있다)</p><p>이제 <code>사용자이름.gitgub.io</code>에 접속해서 확인해보자!</p><h2 id="Theme-설치-설정까지"><a href="#Theme-설치-설정까지" class="headerlink" title="Theme 설치, 설정까지"></a>Theme 설치, 설정까지</h2><p>기본 테마도 괜찮지만 이걸 그대로 사용할 것이라면 Hexo를 사용하지도 않았다. <a href="https://hexo.io/themes/">Hexo Themes</a>에서 300개가 넘는 테마를 고를 수 있다. 고심끝에 고른 테마는 <a href="https://github.com/Siricee/hexo-theme-Chic">Siricee의 Chic</a> 테마이다. 테마 설정도 어렵지 않다.</p><p><strong>테마마다 설치, 설정 과정이 다를 수도 있다, 꼭 확인해보자</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog/themes</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/Siricee/hexo-theme-Chic.git Chic</span><br></pre></td></tr></table></figure><p>처음 init시 정한 폴더명이 blog가 아니라면 이름을 바꿔서 들어가자.</p><p>이제 themes에 테마 구조가 설치되었을 것이고, 이전에 수정했던 <code>_config.yml</code>를 다시 열어 Theme 설정을 바꿔준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: Chic <span class="comment"># 설치한 테마 이름으로 설정</span></span><br></pre></td></tr></table></figure><p>테마 설치, 설정까지 끝났다. 이제 설치한 테마의 종류에 따라 themes 폴더의 <code>_config.yml</code>을 입맛에 맡게 수정해주면 된다.<br>(대부분의 테마마다 github의 readme에 상세히 설명되어 있다)</p><h2 id="진작에-쓸-걸"><a href="#진작에-쓸-걸" class="headerlink" title="진작에 쓸 걸"></a>진작에 쓸 걸</h2><p>Colorscripter의 복사 늪에서 벗어나고, css 꼬임과 기타 문제에서도 벗어났다. Jekyll이나 Hexo나 웹 코드를 해석할 줄 아는 개발자라면 크게 어렵지 않게 사용할 수 있고, 고생한 만큼 자유도는 커진다.</p><p><em>블로그 이사를 결심한 지 한달이 넘어, 마침내 이루었다.</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;멀쩡한-블로그를-이사한-이유&quot;&gt;&lt;a href=&quot;#멀쩡한-블로그를-이사한-이유&quot; class=&quot;headerlink&quot; title=&quot;멀쩡한 블로그를 이사한 이유&quot;&gt;&lt;/a&gt;멀쩡한 블로그를 이사한 이유&lt;/h2&gt;&lt;p&gt;기존에 나는 &lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="blog" scheme="https://zinirun.github.io/categories/blog/"/>
    
    
    <category term="hexo" scheme="https://zinirun.github.io/tags/hexo/"/>
    
    <category term="gh-pages" scheme="https://zinirun.github.io/tags/gh-pages/"/>
    
  </entry>
  
</feed>
